
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025e50  0800a1f8  0800a1f8  0001a1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030048  08030048  000501d8  2**0
                  CONTENTS
  4 .ARM          00000008  08030048  08030048  00040048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030050  08030050  000501d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030050  08030050  00040050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030054  08030054  00040054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08030058  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  200001d8  08030230  000501d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08030230  00050744  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000501d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00050206  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b7b  00000000  00000000  00050249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c81  00000000  00000000  00069dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0006da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a7  00000000  00000000  0006efc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b54a  00000000  00000000  00070067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e079  00000000  00000000  0009b5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101d22  00000000  00000000  000b962a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006aa8  00000000  00000000  001bb34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001c1df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a1e0 	.word	0x0800a1e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0800a1e0 	.word	0x0800a1e0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <am2320_Init>:
 */


#include "am2030.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	461c      	mov	r4, r3
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bc90      	pop	{r4, r7}
 8000618:	4770      	bx	lr
	...

0800061c <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <am2320_ReadValue+0xa4>)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	4611      	mov	r1, r2
 800062e:	8019      	strh	r1, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	0c12      	lsrs	r2, r2, #16
 8000634:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	b299      	uxth	r1, r3
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2200      	movs	r2, #0
 800064a:	f002 ffb9 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f002 fc12 	bl	8002e78 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	b299      	uxth	r1, r3
 800065e:	f107 020c 	add.w	r2, r7, #12
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2303      	movs	r3, #3
 800066a:	f002 ffa9 	bl	80035c0 <HAL_I2C_Master_Transmit>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <am2320_ReadValue+0x5c>
		return 1;
 8000674:	2301      	movs	r3, #1
 8000676:	e01f      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 8000678:	2002      	movs	r0, #2
 800067a:	f002 fbfd 	bl	8002e78 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	b299      	uxth	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	1d5a      	adds	r2, r3, #5
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2308      	movs	r3, #8
 8000694:	f003 f888 	bl	80037a8 <HAL_I2C_Master_Receive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <am2320_ReadValue+0x86>
		return 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	e00a      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	799b      	ldrb	r3, [r3, #6]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d005      	beq.n	80006b6 <am2320_ReadValue+0x9a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d001      	beq.n	80006b6 <am2320_ReadValue+0x9a>
		return 3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	e000      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	0800a1f8 	.word	0x0800a1f8

080006c4 <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff ffa3 	bl	800061c <am2320_ReadValue>
 80006d6:	4603      	mov	r3, r0
 80006d8:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	7a9b      	ldrb	r3, [r3, #10]
 80006de:	b21a      	sxth	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	7a5b      	ldrb	r3, [r3, #9]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 80006ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da05      	bge.n	8000702 <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	425b      	negs	r3, r3
 8000700:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 8000702:	8afb      	ldrh	r3, [r7, #22]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800070c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	edc3 7a00 	vstr	s15, [r3]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	7a1b      	ldrb	r3, [r3, #8]
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4313      	orrs	r3, r2
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000730:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	edc3 7a00 	vstr	s15, [r3]
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_GPIO_Init>:
     PD1   ------> UART4_TX
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4b95      	ldr	r3, [pc, #596]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a94      	ldr	r2, [pc, #592]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b92      	ldr	r3, [pc, #584]	; (80009b4 <MX_GPIO_Init+0x26c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b8f      	ldr	r3, [pc, #572]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a8e      	ldr	r2, [pc, #568]	; (80009b4 <MX_GPIO_Init+0x26c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b8c      	ldr	r3, [pc, #560]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078e:	4b89      	ldr	r3, [pc, #548]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a88      	ldr	r2, [pc, #544]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000794:	f043 0320 	orr.w	r3, r3, #32
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b86      	ldr	r3, [pc, #536]	; (80009b4 <MX_GPIO_Init+0x26c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b83      	ldr	r3, [pc, #524]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a82      	ldr	r2, [pc, #520]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b80      	ldr	r3, [pc, #512]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b7d      	ldr	r3, [pc, #500]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7c      	ldr	r2, [pc, #496]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7a      	ldr	r3, [pc, #488]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b77      	ldr	r3, [pc, #476]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a76      	ldr	r2, [pc, #472]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b74      	ldr	r3, [pc, #464]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b71      	ldr	r3, [pc, #452]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a70      	ldr	r2, [pc, #448]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b6e      	ldr	r3, [pc, #440]	; (80009b4 <MX_GPIO_Init+0x26c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4b6b      	ldr	r3, [pc, #428]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a6a      	ldr	r2, [pc, #424]	; (80009b4 <MX_GPIO_Init+0x26c>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <MX_GPIO_Init+0x26c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2168      	movs	r1, #104	; 0x68
 8000822:	4865      	ldr	r0, [pc, #404]	; (80009b8 <MX_GPIO_Init+0x270>)
 8000824:	f002 fe22 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800082e:	4863      	ldr	r0, [pc, #396]	; (80009bc <MX_GPIO_Init+0x274>)
 8000830:	f002 fe1c 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	4861      	ldr	r0, [pc, #388]	; (80009c0 <MX_GPIO_Init+0x278>)
 800083a:	f002 fe17 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000844:	485f      	ldr	r0, [pc, #380]	; (80009c4 <MX_GPIO_Init+0x27c>)
 8000846:	f002 fe11 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800084a:	2314      	movs	r3, #20
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4856      	ldr	r0, [pc, #344]	; (80009b8 <MX_GPIO_Init+0x270>)
 800085e:	f002 fc41 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000862:	2368      	movs	r3, #104	; 0x68
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	484f      	ldr	r0, [pc, #316]	; (80009b8 <MX_GPIO_Init+0x270>)
 800087a:	f002 fc33 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	484c      	ldr	r0, [pc, #304]	; (80009c4 <MX_GPIO_Init+0x27c>)
 8000894:	f002 fc26 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000898:	2332      	movs	r3, #50	; 0x32
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a8:	230b      	movs	r3, #11
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4844      	ldr	r0, [pc, #272]	; (80009c4 <MX_GPIO_Init+0x27c>)
 80008b4:	f002 fc16 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008b8:	2386      	movs	r3, #134	; 0x86
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c8:	230b      	movs	r3, #11
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	483d      	ldr	r0, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x280>)
 80008d4:	f002 fc06 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ea:	230b      	movs	r3, #11
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4831      	ldr	r0, [pc, #196]	; (80009bc <MX_GPIO_Init+0x274>)
 80008f6:	f002 fbf5 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	482a      	ldr	r0, [pc, #168]	; (80009bc <MX_GPIO_Init+0x274>)
 8000914:	f002 fbe6 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4824      	ldr	r0, [pc, #144]	; (80009c0 <MX_GPIO_Init+0x278>)
 8000930:	f002 fbd8 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	481e      	ldr	r0, [pc, #120]	; (80009c0 <MX_GPIO_Init+0x278>)
 8000948:	f002 fbcc 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800094c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <MX_GPIO_Init+0x27c>)
 8000966:	f002 fbbd 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800096a:	2303      	movs	r3, #3
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800097a:	2308      	movs	r3, #8
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_GPIO_Init+0x284>)
 8000986:	f002 fbad 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800098a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099c:	230b      	movs	r3, #11
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_GPIO_Init+0x278>)
 80009a8:	f002 fb9c 	bl	80030e4 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3738      	adds	r7, #56	; 0x38
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40021800 	.word	0x40021800
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020c00 	.word	0x40020c00

080009d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C1_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a0c:	f002 fd48 	bl	80034a0 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fcc5 	bl	80013a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a1e:	f003 fa25 	bl	8003e6c <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fcbc 	bl	80013a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a30:	f003 fa67 	bl	8003f02 <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fcb3 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001f4 	.word	0x200001f4
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	00c0eaff 	.word	0x00c0eaff

08000a50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ae      	sub	sp, #184	; 0xb8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2290      	movs	r2, #144	; 0x90
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 feb2 	bl	80077da <memset>
  if(i2cHandle->Instance==I2C1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <HAL_I2C_MspInit+0xb4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d13c      	bne.n	8000afa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 ffb8 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a9a:	f000 fc83 	bl	80013a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_I2C_MspInit+0xb8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_I2C_MspInit+0xb8>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_I2C_MspInit+0xb8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abe:	2312      	movs	r3, #18
 8000ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ada:	4619      	mov	r1, r3
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <HAL_I2C_MspInit+0xbc>)
 8000ade:	f002 fb01 	bl	80030e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_I2C_MspInit+0xb8>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_I2C_MspInit+0xb8>)
 8000ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_I2C_MspInit+0xb8>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	37b8      	adds	r7, #184	; 0xb8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
}
 8000b18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b1a:	f3bf 8f6f 	isb	sy
}
 8000b1e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <SCB_EnableICache+0x48>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b28:	f3bf 8f4f 	dsb	sy
}
 8000b2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b2e:	f3bf 8f6f 	isb	sy
}
 8000b32:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <SCB_EnableICache+0x48>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <SCB_EnableICache+0x48>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b40:	f3bf 8f4f 	dsb	sy
}
 8000b44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b46:	f3bf 8f6f 	isb	sy
}
 8000b4a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <SCB_EnableDCache+0x84>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6a:	f3bf 8f4f 	dsb	sy
}
 8000b6e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <SCB_EnableDCache+0x84>)
 8000b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b76:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	0b5b      	lsrs	r3, r3, #13
 8000b7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b80:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	08db      	lsrs	r3, r3, #3
 8000b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b8a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	015a      	lsls	r2, r3, #5
 8000b90:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b94:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b9a:	4911      	ldr	r1, [pc, #68]	; (8000be0 <SCB_EnableDCache+0x84>)
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	60ba      	str	r2, [r7, #8]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1ef      	bne.n	8000b8c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	60fa      	str	r2, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1e5      	bne.n	8000b82 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb6:	f3bf 8f4f 	dsb	sy
}
 8000bba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SCB_EnableDCache+0x84>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <SCB_EnableDCache+0x84>)
 8000bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc8:	f3bf 8f4f 	dsb	sy
}
 8000bcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bce:	f3bf 8f6f 	isb	sy
}
 8000bd2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00
 8000be4:	00000000 	.word	0x00000000

08000be8 <rgb888_to_rgb565>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t rgb888_to_rgb565(uint8_t red8, uint8_t green8, uint8_t blue8) {
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	717b      	strb	r3, [r7, #5]
// Convert 8-bit red to 5-bit red.
	uint8_t red5 = (uint8_t) ((red8 / 255.0) * 31);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	ee07 3a90 	vmov	s15, r3
 8000c00:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c04:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000ca0 <rgb888_to_rgb565+0xb8>
 8000c08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c0c:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8000c10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c18:	edc7 7a00 	vstr	s15, [r7]
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	75fb      	strb	r3, [r7, #23]
// Convert 8-bit green to 6-bit green.
	uint8_t green6 = (uint8_t) ((green8 / 255.0) * 63);
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c2a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8000ca0 <rgb888_to_rgb565+0xb8>
 8000c2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c32:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000ca8 <rgb888_to_rgb565+0xc0>
 8000c36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c3e:	edc7 7a00 	vstr	s15, [r7]
 8000c42:	783b      	ldrb	r3, [r7, #0]
 8000c44:	75bb      	strb	r3, [r7, #22]
// Convert 8-bit blue to 5-bit blue.
	uint8_t blue5 = (uint8_t) ((blue8 / 255.0) * 31);
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c50:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000ca0 <rgb888_to_rgb565+0xb8>
 8000c54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c58:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8000c5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c64:	edc7 7a00 	vstr	s15, [r7]
 8000c68:	783b      	ldrb	r3, [r7, #0]
 8000c6a:	757b      	strb	r3, [r7, #21]

// Shift the red value to the left by 11 bits.
	uint16_t red5_shifted = (uint16_t) (red5) << 11;
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	02db      	lsls	r3, r3, #11
 8000c72:	827b      	strh	r3, [r7, #18]
// Shift the green value to the left by 5 bits.
	uint16_t green6_shifted = (uint16_t) (green6) << 5;
 8000c74:	7dbb      	ldrb	r3, [r7, #22]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	015b      	lsls	r3, r3, #5
 8000c7a:	823b      	strh	r3, [r7, #16]

// Combine the red, green, and blue values.
	uint16_t rgb565 = red5_shifted | green6_shifted | blue5;
 8000c7c:	8a7a      	ldrh	r2, [r7, #18]
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	81fb      	strh	r3, [r7, #14]

	return rgb565;
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	371c      	adds	r7, #28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	f3af 8000 	nop.w
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	406fe000 	.word	0x406fe000
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	404f8000 	.word	0x404f8000

08000cb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b0df      	sub	sp, #380	; 0x17c
 8000cb4:	af02      	add	r7, sp, #8
	char tempVal[100];
	/* USER CODE END 1 */
	/* Enable the CPU Cache */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000cb6:	f7ff ff2b 	bl	8000b10 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000cba:	f7ff ff4f 	bl	8000b5c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cbe:	f002 f875 	bl	8002dac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cc2:	f000 faff 	bl	80012c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cc6:	f7ff fd3f 	bl	8000748 <MX_GPIO_Init>
	MX_SPI5_Init();
 8000cca:	f000 fbb7 	bl	800143c <MX_SPI5_Init>
	MX_TIM1_Init();
 8000cce:	f000 fd6b 	bl	80017a8 <MX_TIM1_Init>
	MX_RNG_Init();
 8000cd2:	f000 fb6b 	bl	80013ac <MX_RNG_Init>
	MX_TIM2_Init();
 8000cd6:	f000 fdbb 	bl	8001850 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000cda:	f000 fe07 	bl	80018ec <MX_TIM3_Init>
	MX_I2C1_Init();
 8000cde:	f7ff fe77 	bl	80009d0 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8000ce2:	f000 fef5 	bl	8001ad0 <MX_USART3_UART_Init>
	MX_USART1_UART_Init();
 8000ce6:	f000 fec3 	bl	8001a70 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	cmdBuffer[0] = 0x03;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	cmdBuffer[1] = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	cmdBuffer[2] = 0x04;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102

	ILI9341_Init(); //initial driver setup to drive ili9341
 8000cfc:	f001 fc18 	bl	8002530 <ILI9341_Init>
	Am2320_HandleTypeDef Am2320_;
	Am2320_ = am2320_Init(&hi2c1,  0x01 << 1);
 8000d00:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000d04:	f5a3 74a8 	sub.w	r4, r3, #336	; 0x150
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	49c4      	ldr	r1, [pc, #784]	; (8001020 <main+0x370>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fc6c 	bl	80005ec <am2320_Init>
 8000d14:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000d18:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		/* USER CODE BEGIN 3 */
		//Send Temp & Humid via UART2
		//Wake up sensor

		if (onPage == 0) {
 8000d22:	4bc0      	ldr	r3, [pc, #768]	; (8001024 <main+0x374>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <main+0x88>
			ILI9341_Fill_Screen(WHITE);
 8000d2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d2e:	f001 fdab 	bl	8002888 <ILI9341_Fill_Screen>
			onPage = 2;
 8000d32:	4bbc      	ldr	r3, [pc, #752]	; (8001024 <main+0x374>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	701a      	strb	r2, [r3, #0]
		}
		am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 8000d38:	f107 0218 	add.w	r2, r7, #24
 8000d3c:	f107 011c 	add.w	r1, r7, #28
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fcbd 	bl	80006c4 <am2320_GetTemperatureAndHumidity>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f001 fb92 	bl	8002474 <ILI9341_Set_Rotation>
		sprintf(tempVal, "%.1f C", temperature);
 8000d50:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000d54:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d60:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d64:	ec53 2b17 	vmov	r2, r3, d7
 8000d68:	49af      	ldr	r1, [pc, #700]	; (8001028 <main+0x378>)
 8000d6a:	f006 fca5 	bl	80076b8 <siprintf>
		sprintf(humidVal, "%.1f%%RH", humidity);
 8000d6e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000d72:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000d76:	edd3 7a00 	vldr	s15, [r3]
 8000d7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7e:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000d82:	ec53 2b17 	vmov	r2, r3, d7
 8000d86:	49a9      	ldr	r1, [pc, #676]	; (800102c <main+0x37c>)
 8000d88:	f006 fc96 	bl	80076b8 <siprintf>
		ILI9341_Draw_Text(tempVal, 30, 30, BLACK, 2, WHITE);
 8000d8c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2302      	movs	r3, #2
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	221e      	movs	r2, #30
 8000d9e:	211e      	movs	r1, #30
 8000da0:	f001 f8b8 	bl	8001f14 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(humidVal, 180, 30, BLACK, 2, WHITE);
 8000da4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	2302      	movs	r3, #2
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	221e      	movs	r2, #30
 8000db6:	21b4      	movs	r1, #180	; 0xb4
 8000db8:	f001 f8ac 	bl	8001f14 <ILI9341_Draw_Text>
		ILI9341_Draw_Filled_Circle(160, 30, 15, h); // x , y , r ,color
 8000dbc:	4b9c      	ldr	r3, [pc, #624]	; (8001030 <main+0x380>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	211e      	movs	r1, #30
 8000dc4:	20a0      	movs	r0, #160	; 0xa0
 8000dc6:	f000 ff82 	bl	8001cce <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(30, 80, 15, 0XF800);
 8000dca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dce:	220f      	movs	r2, #15
 8000dd0:	2150      	movs	r1, #80	; 0x50
 8000dd2:	201e      	movs	r0, #30
 8000dd4:	f000 ff7b 	bl	8001cce <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Rectangle(50, 70, 100, 20, 0XF81F); //x , y , lx, ly ,color
 8000dd8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2314      	movs	r3, #20
 8000de0:	2264      	movs	r2, #100	; 0x64
 8000de2:	2146      	movs	r1, #70	; 0x46
 8000de4:	2032      	movs	r0, #50	; 0x32
 8000de6:	f001 fe4f 	bl	8002a88 <ILI9341_Draw_Rectangle>
		if (redVal <= 10) {
 8000dea:	4b92      	ldr	r3, [pc, #584]	; (8001034 <main+0x384>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	d826      	bhi.n	8000e40 <main+0x190>
			ILI9341_Draw_Rectangle(50, 70, redVal * 10, 20, 0XF800); //x , y , lx, ly ,color
 8000df2:	4b90      	ldr	r3, [pc, #576]	; (8001034 <main+0x384>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2314      	movs	r3, #20
 8000e0a:	2146      	movs	r1, #70	; 0x46
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f001 fe3b 	bl	8002a88 <ILI9341_Draw_Rectangle>
			sprintf(redPercent, "%d%%    ", redVal * 10);
 8000e12:	4b88      	ldr	r3, [pc, #544]	; (8001034 <main+0x384>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	461a      	mov	r2, r3
 8000e22:	4985      	ldr	r1, [pc, #532]	; (8001038 <main+0x388>)
 8000e24:	4885      	ldr	r0, [pc, #532]	; (800103c <main+0x38c>)
 8000e26:	f006 fc47 	bl	80076b8 <siprintf>
			ILI9341_Draw_Text(redPercent, 180, 70, BLACK, 2, WHITE);
 8000e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2302      	movs	r3, #2
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2300      	movs	r3, #0
 8000e36:	2246      	movs	r2, #70	; 0x46
 8000e38:	21b4      	movs	r1, #180	; 0xb4
 8000e3a:	4880      	ldr	r0, [pc, #512]	; (800103c <main+0x38c>)
 8000e3c:	f001 f86a 	bl	8001f14 <ILI9341_Draw_Text>

		}
		////////////////////////////////////green///////////////////////////////////
		ILI9341_Draw_Filled_Circle(30, 130, 15, 0X07E0);
 8000e40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e44:	220f      	movs	r2, #15
 8000e46:	2182      	movs	r1, #130	; 0x82
 8000e48:	201e      	movs	r0, #30
 8000e4a:	f000 ff40 	bl	8001cce <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Rectangle(50, 120, 100, 20, 0XC618); //x , y , lx, ly ,color
 8000e4e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2314      	movs	r3, #20
 8000e56:	2264      	movs	r2, #100	; 0x64
 8000e58:	2178      	movs	r1, #120	; 0x78
 8000e5a:	2032      	movs	r0, #50	; 0x32
 8000e5c:	f001 fe14 	bl	8002a88 <ILI9341_Draw_Rectangle>
		if (greenVal <= 10) {
 8000e60:	4b77      	ldr	r3, [pc, #476]	; (8001040 <main+0x390>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b0a      	cmp	r3, #10
 8000e66:	d826      	bhi.n	8000eb6 <main+0x206>
			ILI9341_Draw_Rectangle(50, 120, greenVal * 10, 20, 0X07E0);	//x , y , lx, ly ,color
 8000e68:	4b75      	ldr	r3, [pc, #468]	; (8001040 <main+0x390>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2314      	movs	r3, #20
 8000e80:	2178      	movs	r1, #120	; 0x78
 8000e82:	2032      	movs	r0, #50	; 0x32
 8000e84:	f001 fe00 	bl	8002a88 <ILI9341_Draw_Rectangle>
			sprintf(greenPercent, "%d%%    ", greenVal * 10);
 8000e88:	4b6d      	ldr	r3, [pc, #436]	; (8001040 <main+0x390>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	461a      	mov	r2, r3
 8000e98:	4967      	ldr	r1, [pc, #412]	; (8001038 <main+0x388>)
 8000e9a:	486a      	ldr	r0, [pc, #424]	; (8001044 <main+0x394>)
 8000e9c:	f006 fc0c 	bl	80076b8 <siprintf>
			ILI9341_Draw_Text(greenPercent, 180, 120, BLACK, 2, WHITE);
 8000ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2278      	movs	r2, #120	; 0x78
 8000eae:	21b4      	movs	r1, #180	; 0xb4
 8000eb0:	4864      	ldr	r0, [pc, #400]	; (8001044 <main+0x394>)
 8000eb2:	f001 f82f 	bl	8001f14 <ILI9341_Draw_Text>

		}
		////////////////////////////////////blue///////////////////////////////////
		ILI9341_Draw_Filled_Circle(30, 180, 15, 0X001F);
 8000eb6:	231f      	movs	r3, #31
 8000eb8:	220f      	movs	r2, #15
 8000eba:	21b4      	movs	r1, #180	; 0xb4
 8000ebc:	201e      	movs	r0, #30
 8000ebe:	f000 ff06 	bl	8001cce <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Rectangle(50, 170, 100, 20, 0X07FF);//x , y , lx, ly ,color
 8000ec2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2314      	movs	r3, #20
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	21aa      	movs	r1, #170	; 0xaa
 8000ece:	2032      	movs	r0, #50	; 0x32
 8000ed0:	f001 fdda 	bl	8002a88 <ILI9341_Draw_Rectangle>
		if (blueVal <= 10) {
 8000ed4:	4b5c      	ldr	r3, [pc, #368]	; (8001048 <main+0x398>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b0a      	cmp	r3, #10
 8000eda:	d82c      	bhi.n	8000f36 <main+0x286>
			ILI9341_Draw_Rectangle(50, 170, blueVal * 10, 20, 0X001F);//x , y , lx, ly ,color
 8000edc:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <main+0x398>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	231f      	movs	r3, #31
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2314      	movs	r3, #20
 8000ef2:	21aa      	movs	r1, #170	; 0xaa
 8000ef4:	2032      	movs	r0, #50	; 0x32
 8000ef6:	f001 fdc7 	bl	8002a88 <ILI9341_Draw_Rectangle>
			sprintf(bluePercent, "%d%%    ", blueVal * 10);
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <main+0x398>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	461a      	mov	r2, r3
 8000f0a:	494b      	ldr	r1, [pc, #300]	; (8001038 <main+0x388>)
 8000f0c:	484f      	ldr	r0, [pc, #316]	; (800104c <main+0x39c>)
 8000f0e:	f006 fbd3 	bl	80076b8 <siprintf>
			ILI9341_Draw_Text(bluePercent, 180, 170, BLACK, 2, WHITE);
 8000f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	22aa      	movs	r2, #170	; 0xaa
 8000f20:	21b4      	movs	r1, #180	; 0xb4
 8000f22:	484a      	ldr	r0, [pc, #296]	; (800104c <main+0x39c>)
 8000f24:	f000 fff6 	bl	8001f14 <ILI9341_Draw_Text>
			sprintf(someValToString, "%d", blueDecimal);
 8000f28:	4b49      	ldr	r3, [pc, #292]	; (8001050 <main+0x3a0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4949      	ldr	r1, [pc, #292]	; (8001054 <main+0x3a4>)
 8000f30:	4849      	ldr	r0, [pc, #292]	; (8001058 <main+0x3a8>)
 8000f32:	f006 fbc1 	bl	80076b8 <siprintf>

		}

		result = rgb888_to_rgb565(redDecimal, greenDecimal, blueDecimal);
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <main+0x3ac>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4a49      	ldr	r2, [pc, #292]	; (8001060 <main+0x3b0>)
 8000f3c:	7811      	ldrb	r1, [r2, #0]
 8000f3e:	4a44      	ldr	r2, [pc, #272]	; (8001050 <main+0x3a0>)
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fe50 	bl	8000be8 <rgb888_to_rgb565>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b45      	ldr	r3, [pc, #276]	; (8001064 <main+0x3b4>)
 8000f4e:	801a      	strh	r2, [r3, #0]
		sprintf(resultHex, "0X%04X", result);
 8000f50:	4b44      	ldr	r3, [pc, #272]	; (8001064 <main+0x3b4>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4944      	ldr	r1, [pc, #272]	; (8001068 <main+0x3b8>)
 8000f58:	4844      	ldr	r0, [pc, #272]	; (800106c <main+0x3bc>)
 8000f5a:	f006 fbad 	bl	80076b8 <siprintf>
		ILI9341_Draw_Text(resultHex, 180, 210, BLACK, 2, WHITE);
 8000f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2302      	movs	r3, #2
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	22d2      	movs	r2, #210	; 0xd2
 8000f6c:	21b4      	movs	r1, #180	; 0xb4
 8000f6e:	483f      	ldr	r0, [pc, #252]	; (800106c <main+0x3bc>)
 8000f70:	f000 ffd0 	bl	8001f14 <ILI9341_Draw_Text>
		sscanf(resultHex, "%x", &h);
 8000f74:	4a2e      	ldr	r2, [pc, #184]	; (8001030 <main+0x380>)
 8000f76:	493e      	ldr	r1, [pc, #248]	; (8001070 <main+0x3c0>)
 8000f78:	483c      	ldr	r0, [pc, #240]	; (800106c <main+0x3bc>)
 8000f7a:	f006 fbbd 	bl	80076f8 <siscanf>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f001 fa78 	bl	8002474 <ILI9341_Set_Rotation>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 fa75 	bl	8002474 <ILI9341_Set_Rotation>
		if (TP_Touchpad_Pressed()) {
 8000f8a:	f001 feff 	bl	8002d8c <TP_Touchpad_Pressed>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80eb 	beq.w	800116c <main+0x4bc>

			uint16_t x_pos = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
			uint16_t y_pos = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c

			HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000fa8:	4832      	ldr	r0, [pc, #200]	; (8001074 <main+0x3c4>)
 8000faa:	f002 fa5f 	bl	800346c <HAL_GPIO_WritePin>

			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fe28 	bl	8002c08 <TP_Read_Coordinates>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	f040 8159 	bne.w	8001272 <main+0x5c2>
				x_pos = position_array[0];
 8000fc0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000fc4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
				y_pos = position_array[1];
 8000fce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000fd2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c
				if ((x_pos >= 146 && x_pos <= 170)
 8000fdc:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8000fe0:	2b91      	cmp	r3, #145	; 0x91
 8000fe2:	d950      	bls.n	8001086 <main+0x3d6>
 8000fe4:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8000fe8:	2baa      	cmp	r3, #170	; 0xaa
 8000fea:	d84c      	bhi.n	8001086 <main+0x3d6>
						&& (y_pos >= 6 && y_pos <= 34))	//RedCheck
 8000fec:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d948      	bls.n	8001086 <main+0x3d6>
 8000ff4:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8000ff8:	2b22      	cmp	r3, #34	; 0x22
 8000ffa:	d844      	bhi.n	8001086 <main+0x3d6>
						{
					redVal += 1;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <main+0x384>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <main+0x384>)
 8001006:	701a      	strb	r2, [r3, #0]
					redDecimal += 25;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <main+0x3ac>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3319      	adds	r3, #25
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <main+0x3ac>)
 8001012:	701a      	strb	r2, [r3, #0]
					if (redVal == 11) {
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <main+0x384>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b0b      	cmp	r3, #11
 800101a:	f040 8098 	bne.w	800114e <main+0x49e>
 800101e:	e02b      	b.n	8001078 <main+0x3c8>
 8001020:	200001f4 	.word	0x200001f4
 8001024:	20000384 	.word	0x20000384
 8001028:	0800a1fc 	.word	0x0800a1fc
 800102c:	0800a204 	.word	0x0800a204
 8001030:	2000024e 	.word	0x2000024e
 8001034:	20000248 	.word	0x20000248
 8001038:	0800a210 	.word	0x0800a210
 800103c:	20000284 	.word	0x20000284
 8001040:	20000249 	.word	0x20000249
 8001044:	200002b8 	.word	0x200002b8
 8001048:	2000024a 	.word	0x2000024a
 800104c:	200002ec 	.word	0x200002ec
 8001050:	2000024c 	.word	0x2000024c
 8001054:	0800a21c 	.word	0x0800a21c
 8001058:	20000250 	.word	0x20000250
 800105c:	2000024b 	.word	0x2000024b
 8001060:	2000024d 	.word	0x2000024d
 8001064:	2000031e 	.word	0x2000031e
 8001068:	0800a220 	.word	0x0800a220
 800106c:	20000320 	.word	0x20000320
 8001070:	0800a228 	.word	0x0800a228
 8001074:	40020400 	.word	0x40020400
						redVal = 0;
 8001078:	4b82      	ldr	r3, [pc, #520]	; (8001284 <main+0x5d4>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
						redDecimal = 0;
 800107e:	4b82      	ldr	r3, [pc, #520]	; (8001288 <main+0x5d8>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
					if (redVal == 11) {
 8001084:	e063      	b.n	800114e <main+0x49e>
					}
				} else if ((x_pos >= 90 && x_pos <= 119)
 8001086:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 800108a:	2b59      	cmp	r3, #89	; 0x59
 800108c:	d922      	bls.n	80010d4 <main+0x424>
 800108e:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8001092:	2b77      	cmp	r3, #119	; 0x77
 8001094:	d81e      	bhi.n	80010d4 <main+0x424>
						&& (y_pos >= 9 && y_pos <= 60))	//GreenCheck
 8001096:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 800109a:	2b08      	cmp	r3, #8
 800109c:	d91a      	bls.n	80010d4 <main+0x424>
 800109e:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80010a2:	2b3c      	cmp	r3, #60	; 0x3c
 80010a4:	d816      	bhi.n	80010d4 <main+0x424>
						{
					greenVal += 1;
 80010a6:	4b79      	ldr	r3, [pc, #484]	; (800128c <main+0x5dc>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b77      	ldr	r3, [pc, #476]	; (800128c <main+0x5dc>)
 80010b0:	701a      	strb	r2, [r3, #0]
					greenDecimal += 25;
 80010b2:	4b77      	ldr	r3, [pc, #476]	; (8001290 <main+0x5e0>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3319      	adds	r3, #25
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b75      	ldr	r3, [pc, #468]	; (8001290 <main+0x5e0>)
 80010bc:	701a      	strb	r2, [r3, #0]
					if (greenVal == 11) {
 80010be:	4b73      	ldr	r3, [pc, #460]	; (800128c <main+0x5dc>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b0b      	cmp	r3, #11
 80010c4:	d143      	bne.n	800114e <main+0x49e>
						greenVal = 0;
 80010c6:	4b71      	ldr	r3, [pc, #452]	; (800128c <main+0x5dc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
						greenDecimal = 0;
 80010cc:	4b70      	ldr	r3, [pc, #448]	; (8001290 <main+0x5e0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
					if (greenVal == 11) {
 80010d2:	e03c      	b.n	800114e <main+0x49e>
					}
				} else if ((x_pos >= 44 && x_pos <= 69)
 80010d4:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 80010d8:	2b2b      	cmp	r3, #43	; 0x2b
 80010da:	d922      	bls.n	8001122 <main+0x472>
 80010dc:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 80010e0:	2b45      	cmp	r3, #69	; 0x45
 80010e2:	d81e      	bhi.n	8001122 <main+0x472>
						&& (y_pos >= 9 && y_pos <= 42))	//GreenCheck
 80010e4:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d91a      	bls.n	8001122 <main+0x472>
 80010ec:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80010f0:	2b2a      	cmp	r3, #42	; 0x2a
 80010f2:	d816      	bhi.n	8001122 <main+0x472>
						{
					blueVal += 1;
 80010f4:	4b67      	ldr	r3, [pc, #412]	; (8001294 <main+0x5e4>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b65      	ldr	r3, [pc, #404]	; (8001294 <main+0x5e4>)
 80010fe:	701a      	strb	r2, [r3, #0]
					blueDecimal += 25;
 8001100:	4b65      	ldr	r3, [pc, #404]	; (8001298 <main+0x5e8>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3319      	adds	r3, #25
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b63      	ldr	r3, [pc, #396]	; (8001298 <main+0x5e8>)
 800110a:	701a      	strb	r2, [r3, #0]
					if (blueVal == 11) {
 800110c:	4b61      	ldr	r3, [pc, #388]	; (8001294 <main+0x5e4>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b0b      	cmp	r3, #11
 8001112:	d11c      	bne.n	800114e <main+0x49e>
						blueVal = 0;
 8001114:	4b5f      	ldr	r3, [pc, #380]	; (8001294 <main+0x5e4>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
						blueDecimal = 0;
 800111a:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <main+0x5e8>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
					if (blueVal == 11) {
 8001120:	e015      	b.n	800114e <main+0x49e>
					}
				} else if ((x_pos >= 200 && x_pos <= 231)
 8001122:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8001126:	2bc7      	cmp	r3, #199	; 0xc7
 8001128:	d911      	bls.n	800114e <main+0x49e>
 800112a:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 800112e:	2be7      	cmp	r3, #231	; 0xe7
 8001130:	d80d      	bhi.n	800114e <main+0x49e>
						&& (y_pos >= 145 && y_pos <= 176))	//Center Top
 8001132:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8001136:	2b90      	cmp	r3, #144	; 0x90
 8001138:	d909      	bls.n	800114e <main+0x49e>
 800113a:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 800113e:	2bb0      	cmp	r3, #176	; 0xb0
 8001140:	d805      	bhi.n	800114e <main+0x49e>
						{
					isRenderImage = 0;
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <main+0x5ec>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
					onPage = 1;
 8001148:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <main+0x5f0>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
				}
				ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 800114e:	f8b7 116c 	ldrh.w	r1, [r7, #364]	; 0x16c
 8001152:	f8b7 016e 	ldrh.w	r0, [r7, #366]	; 0x16e
 8001156:	2300      	movs	r3, #0
 8001158:	2202      	movs	r2, #2
 800115a:	f000 fdb8 	bl	8001cce <ILI9341_Draw_Filled_Circle>
				ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800115e:	2001      	movs	r0, #1
 8001160:	f001 f988 	bl	8002474 <ILI9341_Set_Rotation>
				ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001164:	2000      	movs	r0, #0
 8001166:	f001 f985 	bl	8002474 <ILI9341_Set_Rotation>
 800116a:	e082      	b.n	8001272 <main+0x5c2>
			}

		} else {
			HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001172:	484c      	ldr	r0, [pc, #304]	; (80012a4 <main+0x5f4>)
 8001174:	f002 f97a 	bl	800346c <HAL_GPIO_WritePin>
		}
		while (onPage == 1) {
 8001178:	e07b      	b.n	8001272 <main+0x5c2>
			if (isRenderImage == 0) {
 800117a:	4b48      	ldr	r3, [pc, #288]	; (800129c <main+0x5ec>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10d      	bne.n	800119e <main+0x4ee>
				HAL_TIM_Base_Start_IT(&htim3);
 8001182:	4849      	ldr	r0, [pc, #292]	; (80012a8 <main+0x5f8>)
 8001184:	f004 fc8a 	bl	8005a9c <HAL_TIM_Base_Start_IT>
				ILI9341_Fill_Screen(WHITE);
 8001188:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800118c:	f001 fb7c 	bl	8002888 <ILI9341_Fill_Screen>
				ILI9341_Draw_Image((const char*) image_data_Image,
 8001190:	2101      	movs	r1, #1
 8001192:	4846      	ldr	r0, [pc, #280]	; (80012ac <main+0x5fc>)
 8001194:	f000 feee 	bl	8001f74 <ILI9341_Draw_Image>
				SCREEN_HORIZONTAL_1);
				isRenderImage = 1;
 8001198:	4b40      	ldr	r3, [pc, #256]	; (800129c <main+0x5ec>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]

			}
			ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800119e:	2001      	movs	r0, #1
 80011a0:	f001 f968 	bl	8002474 <ILI9341_Set_Rotation>
			ILI9341_Draw_Text("Group No.19", 135, 40, h, 2, WHITE);
 80011a4:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <main+0x600>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ac:	9201      	str	r2, [sp, #4]
 80011ae:	2202      	movs	r2, #2
 80011b0:	9200      	str	r2, [sp, #0]
 80011b2:	2228      	movs	r2, #40	; 0x28
 80011b4:	2187      	movs	r1, #135	; 0x87
 80011b6:	483f      	ldr	r0, [pc, #252]	; (80012b4 <main+0x604>)
 80011b8:	f000 feac 	bl	8001f14 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("Arin 1063", 135, 80, h, 2, WHITE);
 80011bc:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <main+0x600>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c4:	9201      	str	r2, [sp, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	2250      	movs	r2, #80	; 0x50
 80011cc:	2187      	movs	r1, #135	; 0x87
 80011ce:	483a      	ldr	r0, [pc, #232]	; (80012b8 <main+0x608>)
 80011d0:	f000 fea0 	bl	8001f14 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("Peet 1052", 135, 120, h, 2, WHITE);
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <main+0x600>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011dc:	9201      	str	r2, [sp, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	9200      	str	r2, [sp, #0]
 80011e2:	2278      	movs	r2, #120	; 0x78
 80011e4:	2187      	movs	r1, #135	; 0x87
 80011e6:	4835      	ldr	r0, [pc, #212]	; (80012bc <main+0x60c>)
 80011e8:	f000 fe94 	bl	8001f14 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("pond 1050", 135, 160, h, 2, WHITE);
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <main+0x600>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	9200      	str	r2, [sp, #0]
 80011fa:	22a0      	movs	r2, #160	; 0xa0
 80011fc:	2187      	movs	r1, #135	; 0x87
 80011fe:	4830      	ldr	r0, [pc, #192]	; (80012c0 <main+0x610>)
 8001200:	f000 fe88 	bl	8001f14 <ILI9341_Draw_Text>
			ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001204:	2001      	movs	r0, #1
 8001206:	f001 f935 	bl	8002474 <ILI9341_Set_Rotation>
			if (TP_Touchpad_Pressed()) {
 800120a:	f001 fdbf 	bl	8002d8c <TP_Touchpad_Pressed>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d02e      	beq.n	8001272 <main+0x5c2>

				uint16_t x_pos = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
				uint16_t y_pos = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
				uint16_t position_array[2];
				if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fcef 	bl	8002c08 <TP_Read_Coordinates>
 800122a:	4603      	mov	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d120      	bne.n	8001272 <main+0x5c2>
					x_pos = position_array[0];
 8001230:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001234:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
					y_pos = position_array[1];
 800123e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001242:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001246:	885b      	ldrh	r3, [r3, #2]
 8001248:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
					if ((x_pos >= 83 && x_pos <= 178)
 800124c:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001250:	2b52      	cmp	r3, #82	; 0x52
 8001252:	d90e      	bls.n	8001272 <main+0x5c2>
 8001254:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001258:	2bb2      	cmp	r3, #178	; 0xb2
 800125a:	d80a      	bhi.n	8001272 <main+0x5c2>
							&& (y_pos >= 8 && y_pos <= 99))	//IMG check
 800125c:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8001260:	2b07      	cmp	r3, #7
 8001262:	d906      	bls.n	8001272 <main+0x5c2>
 8001264:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8001268:	2b63      	cmp	r3, #99	; 0x63
 800126a:	d802      	bhi.n	8001272 <main+0x5c2>
							{
						onPage = 0;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <main+0x5f0>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
		while (onPage == 1) {
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <main+0x5f0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	f43f af7f 	beq.w	800117a <main+0x4ca>
					}

				}
			}
		}
		HAL_TIM_Base_Stop_IT(&htim3);
 800127c:	480a      	ldr	r0, [pc, #40]	; (80012a8 <main+0x5f8>)
 800127e:	f004 fc85 	bl	8005b8c <HAL_TIM_Base_Stop_IT>
		if (onPage == 0) {
 8001282:	e54e      	b.n	8000d22 <main+0x72>
 8001284:	20000248 	.word	0x20000248
 8001288:	2000024b 	.word	0x2000024b
 800128c:	20000249 	.word	0x20000249
 8001290:	2000024d 	.word	0x2000024d
 8001294:	2000024a 	.word	0x2000024a
 8001298:	2000024c 	.word	0x2000024c
 800129c:	20000385 	.word	0x20000385
 80012a0:	20000384 	.word	0x20000384
 80012a4:	40020400 	.word	0x40020400
 80012a8:	20000498 	.word	0x20000498
 80012ac:	0800a268 	.word	0x0800a268
 80012b0:	2000024e 	.word	0x2000024e
 80012b4:	0800a22c 	.word	0x0800a22c
 80012b8:	0800a238 	.word	0x0800a238
 80012bc:	0800a244 	.word	0x0800a244
 80012c0:	0800a250 	.word	0x0800a250

080012c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2234      	movs	r2, #52	; 0x34
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 fa81 	bl	80077da <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80012e8:	f002 fe58 	bl	8003f9c <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <SystemClock_Config+0xd8>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a2a      	ldr	r2, [pc, #168]	; (800139c <SystemClock_Config+0xd8>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <SystemClock_Config+0xd8>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <SystemClock_Config+0xdc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a25      	ldr	r2, [pc, #148]	; (80013a0 <SystemClock_Config+0xdc>)
 800130a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <SystemClock_Config+0xdc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001320:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001324:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 200;
 8001334:	23c8      	movs	r3, #200	; 0xc8
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800133c:	2309      	movs	r3, #9
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fe87 	bl	800405c <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x94>
		Error_Handler();
 8001354:	f000 f826 	bl	80013a4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001358:	f002 fe30 	bl	8003fbc <HAL_PWREx_EnableOverDrive>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0xa2>
		Error_Handler();
 8001362:	f000 f81f 	bl	80013a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2302      	movs	r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001372:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001376:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2106      	movs	r1, #6
 8001384:	4618      	mov	r0, r3
 8001386:	f003 f917 	bl	80045b8 <HAL_RCC_ClockConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xd0>
		Error_Handler();
 8001390:	f000 f808 	bl	80013a4 <Error_Handler>
	}
}
 8001394:	bf00      	nop
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x4>
	...

080013ac <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_RNG_Init+0x20>)
 80013b2:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <MX_RNG_Init+0x24>)
 80013b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_RNG_Init+0x20>)
 80013b8:	f003 ff4c 	bl	8005254 <HAL_RNG_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80013c2:	f7ff ffef 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000388 	.word	0x20000388
 80013d0:	50060800 	.word	0x50060800

080013d4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0a8      	sub	sp, #160	; 0xa0
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2290      	movs	r2, #144	; 0x90
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 f9f8 	bl	80077da <memset>
  if(rngHandle->Instance==RNG)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_RNG_MspInit+0x60>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d11b      	bne.n	800142c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fafd 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001410:	f7ff ffc8 	bl	80013a4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_RNG_MspInit+0x64>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_RNG_MspInit+0x64>)
 800141a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141e:	6353      	str	r3, [r2, #52]	; 0x34
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_RNG_MspInit+0x64>)
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800142c:	bf00      	nop
 800142e:	37a0      	adds	r7, #160	; 0xa0
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	50060800 	.word	0x50060800
 8001438:	40023800 	.word	0x40023800

0800143c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_SPI5_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001456:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800145a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_SPI5_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_SPI5_Init+0x74>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_SPI5_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_SPI5_Init+0x74>)
 800148a:	2207      	movs	r2, #7
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_SPI5_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_SPI5_Init+0x74>)
 800149c:	f003 ff04 	bl	80052a8 <HAL_SPI_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f7ff ff7d 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000398 	.word	0x20000398
 80014b4:	40015000 	.word	0x40015000

080014b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_SPI_MspInit+0x7c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d128      	bne.n	800152c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_SPI_MspInit+0x80>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <HAL_SPI_MspInit+0x80>)
 80014e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_SPI_MspInit+0x80>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_SPI_MspInit+0x80>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_SPI_MspInit+0x80>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_SPI_MspInit+0x80>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800150a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800151c:	2305      	movs	r3, #5
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <HAL_SPI_MspInit+0x84>)
 8001528:	f001 fddc 	bl	80030e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40015000 	.word	0x40015000
 8001538:	40023800 	.word	0x40023800
 800153c:	40021400 	.word	0x40021400

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x44>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x44>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x44>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x44>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x44>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f001 fc54 	bl	8002e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <TIM3_IRQHandler+0x14>)
 800159a:	f004 fb26 	bl	8005bea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  onPage = 0;
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <TIM3_IRQHandler+0x18>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000498 	.word	0x20000498
 80015ac:	20000384 	.word	0x20000384

080015b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_kill>:

int _kill(int pid, int sig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015ca:	f006 f959 	bl	8007880 <__errno>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
	return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_exit>:

void _exit (int status)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffe7 	bl	80015c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015f2:	e7fe      	b.n	80015f2 <_exit+0x12>

080015f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e00a      	b.n	800161c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001606:	f3af 8000 	nop.w
 800160a:	4601      	mov	r1, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	b2ca      	uxtb	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf0      	blt.n	8001606 <_read+0x12>
	}

return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e009      	b.n	8001654 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <_write+0x12>
	}
	return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_close>:

int _close(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168e:	605a      	str	r2, [r3, #4]
	return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_isatty>:

int _isatty(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	return 1;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f006 f8be 	bl	8007880 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20080000 	.word	0x20080000
 8001730:	00000400 	.word	0x00000400
 8001734:	200003fc 	.word	0x200003fc
 8001738:	20000748 	.word	0x20000748

0800173c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <SystemInit+0x5c>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <SystemInit+0x5c>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <SystemInit+0x60>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <SystemInit+0x60>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <SystemInit+0x60>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <SystemInit+0x60>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	490d      	ldr	r1, [pc, #52]	; (800179c <SystemInit+0x60>)
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <SystemInit+0x64>)
 800176a:	4013      	ands	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <SystemInit+0x60>)
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <SystemInit+0x68>)
 8001772:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <SystemInit+0x60>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <SystemInit+0x60>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x60>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SystemInit+0x5c>)
 8001788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800178c:	609a      	str	r2, [r3, #8]
#endif
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	40023800 	.word	0x40023800
 80017a0:	fef6ffff 	.word	0xfef6ffff
 80017a4:	24003010 	.word	0x24003010

080017a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <MX_TIM1_Init+0xa4>)
 80017ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80017d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f4:	4814      	ldr	r0, [pc, #80]	; (8001848 <MX_TIM1_Init+0xa0>)
 80017f6:	f004 f8f9 	bl	80059ec <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001800:	f7ff fdd0 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_TIM1_Init+0xa0>)
 8001812:	f004 fb09 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800181c:	f7ff fdc2 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_TIM1_Init+0xa0>)
 8001832:	f004 fd2f 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800183c:	f7ff fdb2 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000400 	.word	0x20000400
 800184c:	40010000 	.word	0x40010000

08001850 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_TIM2_Init+0x98>)
 8001870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <MX_TIM2_Init+0x98>)
 8001878:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800187c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_TIM2_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_TIM2_Init+0x98>)
 8001886:	f64e 2260 	movw	r2, #60000	; 0xea60
 800188a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_TIM2_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_TIM2_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001898:	4813      	ldr	r0, [pc, #76]	; (80018e8 <MX_TIM2_Init+0x98>)
 800189a:	f004 f8a7 	bl	80059ec <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80018a4:	f7ff fd7e 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <MX_TIM2_Init+0x98>)
 80018b6:	f004 fab7 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80018c0:	f7ff fd70 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_TIM2_Init+0x98>)
 80018d2:	f004 fcdf 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80018dc:	f7ff fd62 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000044c 	.word	0x2000044c

080018ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <MX_TIM3_Init+0x98>)
 800190c:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <MX_TIM3_Init+0x9c>)
 800190e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_TIM3_Init+0x98>)
 8001912:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001916:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_TIM3_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_TIM3_Init+0x98>)
 8001920:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001924:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_TIM3_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_TIM3_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001932:	4814      	ldr	r0, [pc, #80]	; (8001984 <MX_TIM3_Init+0x98>)
 8001934:	f004 f85a 	bl	80059ec <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800193e:	f7ff fd31 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4619      	mov	r1, r3
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_TIM3_Init+0x98>)
 8001950:	f004 fa6a 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800195a:	f7ff fd23 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <MX_TIM3_Init+0x98>)
 800196c:	f004 fc92 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001976:	f7ff fd15 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000498 	.word	0x20000498
 8001988:	40000400 	.word	0x40000400

0800198c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <HAL_TIM_Base_MspInit+0xd4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10c      	bne.n	80019c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019c6:	e046      	b.n	8001a56 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d0:	d10c      	bne.n	80019ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
}
 80019ea:	e034      	b.n	8001a56 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_TIM_Base_MspInit+0xdc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12f      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_TIM_Base_MspInit+0xd8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a26:	2310      	movs	r3, #16
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a36:	2302      	movs	r3, #2
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480a      	ldr	r0, [pc, #40]	; (8001a6c <HAL_TIM_Base_MspInit+0xe0>)
 8001a42:	f001 fb4f 	bl	80030e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	201d      	movs	r0, #29
 8001a4c:	f001 fb13 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a50:	201d      	movs	r0, #29
 8001a52:	f001 fb2c 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3730      	adds	r7, #48	; 0x30
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40020400 	.word	0x40020400

08001a70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <MX_USART1_UART_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001ab4:	f004 fc9a 	bl	80063ec <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001abe:	f7ff fc71 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200004e4 	.word	0x200004e4
 8001acc:	40011000 	.word	0x40011000

08001ad0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <MX_USART3_UART_Init+0x5c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_USART3_UART_Init+0x58>)
 8001b14:	f004 fc6a 	bl	80063ec <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b1e:	f7ff fc41 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000056c 	.word	0x2000056c
 8001b2c:	40004800 	.word	0x40004800

08001b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0b0      	sub	sp, #192	; 0xc0
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2290      	movs	r2, #144	; 0x90
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 fe42 	bl	80077da <memset>
  if(uartHandle->Instance==USART1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <HAL_UART_MspInit+0x138>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d13c      	bne.n	8001bda <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b64:	2300      	movs	r3, #0
 8001b66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 ff49 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b78:	f7ff fc14 	bl	80013a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6453      	str	r3, [r2, #68]	; 0x44
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4827      	ldr	r0, [pc, #156]	; (8001c70 <HAL_UART_MspInit+0x140>)
 8001bd4:	f001 fa86 	bl	80030e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bd8:	e041      	b.n	8001c5e <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART3)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <HAL_UART_MspInit+0x144>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d13c      	bne.n	8001c5e <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 ff06 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001bfe:	f7ff fbd1 	bl	80013a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_UART_MspInit+0x13c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|GPIO_PIN_9;
 8001c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c56:	4619      	mov	r1, r3
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <HAL_UART_MspInit+0x148>)
 8001c5a:	f001 fa43 	bl	80030e4 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	37c0      	adds	r7, #192	; 0xc0
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40004800 	.word	0x40004800
 8001c78:	40020c00 	.word	0x40020c00

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c82:	e003      	b.n	8001c8c <LoopCopyDataInit>

08001c84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c8a:	3104      	adds	r1, #4

08001c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c94:	d3f6      	bcc.n	8001c84 <CopyDataInit>
  ldr  r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c98:	e002      	b.n	8001ca0 <LoopFillZerobss>

08001c9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c9c:	f842 3b04 	str.w	r3, [r2], #4

08001ca0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ca2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ca4:	d3f9      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca6:	f7ff fd49 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f005 fdef 	bl	800788c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7fe ffff 	bl	8000cb0 <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001cb8:	08030058 	.word	0x08030058
  ldr  r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cc0:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8001cc4:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001cc8:	20000744 	.word	0x20000744

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>

08001cce <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001cce:	b590      	push	{r4, r7, lr}
 8001cd0:	b08b      	sub	sp, #44	; 0x2c
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	4608      	mov	r0, r1
 8001cd8:	4611      	mov	r1, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4623      	mov	r3, r4
 8001cde:	80fb      	strh	r3, [r7, #6]
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	80bb      	strh	r3, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	f1c3 0301 	rsb	r3, r3, #1
 8001cfc:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001d06:	e061      	b.n	8001dcc <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e018      	b.n	8001d44 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	b298      	uxth	r0, r3
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	883a      	ldrh	r2, [r7, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	f000 fdd6 	bl	80028d4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	88ba      	ldrh	r2, [r7, #4]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	883a      	ldrh	r2, [r7, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f000 fdcb 	bl	80028d4 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	3301      	adds	r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	4413      	add	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dde0      	ble.n	8001d12 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001d50:	88fa      	ldrh	r2, [r7, #6]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e018      	b.n	8001d8c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	88bb      	ldrh	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	883a      	ldrh	r2, [r7, #0]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f000 fdb2 	bl	80028d4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	b298      	uxth	r0, r3
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	88ba      	ldrh	r2, [r7, #4]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	883a      	ldrh	r2, [r7, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f000 fda7 	bl	80028d4 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	4413      	add	r3, r2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dde0      	ble.n	8001d5a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	4413      	add	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3302      	adds	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005a      	lsls	r2, r3, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	dd09      	ble.n	8001dcc <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	da99      	bge.n	8001d08 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	372c      	adds	r7, #44	; 0x2c
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
	...

08001de0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	4603      	mov	r3, r0
 8001df4:	71bb      	strb	r3, [r7, #6]
 8001df6:	460b      	mov	r3, r1
 8001df8:	717b      	strb	r3, [r7, #5]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b1f      	cmp	r3, #31
 8001e06:	d802      	bhi.n	8001e0e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	e002      	b.n	8001e14 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	3b20      	subs	r3, #32
 8001e12:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	753b      	strb	r3, [r7, #20]
 8001e18:	e012      	b.n	8001e40 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001e1a:	7dfa      	ldrb	r2, [r7, #23]
 8001e1c:	7d38      	ldrb	r0, [r7, #20]
 8001e1e:	7d39      	ldrb	r1, [r7, #20]
 8001e20:	4c3b      	ldr	r4, [pc, #236]	; (8001f10 <ILI9341_Draw_Char+0x130>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4423      	add	r3, r4
 8001e2c:	4403      	add	r3, r0
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	f101 0318 	add.w	r3, r1, #24
 8001e34:	443b      	add	r3, r7
 8001e36:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001e3a:	7d3b      	ldrb	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	753b      	strb	r3, [r7, #20]
 8001e40:	7d3b      	ldrb	r3, [r7, #20]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d9e9      	bls.n	8001e1a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	b298      	uxth	r0, r3
 8001e4a:	797b      	ldrb	r3, [r7, #5]
 8001e4c:	b299      	uxth	r1, r3
 8001e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e50:	461a      	mov	r2, r3
 8001e52:	0052      	lsls	r2, r2, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	b29c      	uxth	r4, r3
 8001e60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4623      	mov	r3, r4
 8001e66:	f000 fe0f 	bl	8002a88 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	757b      	strb	r3, [r7, #21]
 8001e6e:	e047      	b.n	8001f00 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001e70:	2300      	movs	r3, #0
 8001e72:	75bb      	strb	r3, [r7, #22]
 8001e74:	e03e      	b.n	8001ef4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001e76:	7d7b      	ldrb	r3, [r7, #21]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	443b      	add	r3, r7
 8001e7c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001e80:	461a      	mov	r2, r3
 8001e82:	7dbb      	ldrb	r3, [r7, #22]
 8001e84:	fa42 f303 	asr.w	r3, r2, r3
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d02e      	beq.n	8001eee <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d110      	bne.n	8001eb8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	7d7b      	ldrb	r3, [r7, #21]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b298      	uxth	r0, r3
 8001ea2:	797b      	ldrb	r3, [r7, #5]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	7dbb      	ldrb	r3, [r7, #22]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f000 fd0f 	bl	80028d4 <ILI9341_Draw_Pixel>
 8001eb6:	e01a      	b.n	8001eee <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	7d7b      	ldrb	r3, [r7, #21]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001ec2:	fb11 f303 	smulbb	r3, r1, r3
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	b298      	uxth	r0, r3
 8001ecc:	797b      	ldrb	r3, [r7, #5]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	7dbb      	ldrb	r3, [r7, #22]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001ed6:	fb11 f303 	smulbb	r3, r1, r3
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	b299      	uxth	r1, r3
 8001ee0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001ee2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4623      	mov	r3, r4
 8001eea:	f000 fdcd 	bl	8002a88 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001eee:	7dbb      	ldrb	r3, [r7, #22]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	75bb      	strb	r3, [r7, #22]
 8001ef4:	7dbb      	ldrb	r3, [r7, #22]
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d9bd      	bls.n	8001e76 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001efa:	7d7b      	ldrb	r3, [r7, #21]
 8001efc:	3301      	adds	r3, #1
 8001efe:	757b      	strb	r3, [r7, #21]
 8001f00:	7d7b      	ldrb	r3, [r7, #21]
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d9b4      	bls.n	8001e70 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	0802fa80 	.word	0x0802fa80

08001f14 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	70fb      	strb	r3, [r7, #3]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70bb      	strb	r3, [r7, #2]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001f2e:	e017      	b.n	8001f60 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	7818      	ldrb	r0, [r3, #0]
 8001f38:	883c      	ldrh	r4, [r7, #0]
 8001f3a:	78ba      	ldrb	r2, [r7, #2]
 8001f3c:	78f9      	ldrb	r1, [r7, #3]
 8001f3e:	8bbb      	ldrh	r3, [r7, #28]
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	8b3b      	ldrh	r3, [r7, #24]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	4623      	mov	r3, r4
 8001f48:	f7ff ff4a 	bl	8001de0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001f4c:	8b3b      	ldrh	r3, [r7, #24]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	0052      	lsls	r2, r2, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e3      	bne.n	8001f30 <ILI9341_Draw_Text+0x1c>
    }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
	...

08001f74 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f80:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001f84:	6018      	str	r0, [r3, #0]
 8001f86:	460a      	mov	r2, r1
 8001f88:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f8c:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001f90:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8001f92:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f96:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d15e      	bne.n	800205e <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f000 fa67 	bl	8002474 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001fa6:	23f0      	movs	r3, #240	; 0xf0
 8001fa8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fac:	2100      	movs	r1, #0
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f9f6 	bl	80023a0 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fba:	48c4      	ldr	r0, [pc, #784]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8001fbc:	f001 fa56 	bl	800346c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc6:	48c1      	ldr	r0, [pc, #772]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8001fc8:	f001 fa50 	bl	800346c <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001fd8:	e035      	b.n	8002046 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001fe0:	e019      	b.n	8002016 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001fe2:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001fe6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001fea:	4413      	add	r3, r2
 8001fec:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001ff0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	7819      	ldrb	r1, [r3, #0]
 8001ffa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ffe:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002002:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002006:	4413      	add	r3, r2
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800200c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002010:	3301      	adds	r3, #1
 8002012:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002016:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800201a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800201e:	d3e0      	bcc.n	8001fe2 <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002020:	f107 010c 	add.w	r1, r7, #12
 8002024:	230a      	movs	r3, #10
 8002026:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800202a:	48a9      	ldr	r0, [pc, #676]	; (80022d0 <ILI9341_Draw_Image+0x35c>)
 800202c:	f003 f9e7 	bl	80053fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002030:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002034:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002038:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800203c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002040:	3301      	adds	r3, #1
 8002042:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002046:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800204a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800204e:	d9c4      	bls.n	8001fda <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002056:	489d      	ldr	r0, [pc, #628]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8002058:	f001 fa08 	bl	800346c <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 800205c:	e130      	b.n	80022c0 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 800205e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002062:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d15e      	bne.n	800212a <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 fa01 	bl	8002474 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002072:	23f0      	movs	r3, #240	; 0xf0
 8002074:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002078:	2100      	movs	r1, #0
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f990 	bl	80023a0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002086:	4891      	ldr	r0, [pc, #580]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8002088:	f001 f9f0 	bl	800346c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	488e      	ldr	r0, [pc, #568]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8002094:	f001 f9ea 	bl	800346c <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80020a4:	e035      	b.n	8002112 <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80020ac:	e019      	b.n	80020e2 <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80020ae:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80020b2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020b6:	4413      	add	r3, r2
 80020b8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80020bc:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	7819      	ldrb	r1, [r3, #0]
 80020c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80020ca:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80020ce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020d2:	4413      	add	r3, r2
 80020d4:	460a      	mov	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80020d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020dc:	3301      	adds	r3, #1
 80020de:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80020e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020ea:	d3e0      	bcc.n	80020ae <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80020ec:	f107 010c 	add.w	r1, r7, #12
 80020f0:	230a      	movs	r3, #10
 80020f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020f6:	4876      	ldr	r0, [pc, #472]	; (80022d0 <ILI9341_Draw_Image+0x35c>)
 80020f8:	f003 f981 	bl	80053fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80020fc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002100:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002104:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002108:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800210c:	3301      	adds	r3, #1
 800210e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002112:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002116:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800211a:	d9c4      	bls.n	80020a6 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800211c:	2201      	movs	r2, #1
 800211e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002122:	486a      	ldr	r0, [pc, #424]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8002124:	f001 f9a2 	bl	800346c <HAL_GPIO_WritePin>
}
 8002128:	e0ca      	b.n	80022c0 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 800212a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800212e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d15e      	bne.n	80021f6 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8002138:	2002      	movs	r0, #2
 800213a:	f000 f99b 	bl	8002474 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 800213e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002142:	22f0      	movs	r2, #240	; 0xf0
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f000 f92a 	bl	80023a0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800214c:	2201      	movs	r2, #1
 800214e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002152:	485e      	ldr	r0, [pc, #376]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8002154:	f001 f98a 	bl	800346c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800215e:	485b      	ldr	r0, [pc, #364]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8002160:	f001 f984 	bl	800346c <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002170:	e035      	b.n	80021de <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002178:	e019      	b.n	80021ae <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800217a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800217e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002182:	4413      	add	r3, r2
 8002184:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002188:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	4413      	add	r3, r2
 8002190:	7819      	ldrb	r1, [r3, #0]
 8002192:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002196:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800219a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800219e:	4413      	add	r3, r2
 80021a0:	460a      	mov	r2, r1
 80021a2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80021a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80021a8:	3301      	adds	r3, #1
 80021aa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80021ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80021b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021b6:	d3e0      	bcc.n	800217a <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80021b8:	f107 010c 	add.w	r1, r7, #12
 80021bc:	230a      	movs	r3, #10
 80021be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021c2:	4843      	ldr	r0, [pc, #268]	; (80022d0 <ILI9341_Draw_Image+0x35c>)
 80021c4:	f003 f91b 	bl	80053fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80021c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80021cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80021d0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80021d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80021d8:	3301      	adds	r3, #1
 80021da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80021de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80021e2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80021e6:	d9c4      	bls.n	8002172 <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ee:	4837      	ldr	r0, [pc, #220]	; (80022cc <ILI9341_Draw_Image+0x358>)
 80021f0:	f001 f93c 	bl	800346c <HAL_GPIO_WritePin>
}
 80021f4:	e064      	b.n	80022c0 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 80021f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80021fa:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d15d      	bne.n	80022c0 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002204:	2000      	movs	r0, #0
 8002206:	f000 f935 	bl	8002474 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 800220a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800220e:	22f0      	movs	r2, #240	; 0xf0
 8002210:	2100      	movs	r1, #0
 8002212:	2000      	movs	r0, #0
 8002214:	f000 f8c4 	bl	80023a0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002218:	2201      	movs	r2, #1
 800221a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800221e:	482b      	ldr	r0, [pc, #172]	; (80022cc <ILI9341_Draw_Image+0x358>)
 8002220:	f001 f924 	bl	800346c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222a:	4828      	ldr	r0, [pc, #160]	; (80022cc <ILI9341_Draw_Image+0x358>)
 800222c:	f001 f91e 	bl	800346c <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800223c:	e035      	b.n	80022aa <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002244:	e019      	b.n	800227a <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002246:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800224a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800224e:	4413      	add	r3, r2
 8002250:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002254:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	4413      	add	r3, r2
 800225c:	7819      	ldrb	r1, [r3, #0]
 800225e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002262:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002266:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800226a:	4413      	add	r3, r2
 800226c:	460a      	mov	r2, r1
 800226e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002270:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002274:	3301      	adds	r3, #1
 8002276:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800227a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800227e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002282:	d3e0      	bcc.n	8002246 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002284:	f107 010c 	add.w	r1, r7, #12
 8002288:	230a      	movs	r3, #10
 800228a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <ILI9341_Draw_Image+0x35c>)
 8002290:	f003 f8b5 	bl	80053fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002294:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002298:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800229c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80022a0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80022aa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022ae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80022b2:	d9c4      	bls.n	800223e <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ba:	4804      	ldr	r0, [pc, #16]	; (80022cc <ILI9341_Draw_Image+0x358>)
 80022bc:	f001 f8d6 	bl	800346c <HAL_GPIO_WritePin>
}
 80022c0:	bf00      	nop
 80022c2:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40020800 	.word	0x40020800
 80022d0:	20000398 	.word	0x20000398

080022d4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80022d8:	f7ff f8b0 	bl	800143c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80022dc:	f7fe fa34 	bl	8000748 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e6:	4802      	ldr	r0, [pc, #8]	; (80022f0 <ILI9341_SPI_Init+0x1c>)
 80022e8:	f001 f8c0 	bl	800346c <HAL_GPIO_WritePin>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40020800 	.word	0x40020800

080022f4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80022fe:	1df9      	adds	r1, r7, #7
 8002300:	2301      	movs	r3, #1
 8002302:	2201      	movs	r2, #1
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <ILI9341_SPI_Send+0x20>)
 8002306:	f003 f87a 	bl	80053fe <HAL_SPI_Transmit>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000398 	.word	0x20000398

08002318 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002328:	480b      	ldr	r0, [pc, #44]	; (8002358 <ILI9341_Write_Command+0x40>)
 800232a:	f001 f89f 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <ILI9341_Write_Command+0x40>)
 8002336:	f001 f899 	bl	800346c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ffd9 	bl	80022f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002342:	2201      	movs	r2, #1
 8002344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <ILI9341_Write_Command+0x40>)
 800234a:	f001 f88f 	bl	800346c <HAL_GPIO_WritePin>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40020800 	.word	0x40020800

0800235c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236c:	480b      	ldr	r0, [pc, #44]	; (800239c <ILI9341_Write_Data+0x40>)
 800236e:	f001 f87d 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002378:	4808      	ldr	r0, [pc, #32]	; (800239c <ILI9341_Write_Data+0x40>)
 800237a:	f001 f877 	bl	800346c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ffb7 	bl	80022f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <ILI9341_Write_Data+0x40>)
 800238e:	f001 f86d 	bl	800346c <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40020800 	.word	0x40020800

080023a0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4604      	mov	r4, r0
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4623      	mov	r3, r4
 80023b0:	80fb      	strh	r3, [r7, #6]
 80023b2:	4603      	mov	r3, r0
 80023b4:	80bb      	strh	r3, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]
 80023ba:	4613      	mov	r3, r2
 80023bc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80023be:	202a      	movs	r0, #42	; 0x2a
 80023c0:	f7ff ffaa 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ffc5 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ffc0 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ffb9 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ffb4 	bl	800235c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80023f4:	202b      	movs	r0, #43	; 0x2b
 80023f6:	f7ff ff8f 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80023fa:	88bb      	ldrh	r3, [r7, #4]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ffaa 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002408:	88bb      	ldrh	r3, [r7, #4]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ffa5 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002412:	883b      	ldrh	r3, [r7, #0]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff9e 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002420:	883b      	ldrh	r3, [r7, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff99 	bl	800235c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800242a:	202c      	movs	r0, #44	; 0x2c
 800242c:	f7ff ff74 	bl	8002318 <ILI9341_Write_Command>
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}

08002438 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800243c:	2201      	movs	r2, #1
 800243e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002442:	480b      	ldr	r0, [pc, #44]	; (8002470 <ILI9341_Reset+0x38>)
 8002444:	f001 f812 	bl	800346c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002448:	20c8      	movs	r0, #200	; 0xc8
 800244a:	f000 fd15 	bl	8002e78 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002454:	4806      	ldr	r0, [pc, #24]	; (8002470 <ILI9341_Reset+0x38>)
 8002456:	f001 f809 	bl	800346c <HAL_GPIO_WritePin>
HAL_Delay(200);
 800245a:	20c8      	movs	r0, #200	; 0xc8
 800245c:	f000 fd0c 	bl	8002e78 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002466:	4802      	ldr	r0, [pc, #8]	; (8002470 <ILI9341_Reset+0x38>)
 8002468:	f001 f800 	bl	800346c <HAL_GPIO_WritePin>
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40020800 	.word	0x40020800

08002474 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002482:	2036      	movs	r0, #54	; 0x36
 8002484:	f7ff ff48 	bl	8002318 <ILI9341_Write_Command>
HAL_Delay(1);
 8002488:	2001      	movs	r0, #1
 800248a:	f000 fcf5 	bl	8002e78 <HAL_Delay>
	
switch(screen_rotation) 
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d837      	bhi.n	8002504 <ILI9341_Set_Rotation+0x90>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <ILI9341_Set_Rotation+0x28>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024c3 	.word	0x080024c3
 80024a4:	080024d9 	.word	0x080024d9
 80024a8:	080024ef 	.word	0x080024ef
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80024ac:	2048      	movs	r0, #72	; 0x48
 80024ae:	f7ff ff55 	bl	800235c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024b4:	22f0      	movs	r2, #240	; 0xf0
 80024b6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024be:	801a      	strh	r2, [r3, #0]
			break;
 80024c0:	e021      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80024c2:	2028      	movs	r0, #40	; 0x28
 80024c4:	f7ff ff4a 	bl	800235c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024d2:	22f0      	movs	r2, #240	; 0xf0
 80024d4:	801a      	strh	r2, [r3, #0]
			break;
 80024d6:	e016      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80024d8:	2088      	movs	r0, #136	; 0x88
 80024da:	f7ff ff3f 	bl	800235c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024e0:	22f0      	movs	r2, #240	; 0xf0
 80024e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024ea:	801a      	strh	r2, [r3, #0]
			break;
 80024ec:	e00b      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80024ee:	20e8      	movs	r0, #232	; 0xe8
 80024f0:	f7ff ff34 	bl	800235c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024fe:	22f0      	movs	r2, #240	; 0xf0
 8002500:	801a      	strh	r2, [r3, #0]
			break;
 8002502:	e000      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002504:	bf00      	nop
	}
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000006 	.word	0x20000006
 8002514:	20000004 	.word	0x20000004

08002518 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800251c:	2201      	movs	r2, #1
 800251e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002522:	4802      	ldr	r0, [pc, #8]	; (800252c <ILI9341_Enable+0x14>)
 8002524:	f000 ffa2 	bl	800346c <HAL_GPIO_WritePin>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40020800 	.word	0x40020800

08002530 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002534:	f7ff fff0 	bl	8002518 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002538:	f7ff fecc 	bl	80022d4 <ILI9341_SPI_Init>
ILI9341_Reset();
 800253c:	f7ff ff7c 	bl	8002438 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002540:	2001      	movs	r0, #1
 8002542:	f7ff fee9 	bl	8002318 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800254a:	f000 fc95 	bl	8002e78 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800254e:	20cb      	movs	r0, #203	; 0xcb
 8002550:	f7ff fee2 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002554:	2039      	movs	r0, #57	; 0x39
 8002556:	f7ff ff01 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800255a:	202c      	movs	r0, #44	; 0x2c
 800255c:	f7ff fefe 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002560:	2000      	movs	r0, #0
 8002562:	f7ff fefb 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002566:	2034      	movs	r0, #52	; 0x34
 8002568:	f7ff fef8 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800256c:	2002      	movs	r0, #2
 800256e:	f7ff fef5 	bl	800235c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002572:	20cf      	movs	r0, #207	; 0xcf
 8002574:	f7ff fed0 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff feef 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800257e:	20c1      	movs	r0, #193	; 0xc1
 8002580:	f7ff feec 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002584:	2030      	movs	r0, #48	; 0x30
 8002586:	f7ff fee9 	bl	800235c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800258a:	20e8      	movs	r0, #232	; 0xe8
 800258c:	f7ff fec4 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002590:	2085      	movs	r0, #133	; 0x85
 8002592:	f7ff fee3 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff fee0 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800259c:	2078      	movs	r0, #120	; 0x78
 800259e:	f7ff fedd 	bl	800235c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80025a2:	20ea      	movs	r0, #234	; 0xea
 80025a4:	f7ff feb8 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff fed7 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff fed4 	bl	800235c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80025b4:	20ed      	movs	r0, #237	; 0xed
 80025b6:	f7ff feaf 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80025ba:	2064      	movs	r0, #100	; 0x64
 80025bc:	f7ff fece 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f7ff fecb 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80025c6:	2012      	movs	r0, #18
 80025c8:	f7ff fec8 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80025cc:	2081      	movs	r0, #129	; 0x81
 80025ce:	f7ff fec5 	bl	800235c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80025d2:	20f7      	movs	r0, #247	; 0xf7
 80025d4:	f7ff fea0 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80025d8:	2020      	movs	r0, #32
 80025da:	f7ff febf 	bl	800235c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80025de:	20c0      	movs	r0, #192	; 0xc0
 80025e0:	f7ff fe9a 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80025e4:	2023      	movs	r0, #35	; 0x23
 80025e6:	f7ff feb9 	bl	800235c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80025ea:	20c1      	movs	r0, #193	; 0xc1
 80025ec:	f7ff fe94 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80025f0:	2010      	movs	r0, #16
 80025f2:	f7ff feb3 	bl	800235c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80025f6:	20c5      	movs	r0, #197	; 0xc5
 80025f8:	f7ff fe8e 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80025fc:	203e      	movs	r0, #62	; 0x3e
 80025fe:	f7ff fead 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002602:	2028      	movs	r0, #40	; 0x28
 8002604:	f7ff feaa 	bl	800235c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002608:	20c7      	movs	r0, #199	; 0xc7
 800260a:	f7ff fe85 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800260e:	2086      	movs	r0, #134	; 0x86
 8002610:	f7ff fea4 	bl	800235c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002614:	2036      	movs	r0, #54	; 0x36
 8002616:	f7ff fe7f 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800261a:	2048      	movs	r0, #72	; 0x48
 800261c:	f7ff fe9e 	bl	800235c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002620:	203a      	movs	r0, #58	; 0x3a
 8002622:	f7ff fe79 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002626:	2055      	movs	r0, #85	; 0x55
 8002628:	f7ff fe98 	bl	800235c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800262c:	20b1      	movs	r0, #177	; 0xb1
 800262e:	f7ff fe73 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7ff fe92 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002638:	2018      	movs	r0, #24
 800263a:	f7ff fe8f 	bl	800235c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800263e:	20b6      	movs	r0, #182	; 0xb6
 8002640:	f7ff fe6a 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002644:	2008      	movs	r0, #8
 8002646:	f7ff fe89 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800264a:	2082      	movs	r0, #130	; 0x82
 800264c:	f7ff fe86 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002650:	2027      	movs	r0, #39	; 0x27
 8002652:	f7ff fe83 	bl	800235c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002656:	20f2      	movs	r0, #242	; 0xf2
 8002658:	f7ff fe5e 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fe7d 	bl	800235c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002662:	2026      	movs	r0, #38	; 0x26
 8002664:	f7ff fe58 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff fe77 	bl	800235c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800266e:	20e0      	movs	r0, #224	; 0xe0
 8002670:	f7ff fe52 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002674:	200f      	movs	r0, #15
 8002676:	f7ff fe71 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800267a:	2031      	movs	r0, #49	; 0x31
 800267c:	f7ff fe6e 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002680:	202b      	movs	r0, #43	; 0x2b
 8002682:	f7ff fe6b 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002686:	200c      	movs	r0, #12
 8002688:	f7ff fe68 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff fe65 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002692:	2008      	movs	r0, #8
 8002694:	f7ff fe62 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002698:	204e      	movs	r0, #78	; 0x4e
 800269a:	f7ff fe5f 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800269e:	20f1      	movs	r0, #241	; 0xf1
 80026a0:	f7ff fe5c 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80026a4:	2037      	movs	r0, #55	; 0x37
 80026a6:	f7ff fe59 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80026aa:	2007      	movs	r0, #7
 80026ac:	f7ff fe56 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80026b0:	2010      	movs	r0, #16
 80026b2:	f7ff fe53 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80026b6:	2003      	movs	r0, #3
 80026b8:	f7ff fe50 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80026bc:	200e      	movs	r0, #14
 80026be:	f7ff fe4d 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80026c2:	2009      	movs	r0, #9
 80026c4:	f7ff fe4a 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff fe47 	bl	800235c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80026ce:	20e1      	movs	r0, #225	; 0xe1
 80026d0:	f7ff fe22 	bl	8002318 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7ff fe41 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80026da:	200e      	movs	r0, #14
 80026dc:	f7ff fe3e 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80026e0:	2014      	movs	r0, #20
 80026e2:	f7ff fe3b 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80026e6:	2003      	movs	r0, #3
 80026e8:	f7ff fe38 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80026ec:	2011      	movs	r0, #17
 80026ee:	f7ff fe35 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80026f2:	2007      	movs	r0, #7
 80026f4:	f7ff fe32 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80026f8:	2031      	movs	r0, #49	; 0x31
 80026fa:	f7ff fe2f 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80026fe:	20c1      	movs	r0, #193	; 0xc1
 8002700:	f7ff fe2c 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002704:	2048      	movs	r0, #72	; 0x48
 8002706:	f7ff fe29 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800270a:	2008      	movs	r0, #8
 800270c:	f7ff fe26 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002710:	200f      	movs	r0, #15
 8002712:	f7ff fe23 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002716:	200c      	movs	r0, #12
 8002718:	f7ff fe20 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800271c:	2031      	movs	r0, #49	; 0x31
 800271e:	f7ff fe1d 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002722:	2036      	movs	r0, #54	; 0x36
 8002724:	f7ff fe1a 	bl	800235c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002728:	200f      	movs	r0, #15
 800272a:	f7ff fe17 	bl	800235c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800272e:	2011      	movs	r0, #17
 8002730:	f7ff fdf2 	bl	8002318 <ILI9341_Write_Command>
HAL_Delay(120);
 8002734:	2078      	movs	r0, #120	; 0x78
 8002736:	f000 fb9f 	bl	8002e78 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800273a:	2029      	movs	r0, #41	; 0x29
 800273c:	f7ff fdec 	bl	8002318 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002740:	2000      	movs	r0, #0
 8002742:	f7ff fe97 	bl	8002474 <ILI9341_Set_Rotation>
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800274c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002750:	b08d      	sub	sp, #52	; 0x34
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	6039      	str	r1, [r7, #0]
 8002758:	80fb      	strh	r3, [r7, #6]
 800275a:	466b      	mov	r3, sp
 800275c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800276a:	d202      	bcs.n	8002772 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002770:	e002      	b.n	8002778 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002772:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002778:	2201      	movs	r2, #1
 800277a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800277e:	4840      	ldr	r0, [pc, #256]	; (8002880 <ILI9341_Draw_Colour_Burst+0x134>)
 8002780:	f000 fe74 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800278a:	483d      	ldr	r0, [pc, #244]	; (8002880 <ILI9341_Draw_Colour_Burst+0x134>)
 800278c:	f000 fe6e 	bl	800346c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	b29b      	uxth	r3, r3
 8002796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800279a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800279c:	460b      	mov	r3, r1
 800279e:	3b01      	subs	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	2300      	movs	r3, #0
 80027a4:	4688      	mov	r8, r1
 80027a6:	4699      	mov	r9, r3
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027bc:	2300      	movs	r3, #0
 80027be:	460c      	mov	r4, r1
 80027c0:	461d      	mov	r5, r3
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	00eb      	lsls	r3, r5, #3
 80027cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d0:	00e2      	lsls	r2, r4, #3
 80027d2:	1dcb      	adds	r3, r1, #7
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	ebad 0d03 	sub.w	sp, sp, r3
 80027dc:	466b      	mov	r3, sp
 80027de:	3300      	adds	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80027e2:	2300      	movs	r3, #0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e6:	e00e      	b.n	8002806 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	4413      	add	r3, r2
 80027ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027f2:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	3301      	adds	r3, #1
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	b2d1      	uxtb	r1, r2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	3302      	adds	r3, #2
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
 8002806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	429a      	cmp	r2, r3
 800280c:	d3ec      	bcc.n	80027e8 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	fbb3 f2f2 	udiv	r2, r3, r2
 8002826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002828:	fb01 f202 	mul.w	r2, r1, r2
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d010      	beq.n	8002858 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	e009      	b.n	8002850 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	b29a      	uxth	r2, r3
 8002840:	230a      	movs	r3, #10
 8002842:	69b9      	ldr	r1, [r7, #24]
 8002844:	480f      	ldr	r0, [pc, #60]	; (8002884 <ILI9341_Draw_Colour_Burst+0x138>)
 8002846:	f002 fdda 	bl	80053fe <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3301      	adds	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3f1      	bcc.n	800283c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	b29a      	uxth	r2, r3
 800285c:	230a      	movs	r3, #10
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	4808      	ldr	r0, [pc, #32]	; (8002884 <ILI9341_Draw_Colour_Burst+0x138>)
 8002862:	f002 fdcc 	bl	80053fe <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002866:	2201      	movs	r2, #1
 8002868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <ILI9341_Draw_Colour_Burst+0x134>)
 800286e:	f000 fdfd 	bl	800346c <HAL_GPIO_WritePin>
 8002872:	46b5      	mov	sp, r6
}
 8002874:	bf00      	nop
 8002876:	3734      	adds	r7, #52	; 0x34
 8002878:	46bd      	mov	sp, r7
 800287a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800287e:	bf00      	nop
 8002880:	40020800 	.word	0x40020800
 8002884:	20000398 	.word	0x20000398

08002888 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <ILI9341_Fill_Screen+0x44>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29a      	uxth	r2, r3
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <ILI9341_Fill_Screen+0x48>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff fd7d 	bl	80023a0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <ILI9341_Fill_Screen+0x44>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <ILI9341_Fill_Screen+0x48>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff44 	bl	800274c <ILI9341_Draw_Colour_Burst>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000006 	.word	0x20000006
 80028d0:	20000004 	.word	0x20000004

080028d4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
 80028de:	460b      	mov	r3, r1
 80028e0:	80bb      	strh	r3, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80028e6:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <ILI9341_Draw_Pixel+0x1a4>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	f080 80be 	bcs.w	8002a70 <ILI9341_Draw_Pixel+0x19c>
 80028f4:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <ILI9341_Draw_Pixel+0x1a8>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	88ba      	ldrh	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	f080 80b7 	bcs.w	8002a70 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002908:	485d      	ldr	r0, [pc, #372]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 800290a:	f000 fdaf 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002914:	485a      	ldr	r0, [pc, #360]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002916:	f000 fda9 	bl	800346c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800291a:	202a      	movs	r0, #42	; 0x2a
 800291c:	f7ff fcea 	bl	80022f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002926:	4856      	ldr	r0, [pc, #344]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002928:	f000 fda0 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002932:	4853      	ldr	r0, [pc, #332]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002934:	f000 fd9a 	bl	800346c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002938:	2200      	movs	r2, #0
 800293a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800293e:	4850      	ldr	r0, [pc, #320]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002940:	f000 fd94 	bl	800346c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	753b      	strb	r3, [r7, #20]
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	757b      	strb	r3, [r7, #21]
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	3301      	adds	r3, #1
 8002958:	121b      	asrs	r3, r3, #8
 800295a:	b2db      	uxtb	r3, r3
 800295c:	75bb      	strb	r3, [r7, #22]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3301      	adds	r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002968:	f107 0114 	add.w	r1, r7, #20
 800296c:	2301      	movs	r3, #1
 800296e:	2204      	movs	r2, #4
 8002970:	4844      	ldr	r0, [pc, #272]	; (8002a84 <ILI9341_Draw_Pixel+0x1b0>)
 8002972:	f002 fd44 	bl	80053fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800297c:	4840      	ldr	r0, [pc, #256]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 800297e:	f000 fd75 	bl	800346c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002982:	2200      	movs	r2, #0
 8002984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002988:	483d      	ldr	r0, [pc, #244]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 800298a:	f000 fd6f 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002994:	483a      	ldr	r0, [pc, #232]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002996:	f000 fd69 	bl	800346c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800299a:	202b      	movs	r0, #43	; 0x2b
 800299c:	f7ff fcaa 	bl	80022f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80029a0:	2201      	movs	r2, #1
 80029a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029a6:	4836      	ldr	r0, [pc, #216]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 80029a8:	f000 fd60 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80029ac:	2201      	movs	r2, #1
 80029ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b2:	4833      	ldr	r0, [pc, #204]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 80029b4:	f000 fd5a 	bl	800346c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029b8:	2200      	movs	r2, #0
 80029ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029be:	4830      	ldr	r0, [pc, #192]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 80029c0:	f000 fd54 	bl	800346c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80029c4:	88bb      	ldrh	r3, [r7, #4]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	743b      	strb	r3, [r7, #16]
 80029ce:	88bb      	ldrh	r3, [r7, #4]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	747b      	strb	r3, [r7, #17]
 80029d4:	88bb      	ldrh	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	121b      	asrs	r3, r3, #8
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	74bb      	strb	r3, [r7, #18]
 80029de:	88bb      	ldrh	r3, [r7, #4]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80029e8:	f107 0110 	add.w	r1, r7, #16
 80029ec:	2301      	movs	r3, #1
 80029ee:	2204      	movs	r2, #4
 80029f0:	4824      	ldr	r0, [pc, #144]	; (8002a84 <ILI9341_Draw_Pixel+0x1b0>)
 80029f2:	f002 fd04 	bl	80053fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029fc:	4820      	ldr	r0, [pc, #128]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 80029fe:	f000 fd35 	bl	800346c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a02:	2200      	movs	r2, #0
 8002a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a08:	481d      	ldr	r0, [pc, #116]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002a0a:	f000 fd2f 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a14:	481a      	ldr	r0, [pc, #104]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002a16:	f000 fd29 	bl	800346c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002a1a:	202c      	movs	r0, #44	; 0x2c
 8002a1c:	f7ff fc6a 	bl	80022f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002a20:	2201      	movs	r2, #1
 8002a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a26:	4816      	ldr	r0, [pc, #88]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002a28:	f000 fd20 	bl	800346c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a32:	4813      	ldr	r0, [pc, #76]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002a34:	f000 fd1a 	bl	800346c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a3e:	4810      	ldr	r0, [pc, #64]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002a40:	f000 fd14 	bl	800346c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	733b      	strb	r3, [r7, #12]
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002a54:	f107 010c 	add.w	r1, r7, #12
 8002a58:	2301      	movs	r3, #1
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4809      	ldr	r0, [pc, #36]	; (8002a84 <ILI9341_Draw_Pixel+0x1b0>)
 8002a5e:	f002 fcce 	bl	80053fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a62:	2201      	movs	r2, #1
 8002a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <ILI9341_Draw_Pixel+0x1ac>)
 8002a6a:	f000 fcff 	bl	800346c <HAL_GPIO_WritePin>
 8002a6e:	e000      	b.n	8002a72 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002a70:	bf00      	nop
	
}
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000006 	.word	0x20000006
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	40020800 	.word	0x40020800
 8002a84:	20000398 	.word	0x20000398

08002a88 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	80fb      	strh	r3, [r7, #6]
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80bb      	strh	r3, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	807b      	strh	r3, [r7, #2]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <ILI9341_Draw_Rectangle+0xb0>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d23d      	bcs.n	8002b2e <ILI9341_Draw_Rectangle+0xa6>
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <ILI9341_Draw_Rectangle+0xb4>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	88ba      	ldrh	r2, [r7, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d237      	bcs.n	8002b2e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <ILI9341_Draw_Rectangle+0xb0>)
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	4293      	cmp	r3, r2
 8002acc:	dd05      	ble.n	8002ada <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <ILI9341_Draw_Rectangle+0xb0>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002ada:	88ba      	ldrh	r2, [r7, #4]
 8002adc:	883b      	ldrh	r3, [r7, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <ILI9341_Draw_Rectangle+0xb4>)
 8002ae2:	8812      	ldrh	r2, [r2, #0]
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	dd05      	ble.n	8002af6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <ILI9341_Draw_Rectangle+0xb4>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	88bb      	ldrh	r3, [r7, #4]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	4413      	add	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29c      	uxth	r4, r3
 8002b02:	88ba      	ldrh	r2, [r7, #4]
 8002b04:	883b      	ldrh	r3, [r7, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	88b9      	ldrh	r1, [r7, #4]
 8002b10:	88f8      	ldrh	r0, [r7, #6]
 8002b12:	4622      	mov	r2, r4
 8002b14:	f7ff fc44 	bl	80023a0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002b18:	883b      	ldrh	r3, [r7, #0]
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	8b3b      	ldrh	r3, [r7, #24]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fe10 	bl	800274c <ILI9341_Draw_Colour_Burst>
 8002b2c:	e000      	b.n	8002b30 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002b2e:	bf00      	nop
}
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000006 	.word	0x20000006
 8002b3c:	20000004 	.word	0x20000004

08002b40 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002b46:	2310      	movs	r3, #16
 8002b48:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002b4e:	e019      	b.n	8002b84 <TP_Read+0x44>
    {
        value <<= 1;
 8002b50:	88bb      	ldrh	r3, [r7, #4]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002b56:	2201      	movs	r2, #1
 8002b58:	2108      	movs	r1, #8
 8002b5a:	480e      	ldr	r0, [pc, #56]	; (8002b94 <TP_Read+0x54>)
 8002b5c:	f000 fc86 	bl	800346c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2108      	movs	r1, #8
 8002b64:	480b      	ldr	r0, [pc, #44]	; (8002b94 <TP_Read+0x54>)
 8002b66:	f000 fc81 	bl	800346c <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002b6a:	2110      	movs	r1, #16
 8002b6c:	4809      	ldr	r0, [pc, #36]	; (8002b94 <TP_Read+0x54>)
 8002b6e:	f000 fc65 	bl	800343c <HAL_GPIO_ReadPin>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <TP_Read+0x3e>
        {
            value++;
 8002b78:	88bb      	ldrh	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e2      	bne.n	8002b50 <TP_Read+0x10>
    };

    return value;
 8002b8a:	88bb      	ldrh	r3, [r7, #4]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000

08002b98 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2108      	movs	r1, #8
 8002baa:	4815      	ldr	r0, [pc, #84]	; (8002c00 <TP_Write+0x68>)
 8002bac:	f000 fc5e 	bl	800346c <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002bb0:	e01e      	b.n	8002bf0 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da05      	bge.n	8002bc6 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2120      	movs	r1, #32
 8002bbe:	4810      	ldr	r0, [pc, #64]	; (8002c00 <TP_Write+0x68>)
 8002bc0:	f000 fc54 	bl	800346c <HAL_GPIO_WritePin>
 8002bc4:	e004      	b.n	8002bd0 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2120      	movs	r1, #32
 8002bca:	480d      	ldr	r0, [pc, #52]	; (8002c00 <TP_Write+0x68>)
 8002bcc:	f000 fc4e 	bl	800346c <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2108      	movs	r1, #8
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <TP_Write+0x68>)
 8002bdc:	f000 fc46 	bl	800346c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002be0:	2200      	movs	r2, #0
 8002be2:	2108      	movs	r1, #8
 8002be4:	4806      	ldr	r0, [pc, #24]	; (8002c00 <TP_Write+0x68>)
 8002be6:	f000 fc41 	bl	800346c <HAL_GPIO_WritePin>
        i--;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1dd      	bne.n	8002bb2 <TP_Write+0x1a>
    };
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	00000000 	.word	0x00000000

08002c08 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002c10:	2201      	movs	r2, #1
 8002c12:	2108      	movs	r1, #8
 8002c14:	485a      	ldr	r0, [pc, #360]	; (8002d80 <TP_Read_Coordinates+0x178>)
 8002c16:	f000 fc29 	bl	800346c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	4858      	ldr	r0, [pc, #352]	; (8002d80 <TP_Read_Coordinates+0x178>)
 8002c20:	f000 fc24 	bl	800346c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002c24:	2201      	movs	r2, #1
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	4855      	ldr	r0, [pc, #340]	; (8002d80 <TP_Read_Coordinates+0x178>)
 8002c2a:	f000 fc1f 	bl	800346c <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002c32:	2300      	movs	r3, #0
 8002c34:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	484d      	ldr	r0, [pc, #308]	; (8002d80 <TP_Read_Coordinates+0x178>)
 8002c4a:	f000 fc0f 	bl	800346c <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002c4e:	e023      	b.n	8002c98 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002c50:	2090      	movs	r0, #144	; 0x90
 8002c52:	f7ff ffa1 	bl	8002b98 <TP_Write>

				rawy = TP_Read();	
 8002c56:	f7ff ff73 	bl	8002b40 <TP_Read>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
 8002c60:	6a3a      	ldr	r2, [r7, #32]
 8002c62:	4413      	add	r3, r2
 8002c64:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002c6e:	20d0      	movs	r0, #208	; 0xd0
 8002c70:	f7ff ff92 	bl	8002b98 <TP_Write>
        rawx = TP_Read();
 8002c74:	f7ff ff64 	bl	8002b40 <TP_Read>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002c7c:	89bb      	ldrh	r3, [r7, #12]
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c80:	4413      	add	r3, r2
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8002c84:	89bb      	ldrh	r3, [r7, #12]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]
        samples--;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	3301      	adds	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <TP_Read_Coordinates+0xa4>
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	4837      	ldr	r0, [pc, #220]	; (8002d80 <TP_Read_Coordinates+0x178>)
 8002ca2:	f000 fbcb 	bl	800343c <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0d1      	beq.n	8002c50 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002cac:	2201      	movs	r2, #1
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	4833      	ldr	r0, [pc, #204]	; (8002d80 <TP_Read_Coordinates+0x178>)
 8002cb2:	f000 fbdb 	bl	800346c <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cbc:	d14d      	bne.n	8002d5a <TP_Read_Coordinates+0x152>
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	482f      	ldr	r0, [pc, #188]	; (8002d80 <TP_Read_Coordinates+0x178>)
 8002cc2:	f000 fbbb 	bl	800343c <HAL_GPIO_ReadPin>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d146      	bne.n	8002d5a <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002ce8:	89bb      	ldrh	r3, [r7, #12]
 8002cea:	425b      	negs	r3, r3
 8002cec:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002cee:	89fb      	ldrh	r3, [r7, #14]
 8002cf0:	425b      	negs	r3, r3
 8002cf2:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002cf4:	89ba      	ldrh	r2, [r7, #12]
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <TP_Read_Coordinates+0x17c>)
 8002cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfc:	1ad2      	subs	r2, r2, r3
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d12:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002d78 <TP_Read_Coordinates+0x170>
 8002d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d1e:	ee17 3a90 	vmov	r3, s15
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002d28:	89fb      	ldrh	r3, [r7, #14]
 8002d2a:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <TP_Read_Coordinates+0x180>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	09db      	lsrs	r3, r3, #7
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b0f      	subs	r3, #15
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d3e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002d78 <TP_Read_Coordinates+0x170>
 8002d42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3302      	adds	r3, #2
 8002d4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d4e:	ee17 2a90 	vmov	r2, s15
 8002d52:	b292      	uxth	r2, r2
 8002d54:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002d56:	2301      	movs	r3, #1
 8002d58:	e007      	b.n	8002d6a <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3302      	adds	r3, #2
 8002d64:	2200      	movs	r2, #0
 8002d66:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002d68:	2300      	movs	r3, #0
		}
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	f3af 8000 	nop.w
 8002d78:	28f5c28f 	.word	0x28f5c28f
 8002d7c:	3ff28f5c 	.word	0x3ff28f5c
 8002d80:	40021000 	.word	0x40021000
 8002d84:	e01e01e1 	.word	0xe01e01e1
 8002d88:	a0a0a0a1 	.word	0xa0a0a0a1

08002d8c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002d90:	2104      	movs	r1, #4
 8002d92:	4805      	ldr	r0, [pc, #20]	; (8002da8 <TP_Touchpad_Pressed+0x1c>)
 8002d94:	f000 fb52 	bl	800343c <HAL_GPIO_ReadPin>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002da2:	2300      	movs	r3, #0
	}
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000

08002dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_Init+0x28>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <HAL_Init+0x28>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 f94f 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f000 f808 	bl	8002dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7fe fbba 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_InitTick+0x54>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_InitTick+0x58>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f967 	bl	80030ca <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 f92f 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <HAL_InitTick+0x5c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	2000000c 	.word	0x2000000c
 8002e34:	20000008 	.word	0x20000008

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	2000000c 	.word	0x2000000c
 8002e5c:	200005f4 	.word	0x200005f4

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200005f4 	.word	0x200005f4

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000000c 	.word	0x2000000c

08002ec0 <__NVIC_SetPriorityGrouping>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00
 8002f04:	05fa0000 	.word	0x05fa0000

08002f08 <__NVIC_GetPriorityGrouping>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	; (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	; (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff3e 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff31 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa2 	bl	800301c <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e175      	b.n	80033f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8164 	bne.w	80033ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <HAL_GPIO_Init+0x56>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d130      	bne.n	800319c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80be 	beq.w	80033ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_GPIO_Init+0x324>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a65      	ldr	r2, [pc, #404]	; (8003408 <HAL_GPIO_Init+0x324>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_GPIO_Init+0x324>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003286:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_GPIO_Init+0x328>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d037      	beq.n	8003322 <HAL_GPIO_Init+0x23e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_GPIO_Init+0x330>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_GPIO_Init+0x23a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a56      	ldr	r2, [pc, #344]	; (8003418 <HAL_GPIO_Init+0x334>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02b      	beq.n	800331a <HAL_GPIO_Init+0x236>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a55      	ldr	r2, [pc, #340]	; (800341c <HAL_GPIO_Init+0x338>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d025      	beq.n	8003316 <HAL_GPIO_Init+0x232>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a54      	ldr	r2, [pc, #336]	; (8003420 <HAL_GPIO_Init+0x33c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <HAL_GPIO_Init+0x22e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a53      	ldr	r2, [pc, #332]	; (8003424 <HAL_GPIO_Init+0x340>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x22a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a52      	ldr	r2, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x344>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a51      	ldr	r2, [pc, #324]	; (800342c <HAL_GPIO_Init+0x348>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_GPIO_Init+0x34c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4f      	ldr	r2, [pc, #316]	; (8003434 <HAL_GPIO_Init+0x350>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x21a>
 80032fa:	2309      	movs	r3, #9
 80032fc:	e012      	b.n	8003324 <HAL_GPIO_Init+0x240>
 80032fe:	230a      	movs	r3, #10
 8003300:	e010      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003302:	2308      	movs	r3, #8
 8003304:	e00e      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003306:	2307      	movs	r3, #7
 8003308:	e00c      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330a:	2306      	movs	r3, #6
 800330c:	e00a      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330e:	2305      	movs	r3, #5
 8003310:	e008      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003312:	2304      	movs	r3, #4
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003316:	2303      	movs	r3, #3
 8003318:	e004      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003322:	2300      	movs	r3, #0
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f002 0203 	and.w	r2, r2, #3
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	4093      	lsls	r3, r2
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003334:	4935      	ldr	r1, [pc, #212]	; (800340c <HAL_GPIO_Init+0x328>)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800336c:	4b32      	ldr	r3, [pc, #200]	; (8003438 <HAL_GPIO_Init+0x354>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003390:	4a29      	ldr	r2, [pc, #164]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003396:	4b28      	ldr	r3, [pc, #160]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e4:	4a14      	ldr	r2, [pc, #80]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	f67f ae86 	bls.w	8003104 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3724      	adds	r7, #36	; 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40013800 	.word	0x40013800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40021400 	.word	0x40021400
 8003428:	40021800 	.word	0x40021800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40022000 	.word	0x40022000
 8003434:	40022400 	.word	0x40022400
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e001      	b.n	800345e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003488:	e003      	b.n	8003492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	041a      	lsls	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fac2 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e006      	b.n	8003528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d104      	bne.n	800353a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003538:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_I2C_Init+0x11c>)
 8003546:	430b      	orrs	r3, r1
 8003548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69d9      	ldr	r1, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	02008000 	.word	0x02008000

080035c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	817b      	strh	r3, [r7, #10]
 80035d0:	4613      	mov	r3, r2
 80035d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	f040 80da 	bne.w	8003796 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2C_Master_Transmit+0x30>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0d3      	b.n	8003798 <HAL_I2C_Master_Transmit+0x1d8>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035f8:	f7ff fc32 	bl	8002e60 <HAL_GetTick>
 80035fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	2319      	movs	r3, #25
 8003604:	2201      	movs	r2, #1
 8003606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f9e6 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0be      	b.n	8003798 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2221      	movs	r2, #33	; 0x21
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2210      	movs	r2, #16
 8003626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	893a      	ldrh	r2, [r7, #8]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	2bff      	cmp	r3, #255	; 0xff
 800364a:	d90e      	bls.n	800366a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	22ff      	movs	r2, #255	; 0xff
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	b2da      	uxtb	r2, r3
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fbd0 	bl	8003e08 <I2C_TransferConfig>
 8003668:	e06c      	b.n	8003744 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fbbf 	bl	8003e08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800368a:	e05b      	b.n	8003744 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	6a39      	ldr	r1, [r7, #32]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f9e3 	bl	8003a5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e07b      	b.n	8003798 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d034      	beq.n	8003744 <HAL_I2C_Master_Transmit+0x184>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d130      	bne.n	8003744 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f975 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e04d      	b.n	8003798 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2bff      	cmp	r3, #255	; 0xff
 8003704:	d90e      	bls.n	8003724 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	22ff      	movs	r2, #255	; 0xff
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	b2da      	uxtb	r2, r3
 8003712:	8979      	ldrh	r1, [r7, #10]
 8003714:	2300      	movs	r3, #0
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fb73 	bl	8003e08 <I2C_TransferConfig>
 8003722:	e00f      	b.n	8003744 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	b2da      	uxtb	r2, r3
 8003734:	8979      	ldrh	r1, [r7, #10]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fb62 	bl	8003e08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d19e      	bne.n	800368c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f9c2 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e01a      	b.n	8003798 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2220      	movs	r2, #32
 8003768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003776:	400b      	ands	r3, r1
 8003778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	80002000 	.word	0x80002000
 80037a4:	fe00e800 	.word	0xfe00e800

080037a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	461a      	mov	r2, r3
 80037b4:	460b      	mov	r3, r1
 80037b6:	817b      	strh	r3, [r7, #10]
 80037b8:	4613      	mov	r3, r2
 80037ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	f040 80db 	bne.w	8003980 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2C_Master_Receive+0x30>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e0d4      	b.n	8003982 <HAL_I2C_Master_Receive+0x1da>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e0:	f7ff fb3e 	bl	8002e60 <HAL_GetTick>
 80037e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2319      	movs	r3, #25
 80037ec:	2201      	movs	r2, #1
 80037ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f8f2 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0bf      	b.n	8003982 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2222      	movs	r2, #34	; 0x22
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2210      	movs	r2, #16
 800380e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	893a      	ldrh	r2, [r7, #8]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	2bff      	cmp	r3, #255	; 0xff
 8003832:	d90e      	bls.n	8003852 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	b2da      	uxtb	r2, r3
 8003840:	8979      	ldrh	r1, [r7, #10]
 8003842:	4b52      	ldr	r3, [pc, #328]	; (800398c <HAL_I2C_Master_Receive+0x1e4>)
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fadc 	bl	8003e08 <I2C_TransferConfig>
 8003850:	e06d      	b.n	800392e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	b2da      	uxtb	r2, r3
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <HAL_I2C_Master_Receive+0x1e4>)
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 facb 	bl	8003e08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003872:	e05c      	b.n	800392e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	6a39      	ldr	r1, [r7, #32]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f96b 	bl	8003b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e07c      	b.n	8003982 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d034      	beq.n	800392e <HAL_I2C_Master_Receive+0x186>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d130      	bne.n	800392e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f880 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e04d      	b.n	8003982 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2bff      	cmp	r3, #255	; 0xff
 80038ee:	d90e      	bls.n	800390e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	22ff      	movs	r2, #255	; 0xff
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	8979      	ldrh	r1, [r7, #10]
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa7e 	bl	8003e08 <I2C_TransferConfig>
 800390c:	e00f      	b.n	800392e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	b2da      	uxtb	r2, r3
 800391e:	8979      	ldrh	r1, [r7, #10]
 8003920:	2300      	movs	r3, #0
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa6d 	bl	8003e08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d19d      	bne.n	8003874 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6a39      	ldr	r1, [r7, #32]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f8cd 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e01a      	b.n	8003982 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2220      	movs	r2, #32
 8003952:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_I2C_Master_Receive+0x1e8>)
 8003960:	400b      	ands	r3, r1
 8003962:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	80002400 	.word	0x80002400
 8003990:	fe00e800 	.word	0xfe00e800

08003994 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d103      	bne.n	80039b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d007      	beq.n	80039d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	619a      	str	r2, [r3, #24]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ec:	e022      	b.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d01e      	beq.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7ff fa33 	bl	8002e60 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d113      	bne.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e00f      	b.n	8003a54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d0cd      	beq.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a68:	e02c      	b.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8ea 	bl	8003c48 <I2C_IsErrorOccurred>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e02a      	b.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d01e      	beq.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7ff f9eb 	bl	8002e60 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d113      	bne.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e007      	b.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d1cb      	bne.n	8003a6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	e028      	b.n	8003b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f8aa 	bl	8003c48 <I2C_IsErrorOccurred>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e026      	b.n	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7ff f9af 	bl	8002e60 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d113      	bne.n	8003b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e007      	b.n	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d1cf      	bne.n	8003aea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b60:	e064      	b.n	8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f86e 	bl	8003c48 <I2C_IsErrorOccurred>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e062      	b.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d138      	bne.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d105      	bne.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e04e      	b.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d107      	bne.n	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8003bba:	e002      	b.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e022      	b.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7ff f933 	bl	8002e60 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10f      	bne.n	8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d193      	bne.n	8003b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	fe00e800 	.word	0xfe00e800

08003c48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d068      	beq.n	8003d46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c7c:	e049      	b.n	8003d12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d045      	beq.n	8003d12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7ff f8eb 	bl	8002e60 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_IsErrorOccurred+0x54>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d13a      	bne.n	8003d12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbe:	d121      	bne.n	8003d04 <I2C_IsErrorOccurred+0xbc>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc6:	d01d      	beq.n	8003d04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d01a      	beq.n	8003d04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cde:	f7ff f8bf 	bl	8002e60 <HAL_GetTick>
 8003ce2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce4:	e00e      	b.n	8003d04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ce6:	f7ff f8bb 	bl	8002e60 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b19      	cmp	r3, #25
 8003cf2:	d907      	bls.n	8003d04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f043 0320 	orr.w	r3, r3, #32
 8003cfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003d02:	e006      	b.n	8003d12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d1e9      	bne.n	8003ce6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d003      	beq.n	8003d28 <I2C_IsErrorOccurred+0xe0>
 8003d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0aa      	beq.n	8003c7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2220      	movs	r2, #32
 8003d36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01c      	beq.n	8003df6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7ff fde9 	bl	8003994 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <I2C_IsErrorOccurred+0x1bc>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	fe00e800 	.word	0xfe00e800

08003e08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	817b      	strh	r3, [r7, #10]
 8003e16:	4613      	mov	r3, r2
 8003e18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e1a:	897b      	ldrh	r3, [r7, #10]
 8003e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e20:	7a7b      	ldrb	r3, [r7, #9]
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	0d5b      	lsrs	r3, r3, #21
 8003e42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <I2C_TransferConfig+0x60>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	ea02 0103 	and.w	r1, r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	03ff63ff 	.word	0x03ff63ff

08003e6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d138      	bne.n	8003ef4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e032      	b.n	8003ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6819      	ldr	r1, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d139      	bne.n	8003f8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e033      	b.n	8003f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2224      	movs	r2, #36	; 0x24
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40007000 	.word	0x40007000

08003fbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fea:	f7fe ff39 	bl	8002e60 <HAL_GetTick>
 8003fee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ff0:	e009      	b.n	8004006 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ff2:	f7fe ff35 	bl	8002e60 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004000:	d901      	bls.n	8004006 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e022      	b.n	800404c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d1ee      	bne.n	8003ff2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004014:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0f      	ldr	r2, [pc, #60]	; (8004058 <HAL_PWREx_EnableOverDrive+0x9c>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004020:	f7fe ff1e 	bl	8002e60 <HAL_GetTick>
 8004024:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004026:	e009      	b.n	800403c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004028:	f7fe ff1a 	bl	8002e60 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004036:	d901      	bls.n	800403c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e007      	b.n	800404c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_PWREx_EnableOverDrive+0x9c>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004048:	d1ee      	bne.n	8004028 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800
 8004058:	40007000 	.word	0x40007000

0800405c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004064:	2300      	movs	r3, #0
 8004066:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e29b      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8087 	beq.w	800418e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004080:	4b96      	ldr	r3, [pc, #600]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	2b04      	cmp	r3, #4
 800408a:	d00c      	beq.n	80040a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408c:	4b93      	ldr	r3, [pc, #588]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d112      	bne.n	80040be <HAL_RCC_OscConfig+0x62>
 8004098:	4b90      	ldr	r3, [pc, #576]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d10b      	bne.n	80040be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a6:	4b8d      	ldr	r3, [pc, #564]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d06c      	beq.n	800418c <HAL_RCC_OscConfig+0x130>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d168      	bne.n	800418c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e275      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x7a>
 80040c8:	4b84      	ldr	r3, [pc, #528]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a83      	ldr	r2, [pc, #524]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80040ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e02e      	b.n	8004134 <HAL_RCC_OscConfig+0xd8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x9c>
 80040de:	4b7f      	ldr	r3, [pc, #508]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7e      	ldr	r2, [pc, #504]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80040e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b7c      	ldr	r3, [pc, #496]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7b      	ldr	r2, [pc, #492]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80040f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e01d      	b.n	8004134 <HAL_RCC_OscConfig+0xd8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0xc0>
 8004102:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a75      	ldr	r2, [pc, #468]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b73      	ldr	r3, [pc, #460]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a72      	ldr	r2, [pc, #456]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0xd8>
 800411c:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6e      	ldr	r2, [pc, #440]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6b      	ldr	r2, [pc, #428]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800412e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe fe90 	bl	8002e60 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe fe8c 	bl	8002e60 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e229      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b61      	ldr	r3, [pc, #388]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0xe8>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fe7c 	bl	8002e60 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fe fe78 	bl	8002e60 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e215      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	4b57      	ldr	r3, [pc, #348]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x110>
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d069      	beq.n	800426e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419a:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a6:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d11c      	bne.n	80041ec <HAL_RCC_OscConfig+0x190>
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_RCC_OscConfig+0x17a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e1e9      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	493d      	ldr	r1, [pc, #244]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	e040      	b.n	800426e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d023      	beq.n	800423c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f4:	4b39      	ldr	r3, [pc, #228]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a38      	ldr	r2, [pc, #224]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fe fe2e 	bl	8002e60 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004208:	f7fe fe2a 	bl	8002e60 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1c7      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4929      	ldr	r1, [pc, #164]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
 800423a:	e018      	b.n	800426e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a26      	ldr	r2, [pc, #152]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fe fe0a 	bl	8002e60 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004250:	f7fe fe06 	bl	8002e60 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1a3      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d038      	beq.n	80042ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d019      	beq.n	80042b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fe fde7 	bl	8002e60 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004296:	f7fe fde3 	bl	8002e60 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e180      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80042aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x23a>
 80042b4:	e01a      	b.n	80042ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b6:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fe fdcd 	bl	8002e60 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fe fdc9 	bl	8002e60 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d903      	bls.n	80042e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e166      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
 80042dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	4b92      	ldr	r3, [pc, #584]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ee      	bne.n	80042ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80a4 	beq.w	8004442 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b8c      	ldr	r3, [pc, #560]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	4b89      	ldr	r3, [pc, #548]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a88      	ldr	r2, [pc, #544]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
 8004312:	4b86      	ldr	r3, [pc, #536]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004322:	4b83      	ldr	r3, [pc, #524]	; (8004530 <HAL_RCC_OscConfig+0x4d4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800432e:	4b80      	ldr	r3, [pc, #512]	; (8004530 <HAL_RCC_OscConfig+0x4d4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7f      	ldr	r2, [pc, #508]	; (8004530 <HAL_RCC_OscConfig+0x4d4>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fe fd91 	bl	8002e60 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fe fd8d 	bl	8002e60 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	; 0x64
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e12a      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004354:	4b76      	ldr	r3, [pc, #472]	; (8004530 <HAL_RCC_OscConfig+0x4d4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x31a>
 8004368:	4b70      	ldr	r3, [pc, #448]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4a6f      	ldr	r2, [pc, #444]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6713      	str	r3, [r2, #112]	; 0x70
 8004374:	e02d      	b.n	80043d2 <HAL_RCC_OscConfig+0x376>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x33c>
 800437e:	4b6b      	ldr	r3, [pc, #428]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	4b68      	ldr	r3, [pc, #416]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a67      	ldr	r2, [pc, #412]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	e01c      	b.n	80043d2 <HAL_RCC_OscConfig+0x376>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x35e>
 80043a0:	4b62      	ldr	r3, [pc, #392]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a61      	ldr	r2, [pc, #388]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	4b5f      	ldr	r3, [pc, #380]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a5e      	ldr	r2, [pc, #376]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x376>
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a5b      	ldr	r2, [pc, #364]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	4b59      	ldr	r3, [pc, #356]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a58      	ldr	r2, [pc, #352]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fe fd41 	bl	8002e60 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe fd3d 	bl	8002e60 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0d8      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x386>
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe fd2b 	bl	8002e60 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fe fd27 	bl	8002e60 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e0c2      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	4b41      	ldr	r3, [pc, #260]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b3d      	ldr	r3, [pc, #244]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4a3c      	ldr	r2, [pc, #240]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004440:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80ae 	beq.w	80045a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444c:	4b37      	ldr	r3, [pc, #220]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b08      	cmp	r3, #8
 8004456:	d06d      	beq.n	8004534 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d14b      	bne.n	80044f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a31      	ldr	r2, [pc, #196]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe fcf8 	bl	8002e60 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7fe fcf4 	bl	8002e60 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e091      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	019b      	lsls	r3, r3, #6
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	3b01      	subs	r3, #1
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	491b      	ldr	r1, [pc, #108]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a18      	ldr	r2, [pc, #96]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe fcc6 	bl	8002e60 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe fcc2 	bl	8002e60 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e05f      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x47c>
 80044f6:	e057      	b.n	80045a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a0b      	ldr	r2, [pc, #44]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fe fcac 	bl	8002e60 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe fca8 	bl	8002e60 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e045      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_RCC_OscConfig+0x4d0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x4b0>
 800452a:	e03d      	b.n	80045a8 <HAL_RCC_OscConfig+0x54c>
 800452c:	40023800 	.word	0x40023800
 8004530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004534:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <HAL_RCC_OscConfig+0x558>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d030      	beq.n	80045a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d129      	bne.n	80045a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d122      	bne.n	80045a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800456a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800456c:	4293      	cmp	r3, r2
 800456e:	d119      	bne.n	80045a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	3b01      	subs	r3, #1
 800457e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d10f      	bne.n	80045a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800

080045b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0d0      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d910      	bls.n	8004600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 020f 	bic.w	r2, r3, #15
 80045e6:	4965      	ldr	r1, [pc, #404]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0b8      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004618:	4b59      	ldr	r3, [pc, #356]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a58      	ldr	r2, [pc, #352]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800461e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004630:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a52      	ldr	r2, [pc, #328]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800463a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	494d      	ldr	r1, [pc, #308]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d040      	beq.n	80046dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d115      	bne.n	800469a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e07f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e073      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06b      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b39      	ldr	r3, [pc, #228]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4936      	ldr	r1, [pc, #216]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ac:	f7fe fbd8 	bl	8002e60 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fe fbd4 	bl	8002e60 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e053      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d210      	bcs.n	800470c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 020f 	bic.w	r2, r3, #15
 80046f2:	4922      	ldr	r1, [pc, #136]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e032      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4916      	ldr	r1, [pc, #88]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	490e      	ldr	r1, [pc, #56]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800474a:	f000 f821 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800474e:	4602      	mov	r2, r0
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	490a      	ldr	r1, [pc, #40]	; (8004784 <HAL_RCC_ClockConfig+0x1cc>)
 800475c:	5ccb      	ldrb	r3, [r1, r3]
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1d0>)
 8004764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_ClockConfig+0x1d4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fb34 	bl	8002dd8 <HAL_InitTick>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023c00 	.word	0x40023c00
 8004780:	40023800 	.word	0x40023800
 8004784:	0802fa68 	.word	0x0802fa68
 8004788:	20000000 	.word	0x20000000
 800478c:	20000008 	.word	0x20000008

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b094      	sub	sp, #80	; 0x50
 8004796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
 800479c:	2300      	movs	r3, #0
 800479e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a0:	2300      	movs	r3, #0
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a8:	4b79      	ldr	r3, [pc, #484]	; (8004990 <HAL_RCC_GetSysClockFreq+0x200>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d00d      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0x40>
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	f200 80e1 	bhi.w	800497c <HAL_RCC_GetSysClockFreq+0x1ec>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x34>
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d003      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0x3a>
 80047c2:	e0db      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c4:	4b73      	ldr	r3, [pc, #460]	; (8004994 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047c8:	e0db      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ca:	4b73      	ldr	r3, [pc, #460]	; (8004998 <HAL_RCC_GetSysClockFreq+0x208>)
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ce:	e0d8      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d0:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <HAL_RCC_GetSysClockFreq+0x200>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d063      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	2200      	movs	r2, #0
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
 80047fa:	2300      	movs	r3, #0
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
 80047fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	f04f 0000 	mov.w	r0, #0
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	0159      	lsls	r1, r3, #5
 8004810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004814:	0150      	lsls	r0, r2, #5
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4621      	mov	r1, r4
 800481c:	1a51      	subs	r1, r2, r1
 800481e:	6139      	str	r1, [r7, #16]
 8004820:	4629      	mov	r1, r5
 8004822:	eb63 0301 	sbc.w	r3, r3, r1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004834:	4659      	mov	r1, fp
 8004836:	018b      	lsls	r3, r1, #6
 8004838:	4651      	mov	r1, sl
 800483a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483e:	4651      	mov	r1, sl
 8004840:	018a      	lsls	r2, r1, #6
 8004842:	4651      	mov	r1, sl
 8004844:	ebb2 0801 	subs.w	r8, r2, r1
 8004848:	4659      	mov	r1, fp
 800484a:	eb63 0901 	sbc.w	r9, r3, r1
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800485a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004862:	4690      	mov	r8, r2
 8004864:	4699      	mov	r9, r3
 8004866:	4623      	mov	r3, r4
 8004868:	eb18 0303 	adds.w	r3, r8, r3
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	462b      	mov	r3, r5
 8004870:	eb49 0303 	adc.w	r3, r9, r3
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004882:	4629      	mov	r1, r5
 8004884:	024b      	lsls	r3, r1, #9
 8004886:	4621      	mov	r1, r4
 8004888:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800488c:	4621      	mov	r1, r4
 800488e:	024a      	lsls	r2, r1, #9
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004896:	2200      	movs	r2, #0
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
 800489a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800489c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048a0:	f7fb fd26 	bl	80002f0 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ac:	e058      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ae:	4b38      	ldr	r3, [pc, #224]	; (8004990 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	2200      	movs	r2, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	4611      	mov	r1, r2
 80048ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048be:	623b      	str	r3, [r7, #32]
 80048c0:	2300      	movs	r3, #0
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
 80048c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	f04f 0000 	mov.w	r0, #0
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	0159      	lsls	r1, r3, #5
 80048d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048da:	0150      	lsls	r0, r2, #5
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4641      	mov	r1, r8
 80048e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80048e6:	4649      	mov	r1, r9
 80048e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004900:	ebb2 040a 	subs.w	r4, r2, sl
 8004904:	eb63 050b 	sbc.w	r5, r3, fp
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	00eb      	lsls	r3, r5, #3
 8004912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004916:	00e2      	lsls	r2, r4, #3
 8004918:	4614      	mov	r4, r2
 800491a:	461d      	mov	r5, r3
 800491c:	4643      	mov	r3, r8
 800491e:	18e3      	adds	r3, r4, r3
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	464b      	mov	r3, r9
 8004924:	eb45 0303 	adc.w	r3, r5, r3
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004936:	4629      	mov	r1, r5
 8004938:	028b      	lsls	r3, r1, #10
 800493a:	4621      	mov	r1, r4
 800493c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004940:	4621      	mov	r1, r4
 8004942:	028a      	lsls	r2, r1, #10
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	2200      	movs	r2, #0
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	61fa      	str	r2, [r7, #28]
 8004950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004954:	f7fb fccc 	bl	80002f0 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4613      	mov	r3, r2
 800495e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_GetSysClockFreq+0x200>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	3301      	adds	r3, #1
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800497a:	e002      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetSysClockFreq+0x204>)
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004984:	4618      	mov	r0, r3
 8004986:	3750      	adds	r7, #80	; 0x50
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	00f42400 	.word	0x00f42400
 8004998:	007a1200 	.word	0x007a1200

0800499c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049a2:	681b      	ldr	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000

080049b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b8:	f7ff fff0 	bl	800499c <HAL_RCC_GetHCLKFreq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	0a9b      	lsrs	r3, r3, #10
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	4903      	ldr	r1, [pc, #12]	; (80049d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ca:	5ccb      	ldrb	r3, [r1, r3]
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40023800 	.word	0x40023800
 80049d8:	0802fa78 	.word	0x0802fa78

080049dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049e0:	f7ff ffdc 	bl	800499c <HAL_RCC_GetHCLKFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	0b5b      	lsrs	r3, r3, #13
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	4903      	ldr	r1, [pc, #12]	; (8004a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	0802fa78 	.word	0x0802fa78

08004a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a2c:	4b69      	ldr	r3, [pc, #420]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4a68      	ldr	r2, [pc, #416]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a36:	6093      	str	r3, [r2, #8]
 8004a38:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a40:	4964      	ldr	r1, [pc, #400]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a5e:	4b5d      	ldr	r3, [pc, #372]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	4959      	ldr	r1, [pc, #356]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d017      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a9a:	4b4e      	ldr	r3, [pc, #312]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	494a      	ldr	r1, [pc, #296]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab8:	d101      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 808b 	beq.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae8:	4b3a      	ldr	r3, [pc, #232]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	4a39      	ldr	r2, [pc, #228]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	6413      	str	r3, [r2, #64]	; 0x40
 8004af4:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b00:	4b35      	ldr	r3, [pc, #212]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0c:	f7fe f9a8 	bl	8002e60 <HAL_GetTick>
 8004b10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fe f9a4 	bl	8002e60 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e38f      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b26:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b32:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d035      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d02e      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b50:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b66:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b72:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b78:	4b16      	ldr	r3, [pc, #88]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d114      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7fe f96c 	bl	8002e60 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fe f968 	bl	8002e60 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e351      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ee      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bba:	d111      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	4901      	ldr	r1, [pc, #4]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
 8004bd2:	e00b      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	0ffffcff 	.word	0x0ffffcff
 8004be0:	4bac      	ldr	r3, [pc, #688]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4aab      	ldr	r2, [pc, #684]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bea:	6093      	str	r3, [r2, #8]
 8004bec:	4ba9      	ldr	r3, [pc, #676]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf8:	49a6      	ldr	r1, [pc, #664]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d010      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c0a:	4ba2      	ldr	r3, [pc, #648]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c10:	4aa0      	ldr	r2, [pc, #640]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c1a:	4b9e      	ldr	r3, [pc, #632]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	499b      	ldr	r1, [pc, #620]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c38:	4b96      	ldr	r3, [pc, #600]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c46:	4993      	ldr	r1, [pc, #588]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5a:	4b8e      	ldr	r3, [pc, #568]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c68:	498a      	ldr	r1, [pc, #552]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c7c:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8a:	4982      	ldr	r1, [pc, #520]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c9e:	4b7d      	ldr	r3, [pc, #500]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4979      	ldr	r1, [pc, #484]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc0:	4b74      	ldr	r3, [pc, #464]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f023 0203 	bic.w	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	4971      	ldr	r1, [pc, #452]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	f023 020c 	bic.w	r2, r3, #12
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	4968      	ldr	r1, [pc, #416]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d04:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d12:	4960      	ldr	r1, [pc, #384]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d26:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	4957      	ldr	r1, [pc, #348]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d48:	4b52      	ldr	r3, [pc, #328]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	494f      	ldr	r1, [pc, #316]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	4946      	ldr	r1, [pc, #280]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d8c:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9a:	493e      	ldr	r1, [pc, #248]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	4935      	ldr	r1, [pc, #212]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd0:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dde:	492d      	ldr	r1, [pc, #180]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d011      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004df2:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e00:	4924      	ldr	r1, [pc, #144]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e10:	d101      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e32:	4b18      	ldr	r3, [pc, #96]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	4914      	ldr	r1, [pc, #80]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e64:	490b      	ldr	r1, [pc, #44]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00f      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	4902      	ldr	r1, [pc, #8]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e90:	e002      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ea4:	4b8a      	ldr	r3, [pc, #552]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	4986      	ldr	r1, [pc, #536]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ec8:	4b81      	ldr	r3, [pc, #516]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed8:	497d      	ldr	r1, [pc, #500]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d006      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80d6 	beq.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ef4:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fd ffae 	bl	8002e60 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f08:	f7fd ffaa 	bl	8002e60 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e195      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d021      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11d      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f3a:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f48:	4b61      	ldr	r3, [pc, #388]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	0e1b      	lsrs	r3, r3, #24
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	019a      	lsls	r2, r3, #6
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	071b      	lsls	r3, r3, #28
 8004f6e:	4958      	ldr	r1, [pc, #352]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02e      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa0:	d129      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa2:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fb0:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	0f1b      	lsrs	r3, r3, #28
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	019a      	lsls	r2, r3, #6
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	071b      	lsls	r3, r3, #28
 8004fd6:	493e      	ldr	r1, [pc, #248]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fde:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe4:	f023 021f 	bic.w	r2, r3, #31
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	3b01      	subs	r3, #1
 8004fee:	4938      	ldr	r1, [pc, #224]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01d      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005002:	4b33      	ldr	r3, [pc, #204]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005010:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	0f1b      	lsrs	r3, r3, #28
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	019a      	lsls	r2, r3, #6
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	4926      	ldr	r1, [pc, #152]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	019a      	lsls	r2, r3, #6
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	071b      	lsls	r3, r3, #28
 8005066:	491a      	ldr	r1, [pc, #104]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a17      	ldr	r2, [pc, #92]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507a:	f7fd fef1 	bl	8002e60 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005082:	f7fd feed 	bl	8002e60 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b64      	cmp	r3, #100	; 0x64
 800508e:	d901      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0d8      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	f040 80ce 	bne.w	8005244 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b4:	f7fd fed4 	bl	8002e60 <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050ba:	e00b      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050bc:	f7fd fed0 	bl	8002e60 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d904      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e0bb      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d4:	4b5e      	ldr	r3, [pc, #376]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e0:	d0ec      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02e      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d12a      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800510a:	4b51      	ldr	r3, [pc, #324]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005118:	4b4d      	ldr	r3, [pc, #308]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	0f1b      	lsrs	r3, r3, #28
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	019a      	lsls	r2, r3, #6
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	431a      	orrs	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	071b      	lsls	r3, r3, #28
 800513e:	4944      	ldr	r1, [pc, #272]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005146:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	493d      	ldr	r1, [pc, #244]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d022      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005174:	d11d      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005176:	4b36      	ldr	r3, [pc, #216]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	0e1b      	lsrs	r3, r3, #24
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005184:	4b32      	ldr	r3, [pc, #200]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	0f1b      	lsrs	r3, r3, #28
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	019a      	lsls	r2, r3, #6
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	431a      	orrs	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	4929      	ldr	r1, [pc, #164]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d028      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051be:	4b24      	ldr	r3, [pc, #144]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	0e1b      	lsrs	r3, r3, #24
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051cc:	4b20      	ldr	r3, [pc, #128]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	019a      	lsls	r2, r3, #6
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	071b      	lsls	r3, r3, #28
 80051f2:	4917      	ldr	r1, [pc, #92]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	4911      	ldr	r1, [pc, #68]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521c:	f7fd fe20 	bl	8002e60 <HAL_GetTick>
 8005220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005224:	f7fd fe1c 	bl	8002e60 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e007      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005242:	d1ef      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800

08005254 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e01c      	b.n	80052a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	795b      	ldrb	r3, [r3, #5]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc f8ac 	bl	80013d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0204 	orr.w	r2, r2, #4
 8005290:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e09d      	b.n	80053f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d108      	bne.n	80052d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ca:	d009      	beq.n	80052e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	61da      	str	r2, [r3, #28]
 80052d2:	e005      	b.n	80052e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fc f8dc 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005316:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005320:	d902      	bls.n	8005328 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e002      	b.n	800532e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005336:	d007      	beq.n	8005348 <HAL_SPI_Init+0xa0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005340:	d002      	beq.n	8005348 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	ea42 0103 	orr.w	r1, r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	f003 0204 	and.w	r2, r3, #4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053c4:	ea42 0103 	orr.w	r1, r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b088      	sub	sp, #32
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_SPI_Transmit+0x22>
 800541c:	2302      	movs	r3, #2
 800541e:	e158      	b.n	80056d2 <HAL_SPI_Transmit+0x2d4>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005428:	f7fd fd1a 	bl	8002e60 <HAL_GetTick>
 800542c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	d002      	beq.n	8005444 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800543e:	2302      	movs	r3, #2
 8005440:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005442:	e13d      	b.n	80056c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Transmit+0x52>
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005454:	e134      	b.n	80056c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2203      	movs	r2, #3
 800545a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a0:	d10f      	bne.n	80054c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d007      	beq.n	80054e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e8:	d94b      	bls.n	8005582 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Transmit+0xfa>
 80054f2:	8afb      	ldrh	r3, [r7, #22]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d13e      	bne.n	8005576 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	881a      	ldrh	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	1c9a      	adds	r2, r3, #2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800551c:	e02b      	b.n	8005576 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b02      	cmp	r3, #2
 800552a:	d112      	bne.n	8005552 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	881a      	ldrh	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	1c9a      	adds	r2, r3, #2
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005550:	e011      	b.n	8005576 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005552:	f7fd fc85 	bl	8002e60 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d803      	bhi.n	800556a <HAL_SPI_Transmit+0x16c>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d102      	bne.n	8005570 <HAL_SPI_Transmit+0x172>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005574:	e0a4      	b.n	80056c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ce      	bne.n	800551e <HAL_SPI_Transmit+0x120>
 8005580:	e07c      	b.n	800567c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_SPI_Transmit+0x192>
 800558a:	8afb      	ldrh	r3, [r7, #22]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d170      	bne.n	8005672 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d912      	bls.n	80055c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	881a      	ldrh	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	1c9a      	adds	r2, r3, #2
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b02      	subs	r3, #2
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055be:	e058      	b.n	8005672 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	7812      	ldrb	r2, [r2, #0]
 80055cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055e6:	e044      	b.n	8005672 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d12b      	bne.n	800564e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d912      	bls.n	8005626 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	881a      	ldrh	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b02      	subs	r3, #2
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005624:	e025      	b.n	8005672 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800564c:	e011      	b.n	8005672 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564e:	f7fd fc07 	bl	8002e60 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d803      	bhi.n	8005666 <HAL_SPI_Transmit+0x268>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d102      	bne.n	800566c <HAL_SPI_Transmit+0x26e>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005670:	e026      	b.n	80056c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1b5      	bne.n	80055e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f949 	bl	8005918 <SPI_EndRxTxTransaction>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e000      	b.n	80056c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80056be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056ec:	f7fd fbb8 	bl	8002e60 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	4413      	add	r3, r2
 80056fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056fc:	f7fd fbb0 	bl	8002e60 <HAL_GetTick>
 8005700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005702:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	015b      	lsls	r3, r3, #5
 8005708:	0d1b      	lsrs	r3, r3, #20
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	fb02 f303 	mul.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005712:	e054      	b.n	80057be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d050      	beq.n	80057be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800571c:	f7fd fba0 	bl	8002e60 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	429a      	cmp	r2, r3
 800572a:	d902      	bls.n	8005732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d13d      	bne.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574a:	d111      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005754:	d004      	beq.n	8005760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575e:	d107      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d10f      	bne.n	800579a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e017      	b.n	80057de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	bf0c      	ite	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	2300      	movne	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d19b      	bne.n	8005714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000000 	.word	0x20000000

080057ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057fe:	f7fd fb2f 	bl	8002e60 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	4413      	add	r3, r2
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800580e:	f7fd fb27 	bl	8002e60 <HAL_GetTick>
 8005812:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800581c:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	00da      	lsls	r2, r3, #3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	0d1b      	lsrs	r3, r3, #20
 800582c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005834:	e060      	b.n	80058f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800583c:	d107      	bne.n	800584e <SPI_WaitFifoStateUntilTimeout+0x62>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800584c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d050      	beq.n	80058f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005856:	f7fd fb03 	bl	8002e60 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	429a      	cmp	r2, r3
 8005864:	d902      	bls.n	800586c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	d13d      	bne.n	80058e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800587a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005884:	d111      	bne.n	80058aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588e:	d004      	beq.n	800589a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d107      	bne.n	80058aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b2:	d10f      	bne.n	80058d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e010      	b.n	800590a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d196      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3728      	adds	r7, #40	; 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000000 	.word	0x20000000

08005918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2200      	movs	r2, #0
 800592c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7ff ff5b 	bl	80057ec <SPI_WaitFifoStateUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e046      	b.n	80059da <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800594c:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <SPI_EndRxTxTransaction+0xcc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <SPI_EndRxTxTransaction+0xd0>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	0d5b      	lsrs	r3, r3, #21
 8005958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596a:	d112      	bne.n	8005992 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2200      	movs	r2, #0
 8005974:	2180      	movs	r1, #128	; 0x80
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff feb0 	bl	80056dc <SPI_WaitFlagStateUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d016      	beq.n	80059b0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e023      	b.n	80059da <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3b01      	subs	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a8:	2b80      	cmp	r3, #128	; 0x80
 80059aa:	d0f2      	beq.n	8005992 <SPI_EndRxTxTransaction+0x7a>
 80059ac:	e000      	b.n	80059b0 <SPI_EndRxTxTransaction+0x98>
        break;
 80059ae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff ff15 	bl	80057ec <SPI_WaitFifoStateUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e000      	b.n	80059da <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000000 	.word	0x20000000
 80059e8:	165e9f81 	.word	0x165e9f81

080059ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e049      	b.n	8005a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fb ffba 	bl	800198c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f000 faf8 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d001      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e054      	b.n	8005b5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d01d      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1e      	ldr	r2, [pc, #120]	; (8005b7c <HAL_TIM_Base_Start_IT+0xe0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d115      	bne.n	8005b48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <HAL_TIM_Base_Start_IT+0xec>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d015      	beq.n	8005b5a <HAL_TIM_Base_Start_IT+0xbe>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b34:	d011      	beq.n	8005b5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	e008      	b.n	8005b5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e000      	b.n	8005b5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	40010400 	.word	0x40010400
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40001800 	.word	0x40001800
 8005b88:	00010007 	.word	0x00010007

08005b8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10f      	bne.n	8005bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	f240 4344 	movw	r3, #1092	; 0x444
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d122      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d11b      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f06f 0202 	mvn.w	r2, #2
 8005c16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9d9 	bl	8005fe4 <HAL_TIM_IC_CaptureCallback>
 8005c32:	e005      	b.n	8005c40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9cb 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9dc 	bl	8005ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d122      	bne.n	8005c9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d11b      	bne.n	8005c9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f06f 0204 	mvn.w	r2, #4
 8005c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f9af 	bl	8005fe4 <HAL_TIM_IC_CaptureCallback>
 8005c86:	e005      	b.n	8005c94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f9a1 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f9b2 	bl	8005ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d122      	bne.n	8005cee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d11b      	bne.n	8005cee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0208 	mvn.w	r2, #8
 8005cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f985 	bl	8005fe4 <HAL_TIM_IC_CaptureCallback>
 8005cda:	e005      	b.n	8005ce8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f977 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f988 	bl	8005ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d122      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d11b      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0210 	mvn.w	r2, #16
 8005d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2208      	movs	r2, #8
 8005d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f95b 	bl	8005fe4 <HAL_TIM_IC_CaptureCallback>
 8005d2e:	e005      	b.n	8005d3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f94d 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f95e 	bl	8005ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10e      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d107      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f06f 0201 	mvn.w	r2, #1
 8005d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f927 	bl	8005fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	d10e      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d86:	2b80      	cmp	r3, #128	; 0x80
 8005d88:	d107      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fb15 	bl	80063c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b80      	cmp	r3, #128	; 0x80
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fb08 	bl	80063d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f90c 	bl	800600c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d10e      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d107      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0220 	mvn.w	r2, #32
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fac8 	bl	80063b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIM_ConfigClockSource+0x1c>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e0b4      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x186>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	4b56      	ldr	r3, [pc, #344]	; (8005fb8 <HAL_TIM_ConfigClockSource+0x190>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7c:	d03e      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0xd4>
 8005e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e82:	f200 8087 	bhi.w	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	f000 8086 	beq.w	8005f9a <HAL_TIM_ConfigClockSource+0x172>
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	d87f      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b70      	cmp	r3, #112	; 0x70
 8005e96:	d01a      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0xa6>
 8005e98:	2b70      	cmp	r3, #112	; 0x70
 8005e9a:	d87b      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b60      	cmp	r3, #96	; 0x60
 8005e9e:	d050      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x11a>
 8005ea0:	2b60      	cmp	r3, #96	; 0x60
 8005ea2:	d877      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d03c      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0xfa>
 8005ea8:	2b50      	cmp	r3, #80	; 0x50
 8005eaa:	d873      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d058      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x13a>
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d86f      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d064      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb8:	2b30      	cmp	r3, #48	; 0x30
 8005eba:	d86b      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d060      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d867      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d05c      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d05a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x15a>
 8005ecc:	e062      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ede:	f000 f9b9 	bl	8006254 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	609a      	str	r2, [r3, #8]
      break;
 8005efa:	e04f      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f0c:	f000 f9a2 	bl	8006254 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1e:	609a      	str	r2, [r3, #8]
      break;
 8005f20:	e03c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f000 f916 	bl	8006160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2150      	movs	r1, #80	; 0x50
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f96f 	bl	800621e <TIM_ITRx_SetConfig>
      break;
 8005f40:	e02c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 f935 	bl	80061be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2160      	movs	r1, #96	; 0x60
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f95f 	bl	800621e <TIM_ITRx_SetConfig>
      break;
 8005f60:	e01c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 f8f6 	bl	8006160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2140      	movs	r1, #64	; 0x40
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f94f 	bl	800621e <TIM_ITRx_SetConfig>
      break;
 8005f80:	e00c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f000 f946 	bl	800621e <TIM_ITRx_SetConfig>
      break;
 8005f92:	e003      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
      break;
 8005f98:	e000      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	fffeff88 	.word	0xfffeff88

08005fbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a40      	ldr	r2, [pc, #256]	; (8006134 <TIM_Base_SetConfig+0x114>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d00f      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a3d      	ldr	r2, [pc, #244]	; (8006138 <TIM_Base_SetConfig+0x118>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00b      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a3c      	ldr	r2, [pc, #240]	; (800613c <TIM_Base_SetConfig+0x11c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a3b      	ldr	r2, [pc, #236]	; (8006140 <TIM_Base_SetConfig+0x120>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a3a      	ldr	r2, [pc, #232]	; (8006144 <TIM_Base_SetConfig+0x124>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a2f      	ldr	r2, [pc, #188]	; (8006134 <TIM_Base_SetConfig+0x114>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d02b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d027      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a2c      	ldr	r2, [pc, #176]	; (8006138 <TIM_Base_SetConfig+0x118>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d023      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a2b      	ldr	r2, [pc, #172]	; (800613c <TIM_Base_SetConfig+0x11c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01f      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <TIM_Base_SetConfig+0x120>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a29      	ldr	r2, [pc, #164]	; (8006144 <TIM_Base_SetConfig+0x124>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d017      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a28      	ldr	r2, [pc, #160]	; (8006148 <TIM_Base_SetConfig+0x128>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a27      	ldr	r2, [pc, #156]	; (800614c <TIM_Base_SetConfig+0x12c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00f      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a26      	ldr	r2, [pc, #152]	; (8006150 <TIM_Base_SetConfig+0x130>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a25      	ldr	r2, [pc, #148]	; (8006154 <TIM_Base_SetConfig+0x134>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a24      	ldr	r2, [pc, #144]	; (8006158 <TIM_Base_SetConfig+0x138>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a23      	ldr	r2, [pc, #140]	; (800615c <TIM_Base_SetConfig+0x13c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d108      	bne.n	80060e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <TIM_Base_SetConfig+0x114>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_Base_SetConfig+0xf8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a0c      	ldr	r2, [pc, #48]	; (8006144 <TIM_Base_SetConfig+0x124>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d103      	bne.n	8006120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	615a      	str	r2, [r3, #20]
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800
 8006140:	40000c00 	.word	0x40000c00
 8006144:	40010400 	.word	0x40010400
 8006148:	40014000 	.word	0x40014000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800
 8006154:	40001800 	.word	0x40001800
 8006158:	40001c00 	.word	0x40001c00
 800615c:	40002000 	.word	0x40002000

08006160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f023 0201 	bic.w	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800618a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f023 030a 	bic.w	r3, r3, #10
 800619c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061be:	b480      	push	{r7}
 80061c0:	b087      	sub	sp, #28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	031b      	lsls	r3, r3, #12
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	f043 0307 	orr.w	r3, r3, #7
 8006240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800626e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	021a      	lsls	r2, r3, #8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	431a      	orrs	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e06d      	b.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a30      	ldr	r2, [pc, #192]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d108      	bne.n	80062f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631e:	d01d      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a1d      	ldr	r2, [pc, #116]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a15      	ldr	r2, [pc, #84]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a15      	ldr	r2, [pc, #84]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10c      	bne.n	8006376 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40001800 	.word	0x40001800

080063b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e040      	b.n	8006480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fb fb8e 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2224      	movs	r2, #36	; 0x24
 8006418:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f82c 	bl	8006488 <UART_SetConfig>
 8006430:	4603      	mov	r3, r0
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e022      	b.n	8006480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa84 	bl	8006950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fb0b 	bl	8006a94 <UART_CheckIdleState>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4ba6      	ldr	r3, [pc, #664]	; (800674c <UART_SetConfig+0x2c4>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	430b      	orrs	r3, r1
 80064be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a94      	ldr	r2, [pc, #592]	; (8006750 <UART_SetConfig+0x2c8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d120      	bne.n	8006546 <UART_SetConfig+0xbe>
 8006504:	4b93      	ldr	r3, [pc, #588]	; (8006754 <UART_SetConfig+0x2cc>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b03      	cmp	r3, #3
 8006510:	d816      	bhi.n	8006540 <UART_SetConfig+0xb8>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x90>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006529 	.word	0x08006529
 800651c:	08006535 	.word	0x08006535
 8006520:	0800652f 	.word	0x0800652f
 8006524:	0800653b 	.word	0x0800653b
 8006528:	2301      	movs	r3, #1
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e150      	b.n	80067d0 <UART_SetConfig+0x348>
 800652e:	2302      	movs	r3, #2
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e14d      	b.n	80067d0 <UART_SetConfig+0x348>
 8006534:	2304      	movs	r3, #4
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e14a      	b.n	80067d0 <UART_SetConfig+0x348>
 800653a:	2308      	movs	r3, #8
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e147      	b.n	80067d0 <UART_SetConfig+0x348>
 8006540:	2310      	movs	r3, #16
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e144      	b.n	80067d0 <UART_SetConfig+0x348>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a83      	ldr	r2, [pc, #524]	; (8006758 <UART_SetConfig+0x2d0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d132      	bne.n	80065b6 <UART_SetConfig+0x12e>
 8006550:	4b80      	ldr	r3, [pc, #512]	; (8006754 <UART_SetConfig+0x2cc>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b0c      	cmp	r3, #12
 800655c:	d828      	bhi.n	80065b0 <UART_SetConfig+0x128>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0xdc>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006599 	.word	0x08006599
 8006568:	080065b1 	.word	0x080065b1
 800656c:	080065b1 	.word	0x080065b1
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065a5 	.word	0x080065a5
 8006578:	080065b1 	.word	0x080065b1
 800657c:	080065b1 	.word	0x080065b1
 8006580:	080065b1 	.word	0x080065b1
 8006584:	0800659f 	.word	0x0800659f
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065b1 	.word	0x080065b1
 8006594:	080065ab 	.word	0x080065ab
 8006598:	2300      	movs	r3, #0
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e118      	b.n	80067d0 <UART_SetConfig+0x348>
 800659e:	2302      	movs	r3, #2
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e115      	b.n	80067d0 <UART_SetConfig+0x348>
 80065a4:	2304      	movs	r3, #4
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e112      	b.n	80067d0 <UART_SetConfig+0x348>
 80065aa:	2308      	movs	r3, #8
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e10f      	b.n	80067d0 <UART_SetConfig+0x348>
 80065b0:	2310      	movs	r3, #16
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e10c      	b.n	80067d0 <UART_SetConfig+0x348>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a68      	ldr	r2, [pc, #416]	; (800675c <UART_SetConfig+0x2d4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d120      	bne.n	8006602 <UART_SetConfig+0x17a>
 80065c0:	4b64      	ldr	r3, [pc, #400]	; (8006754 <UART_SetConfig+0x2cc>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ca:	2b30      	cmp	r3, #48	; 0x30
 80065cc:	d013      	beq.n	80065f6 <UART_SetConfig+0x16e>
 80065ce:	2b30      	cmp	r3, #48	; 0x30
 80065d0:	d814      	bhi.n	80065fc <UART_SetConfig+0x174>
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d009      	beq.n	80065ea <UART_SetConfig+0x162>
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d810      	bhi.n	80065fc <UART_SetConfig+0x174>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <UART_SetConfig+0x15c>
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d006      	beq.n	80065f0 <UART_SetConfig+0x168>
 80065e2:	e00b      	b.n	80065fc <UART_SetConfig+0x174>
 80065e4:	2300      	movs	r3, #0
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e0f2      	b.n	80067d0 <UART_SetConfig+0x348>
 80065ea:	2302      	movs	r3, #2
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e0ef      	b.n	80067d0 <UART_SetConfig+0x348>
 80065f0:	2304      	movs	r3, #4
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e0ec      	b.n	80067d0 <UART_SetConfig+0x348>
 80065f6:	2308      	movs	r3, #8
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e0e9      	b.n	80067d0 <UART_SetConfig+0x348>
 80065fc:	2310      	movs	r3, #16
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e0e6      	b.n	80067d0 <UART_SetConfig+0x348>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a56      	ldr	r2, [pc, #344]	; (8006760 <UART_SetConfig+0x2d8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d120      	bne.n	800664e <UART_SetConfig+0x1c6>
 800660c:	4b51      	ldr	r3, [pc, #324]	; (8006754 <UART_SetConfig+0x2cc>)
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006616:	2bc0      	cmp	r3, #192	; 0xc0
 8006618:	d013      	beq.n	8006642 <UART_SetConfig+0x1ba>
 800661a:	2bc0      	cmp	r3, #192	; 0xc0
 800661c:	d814      	bhi.n	8006648 <UART_SetConfig+0x1c0>
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d009      	beq.n	8006636 <UART_SetConfig+0x1ae>
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d810      	bhi.n	8006648 <UART_SetConfig+0x1c0>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <UART_SetConfig+0x1a8>
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d006      	beq.n	800663c <UART_SetConfig+0x1b4>
 800662e:	e00b      	b.n	8006648 <UART_SetConfig+0x1c0>
 8006630:	2300      	movs	r3, #0
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e0cc      	b.n	80067d0 <UART_SetConfig+0x348>
 8006636:	2302      	movs	r3, #2
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e0c9      	b.n	80067d0 <UART_SetConfig+0x348>
 800663c:	2304      	movs	r3, #4
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e0c6      	b.n	80067d0 <UART_SetConfig+0x348>
 8006642:	2308      	movs	r3, #8
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e0c3      	b.n	80067d0 <UART_SetConfig+0x348>
 8006648:	2310      	movs	r3, #16
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e0c0      	b.n	80067d0 <UART_SetConfig+0x348>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a44      	ldr	r2, [pc, #272]	; (8006764 <UART_SetConfig+0x2dc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d125      	bne.n	80066a4 <UART_SetConfig+0x21c>
 8006658:	4b3e      	ldr	r3, [pc, #248]	; (8006754 <UART_SetConfig+0x2cc>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006666:	d017      	beq.n	8006698 <UART_SetConfig+0x210>
 8006668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800666c:	d817      	bhi.n	800669e <UART_SetConfig+0x216>
 800666e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006672:	d00b      	beq.n	800668c <UART_SetConfig+0x204>
 8006674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006678:	d811      	bhi.n	800669e <UART_SetConfig+0x216>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <UART_SetConfig+0x1fe>
 800667e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006682:	d006      	beq.n	8006692 <UART_SetConfig+0x20a>
 8006684:	e00b      	b.n	800669e <UART_SetConfig+0x216>
 8006686:	2300      	movs	r3, #0
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e0a1      	b.n	80067d0 <UART_SetConfig+0x348>
 800668c:	2302      	movs	r3, #2
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e09e      	b.n	80067d0 <UART_SetConfig+0x348>
 8006692:	2304      	movs	r3, #4
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e09b      	b.n	80067d0 <UART_SetConfig+0x348>
 8006698:	2308      	movs	r3, #8
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e098      	b.n	80067d0 <UART_SetConfig+0x348>
 800669e:	2310      	movs	r3, #16
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e095      	b.n	80067d0 <UART_SetConfig+0x348>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2f      	ldr	r2, [pc, #188]	; (8006768 <UART_SetConfig+0x2e0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d125      	bne.n	80066fa <UART_SetConfig+0x272>
 80066ae:	4b29      	ldr	r3, [pc, #164]	; (8006754 <UART_SetConfig+0x2cc>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066bc:	d017      	beq.n	80066ee <UART_SetConfig+0x266>
 80066be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066c2:	d817      	bhi.n	80066f4 <UART_SetConfig+0x26c>
 80066c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c8:	d00b      	beq.n	80066e2 <UART_SetConfig+0x25a>
 80066ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ce:	d811      	bhi.n	80066f4 <UART_SetConfig+0x26c>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <UART_SetConfig+0x254>
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d006      	beq.n	80066e8 <UART_SetConfig+0x260>
 80066da:	e00b      	b.n	80066f4 <UART_SetConfig+0x26c>
 80066dc:	2301      	movs	r3, #1
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e076      	b.n	80067d0 <UART_SetConfig+0x348>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e073      	b.n	80067d0 <UART_SetConfig+0x348>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e070      	b.n	80067d0 <UART_SetConfig+0x348>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e06d      	b.n	80067d0 <UART_SetConfig+0x348>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e06a      	b.n	80067d0 <UART_SetConfig+0x348>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1b      	ldr	r2, [pc, #108]	; (800676c <UART_SetConfig+0x2e4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d138      	bne.n	8006776 <UART_SetConfig+0x2ee>
 8006704:	4b13      	ldr	r3, [pc, #76]	; (8006754 <UART_SetConfig+0x2cc>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800670e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006712:	d017      	beq.n	8006744 <UART_SetConfig+0x2bc>
 8006714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006718:	d82a      	bhi.n	8006770 <UART_SetConfig+0x2e8>
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671e:	d00b      	beq.n	8006738 <UART_SetConfig+0x2b0>
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006724:	d824      	bhi.n	8006770 <UART_SetConfig+0x2e8>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <UART_SetConfig+0x2aa>
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	d006      	beq.n	800673e <UART_SetConfig+0x2b6>
 8006730:	e01e      	b.n	8006770 <UART_SetConfig+0x2e8>
 8006732:	2300      	movs	r3, #0
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e04b      	b.n	80067d0 <UART_SetConfig+0x348>
 8006738:	2302      	movs	r3, #2
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e048      	b.n	80067d0 <UART_SetConfig+0x348>
 800673e:	2304      	movs	r3, #4
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e045      	b.n	80067d0 <UART_SetConfig+0x348>
 8006744:	2308      	movs	r3, #8
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e042      	b.n	80067d0 <UART_SetConfig+0x348>
 800674a:	bf00      	nop
 800674c:	efff69f3 	.word	0xefff69f3
 8006750:	40011000 	.word	0x40011000
 8006754:	40023800 	.word	0x40023800
 8006758:	40004400 	.word	0x40004400
 800675c:	40004800 	.word	0x40004800
 8006760:	40004c00 	.word	0x40004c00
 8006764:	40005000 	.word	0x40005000
 8006768:	40011400 	.word	0x40011400
 800676c:	40007800 	.word	0x40007800
 8006770:	2310      	movs	r3, #16
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e02c      	b.n	80067d0 <UART_SetConfig+0x348>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a72      	ldr	r2, [pc, #456]	; (8006944 <UART_SetConfig+0x4bc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d125      	bne.n	80067cc <UART_SetConfig+0x344>
 8006780:	4b71      	ldr	r3, [pc, #452]	; (8006948 <UART_SetConfig+0x4c0>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800678a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800678e:	d017      	beq.n	80067c0 <UART_SetConfig+0x338>
 8006790:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006794:	d817      	bhi.n	80067c6 <UART_SetConfig+0x33e>
 8006796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679a:	d00b      	beq.n	80067b4 <UART_SetConfig+0x32c>
 800679c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a0:	d811      	bhi.n	80067c6 <UART_SetConfig+0x33e>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <UART_SetConfig+0x326>
 80067a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067aa:	d006      	beq.n	80067ba <UART_SetConfig+0x332>
 80067ac:	e00b      	b.n	80067c6 <UART_SetConfig+0x33e>
 80067ae:	2300      	movs	r3, #0
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e00d      	b.n	80067d0 <UART_SetConfig+0x348>
 80067b4:	2302      	movs	r3, #2
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e00a      	b.n	80067d0 <UART_SetConfig+0x348>
 80067ba:	2304      	movs	r3, #4
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e007      	b.n	80067d0 <UART_SetConfig+0x348>
 80067c0:	2308      	movs	r3, #8
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e004      	b.n	80067d0 <UART_SetConfig+0x348>
 80067c6:	2310      	movs	r3, #16
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e001      	b.n	80067d0 <UART_SetConfig+0x348>
 80067cc:	2310      	movs	r3, #16
 80067ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d8:	d15b      	bne.n	8006892 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067da:	7ffb      	ldrb	r3, [r7, #31]
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d828      	bhi.n	8006832 <UART_SetConfig+0x3aa>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x360>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	08006833 	.word	0x08006833
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006833 	.word	0x08006833
 8006804:	08006833 	.word	0x08006833
 8006808:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe f8d2 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 8006810:	61b8      	str	r0, [r7, #24]
        break;
 8006812:	e013      	b.n	800683c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7fe f8e2 	bl	80049dc <HAL_RCC_GetPCLK2Freq>
 8006818:	61b8      	str	r0, [r7, #24]
        break;
 800681a:	e00f      	b.n	800683c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b4b      	ldr	r3, [pc, #300]	; (800694c <UART_SetConfig+0x4c4>)
 800681e:	61bb      	str	r3, [r7, #24]
        break;
 8006820:	e00c      	b.n	800683c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fd ffb5 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8006826:	61b8      	str	r0, [r7, #24]
        break;
 8006828:	e008      	b.n	800683c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682e:	61bb      	str	r3, [r7, #24]
        break;
 8006830:	e004      	b.n	800683c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	77bb      	strb	r3, [r7, #30]
        break;
 800683a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d074      	beq.n	800692c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	005a      	lsls	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	441a      	add	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	fbb2 f3f3 	udiv	r3, r2, r3
 8006856:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b0f      	cmp	r3, #15
 800685c:	d916      	bls.n	800688c <UART_SetConfig+0x404>
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006864:	d212      	bcs.n	800688c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f023 030f 	bic.w	r3, r3, #15
 800686e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	b29b      	uxth	r3, r3
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	b29a      	uxth	r2, r3
 800687c:	89fb      	ldrh	r3, [r7, #14]
 800687e:	4313      	orrs	r3, r2
 8006880:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	89fa      	ldrh	r2, [r7, #14]
 8006888:	60da      	str	r2, [r3, #12]
 800688a:	e04f      	b.n	800692c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	77bb      	strb	r3, [r7, #30]
 8006890:	e04c      	b.n	800692c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006892:	7ffb      	ldrb	r3, [r7, #31]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d828      	bhi.n	80068ea <UART_SetConfig+0x462>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <UART_SetConfig+0x418>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	080068cd 	.word	0x080068cd
 80068a8:	080068d5 	.word	0x080068d5
 80068ac:	080068eb 	.word	0x080068eb
 80068b0:	080068db 	.word	0x080068db
 80068b4:	080068eb 	.word	0x080068eb
 80068b8:	080068eb 	.word	0x080068eb
 80068bc:	080068eb 	.word	0x080068eb
 80068c0:	080068e3 	.word	0x080068e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c4:	f7fe f876 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 80068c8:	61b8      	str	r0, [r7, #24]
        break;
 80068ca:	e013      	b.n	80068f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068cc:	f7fe f886 	bl	80049dc <HAL_RCC_GetPCLK2Freq>
 80068d0:	61b8      	str	r0, [r7, #24]
        break;
 80068d2:	e00f      	b.n	80068f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <UART_SetConfig+0x4c4>)
 80068d6:	61bb      	str	r3, [r7, #24]
        break;
 80068d8:	e00c      	b.n	80068f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068da:	f7fd ff59 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 80068de:	61b8      	str	r0, [r7, #24]
        break;
 80068e0:	e008      	b.n	80068f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e6:	61bb      	str	r3, [r7, #24]
        break;
 80068e8:	e004      	b.n	80068f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	77bb      	strb	r3, [r7, #30]
        break;
 80068f2:	bf00      	nop
    }

    if (pclk != 0U)
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d018      	beq.n	800692c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	085a      	lsrs	r2, r3, #1
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	441a      	add	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b0f      	cmp	r3, #15
 8006912:	d909      	bls.n	8006928 <UART_SetConfig+0x4a0>
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691a:	d205      	bcs.n	8006928 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	e001      	b.n	800692c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006938:	7fbb      	ldrb	r3, [r7, #30]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40007c00 	.word	0x40007c00
 8006948:	40023800 	.word	0x40023800
 800694c:	00f42400 	.word	0x00f42400

08006950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01a      	beq.n	8006a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4e:	d10a      	bne.n	8006a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	605a      	str	r2, [r3, #4]
  }
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa4:	f7fc f9dc 	bl	8002e60 <HAL_GetTick>
 8006aa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d10e      	bne.n	8006ad6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f831 	bl	8006b2e <UART_WaitOnFlagUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e027      	b.n	8006b26 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d10e      	bne.n	8006b02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f81b 	bl	8006b2e <UART_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e011      	b.n	8006b26 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b09c      	sub	sp, #112	; 0x70
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3e:	e0a7      	b.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	f000 80a3 	beq.w	8006c90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4a:	f7fc f989 	bl	8002e60 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d13f      	bne.n	8006be0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b74:	667b      	str	r3, [r7, #100]	; 0x64
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e6      	bne.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e5      	bne.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e068      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d050      	beq.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfc:	d148      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
 8006c28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e6      	bne.n	8006c08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c5a:	623a      	str	r2, [r7, #32]
 8006c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	69f9      	ldr	r1, [r7, #28]
 8006c60:	6a3a      	ldr	r2, [r7, #32]
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e5      	bne.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e010      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2301      	moveq	r3, #1
 8006ca2:	2300      	movne	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f43f af48 	beq.w	8006b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3770      	adds	r7, #112	; 0x70
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <__cvt>:
 8006cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cbc:	ed2d 8b02 	vpush	{d8}
 8006cc0:	eeb0 8b40 	vmov.f64	d8, d0
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	4617      	mov	r7, r2
 8006cc8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006cca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006ccc:	ee18 2a90 	vmov	r2, s17
 8006cd0:	f025 0520 	bic.w	r5, r5, #32
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	bfb6      	itet	lt
 8006cd8:	222d      	movlt	r2, #45	; 0x2d
 8006cda:	2200      	movge	r2, #0
 8006cdc:	eeb1 8b40 	vneglt.f64	d8, d0
 8006ce0:	2d46      	cmp	r5, #70	; 0x46
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	d004      	beq.n	8006cf2 <__cvt+0x38>
 8006ce8:	2d45      	cmp	r5, #69	; 0x45
 8006cea:	d100      	bne.n	8006cee <__cvt+0x34>
 8006cec:	3401      	adds	r4, #1
 8006cee:	2102      	movs	r1, #2
 8006cf0:	e000      	b.n	8006cf4 <__cvt+0x3a>
 8006cf2:	2103      	movs	r1, #3
 8006cf4:	ab03      	add	r3, sp, #12
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	ab02      	add	r3, sp, #8
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4633      	mov	r3, r6
 8006d00:	eeb0 0b48 	vmov.f64	d0, d8
 8006d04:	f000 fe74 	bl	80079f0 <_dtoa_r>
 8006d08:	2d47      	cmp	r5, #71	; 0x47
 8006d0a:	d101      	bne.n	8006d10 <__cvt+0x56>
 8006d0c:	07fb      	lsls	r3, r7, #31
 8006d0e:	d51a      	bpl.n	8006d46 <__cvt+0x8c>
 8006d10:	2d46      	cmp	r5, #70	; 0x46
 8006d12:	eb00 0204 	add.w	r2, r0, r4
 8006d16:	d10c      	bne.n	8006d32 <__cvt+0x78>
 8006d18:	7803      	ldrb	r3, [r0, #0]
 8006d1a:	2b30      	cmp	r3, #48	; 0x30
 8006d1c:	d107      	bne.n	8006d2e <__cvt+0x74>
 8006d1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d26:	bf1c      	itt	ne
 8006d28:	f1c4 0401 	rsbne	r4, r4, #1
 8006d2c:	6034      	strne	r4, [r6, #0]
 8006d2e:	6833      	ldr	r3, [r6, #0]
 8006d30:	441a      	add	r2, r3
 8006d32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3a:	bf08      	it	eq
 8006d3c:	9203      	streq	r2, [sp, #12]
 8006d3e:	2130      	movs	r1, #48	; 0x30
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d307      	bcc.n	8006d56 <__cvt+0x9c>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d4a:	1a1b      	subs	r3, r3, r0
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	b005      	add	sp, #20
 8006d50:	ecbd 8b02 	vpop	{d8}
 8006d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d56:	1c5c      	adds	r4, r3, #1
 8006d58:	9403      	str	r4, [sp, #12]
 8006d5a:	7019      	strb	r1, [r3, #0]
 8006d5c:	e7f0      	b.n	8006d40 <__cvt+0x86>

08006d5e <__exponent>:
 8006d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d60:	4603      	mov	r3, r0
 8006d62:	2900      	cmp	r1, #0
 8006d64:	bfb8      	it	lt
 8006d66:	4249      	neglt	r1, r1
 8006d68:	f803 2b02 	strb.w	r2, [r3], #2
 8006d6c:	bfb4      	ite	lt
 8006d6e:	222d      	movlt	r2, #45	; 0x2d
 8006d70:	222b      	movge	r2, #43	; 0x2b
 8006d72:	2909      	cmp	r1, #9
 8006d74:	7042      	strb	r2, [r0, #1]
 8006d76:	dd2a      	ble.n	8006dce <__exponent+0x70>
 8006d78:	f10d 0207 	add.w	r2, sp, #7
 8006d7c:	4617      	mov	r7, r2
 8006d7e:	260a      	movs	r6, #10
 8006d80:	4694      	mov	ip, r2
 8006d82:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d86:	fb06 1415 	mls	r4, r6, r5, r1
 8006d8a:	3430      	adds	r4, #48	; 0x30
 8006d8c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006d90:	460c      	mov	r4, r1
 8006d92:	2c63      	cmp	r4, #99	; 0x63
 8006d94:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d98:	4629      	mov	r1, r5
 8006d9a:	dcf1      	bgt.n	8006d80 <__exponent+0x22>
 8006d9c:	3130      	adds	r1, #48	; 0x30
 8006d9e:	f1ac 0402 	sub.w	r4, ip, #2
 8006da2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006da6:	1c41      	adds	r1, r0, #1
 8006da8:	4622      	mov	r2, r4
 8006daa:	42ba      	cmp	r2, r7
 8006dac:	d30a      	bcc.n	8006dc4 <__exponent+0x66>
 8006dae:	f10d 0209 	add.w	r2, sp, #9
 8006db2:	eba2 020c 	sub.w	r2, r2, ip
 8006db6:	42bc      	cmp	r4, r7
 8006db8:	bf88      	it	hi
 8006dba:	2200      	movhi	r2, #0
 8006dbc:	4413      	add	r3, r2
 8006dbe:	1a18      	subs	r0, r3, r0
 8006dc0:	b003      	add	sp, #12
 8006dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006dc8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006dcc:	e7ed      	b.n	8006daa <__exponent+0x4c>
 8006dce:	2330      	movs	r3, #48	; 0x30
 8006dd0:	3130      	adds	r1, #48	; 0x30
 8006dd2:	7083      	strb	r3, [r0, #2]
 8006dd4:	70c1      	strb	r1, [r0, #3]
 8006dd6:	1d03      	adds	r3, r0, #4
 8006dd8:	e7f1      	b.n	8006dbe <__exponent+0x60>
 8006dda:	0000      	movs	r0, r0
 8006ddc:	0000      	movs	r0, r0
	...

08006de0 <_printf_float>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	b08b      	sub	sp, #44	; 0x2c
 8006de6:	460c      	mov	r4, r1
 8006de8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006dec:	4616      	mov	r6, r2
 8006dee:	461f      	mov	r7, r3
 8006df0:	4605      	mov	r5, r0
 8006df2:	f000 fcfb 	bl	80077ec <_localeconv_r>
 8006df6:	f8d0 b000 	ldr.w	fp, [r0]
 8006dfa:	4658      	mov	r0, fp
 8006dfc:	f7f9 fa70 	bl	80002e0 <strlen>
 8006e00:	2300      	movs	r3, #0
 8006e02:	9308      	str	r3, [sp, #32]
 8006e04:	f8d8 3000 	ldr.w	r3, [r8]
 8006e08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	3307      	adds	r3, #7
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	f103 0108 	add.w	r1, r3, #8
 8006e18:	f8c8 1000 	str.w	r1, [r8]
 8006e1c:	ed93 0b00 	vldr	d0, [r3]
 8006e20:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007080 <_printf_float+0x2a0>
 8006e24:	eeb0 7bc0 	vabs.f64	d7, d0
 8006e28:	eeb4 7b46 	vcmp.f64	d7, d6
 8006e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e30:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006e34:	4682      	mov	sl, r0
 8006e36:	dd24      	ble.n	8006e82 <_printf_float+0xa2>
 8006e38:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e40:	d502      	bpl.n	8006e48 <_printf_float+0x68>
 8006e42:	232d      	movs	r3, #45	; 0x2d
 8006e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e48:	498f      	ldr	r1, [pc, #572]	; (8007088 <_printf_float+0x2a8>)
 8006e4a:	4b90      	ldr	r3, [pc, #576]	; (800708c <_printf_float+0x2ac>)
 8006e4c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e50:	bf94      	ite	ls
 8006e52:	4688      	movls	r8, r1
 8006e54:	4698      	movhi	r8, r3
 8006e56:	2303      	movs	r3, #3
 8006e58:	6123      	str	r3, [r4, #16]
 8006e5a:	f022 0204 	bic.w	r2, r2, #4
 8006e5e:	2300      	movs	r3, #0
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	9700      	str	r7, [sp, #0]
 8006e66:	4633      	mov	r3, r6
 8006e68:	aa09      	add	r2, sp, #36	; 0x24
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 f9d1 	bl	8007214 <_printf_common>
 8006e72:	3001      	adds	r0, #1
 8006e74:	f040 808a 	bne.w	8006f8c <_printf_float+0x1ac>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	b00b      	add	sp, #44	; 0x2c
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	eeb4 0b40 	vcmp.f64	d0, d0
 8006e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8a:	d709      	bvc.n	8006ea0 <_printf_float+0xc0>
 8006e8c:	ee10 3a90 	vmov	r3, s1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bfbc      	itt	lt
 8006e94:	232d      	movlt	r3, #45	; 0x2d
 8006e96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e9a:	497d      	ldr	r1, [pc, #500]	; (8007090 <_printf_float+0x2b0>)
 8006e9c:	4b7d      	ldr	r3, [pc, #500]	; (8007094 <_printf_float+0x2b4>)
 8006e9e:	e7d5      	b.n	8006e4c <_printf_float+0x6c>
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006ea6:	9104      	str	r1, [sp, #16]
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	d13c      	bne.n	8006f26 <_printf_float+0x146>
 8006eac:	2306      	movs	r3, #6
 8006eae:	6063      	str	r3, [r4, #4]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	ab08      	add	r3, sp, #32
 8006eb6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006eba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ebe:	ab07      	add	r3, sp, #28
 8006ec0:	6861      	ldr	r1, [r4, #4]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	6022      	str	r2, [r4, #0]
 8006ec6:	f10d 031b 	add.w	r3, sp, #27
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7ff fef5 	bl	8006cba <__cvt>
 8006ed0:	9b04      	ldr	r3, [sp, #16]
 8006ed2:	9907      	ldr	r1, [sp, #28]
 8006ed4:	2b47      	cmp	r3, #71	; 0x47
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	d108      	bne.n	8006eec <_printf_float+0x10c>
 8006eda:	1cc8      	adds	r0, r1, #3
 8006edc:	db02      	blt.n	8006ee4 <_printf_float+0x104>
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	dd41      	ble.n	8006f68 <_printf_float+0x188>
 8006ee4:	f1a9 0902 	sub.w	r9, r9, #2
 8006ee8:	fa5f f989 	uxtb.w	r9, r9
 8006eec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ef0:	d820      	bhi.n	8006f34 <_printf_float+0x154>
 8006ef2:	3901      	subs	r1, #1
 8006ef4:	464a      	mov	r2, r9
 8006ef6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006efa:	9107      	str	r1, [sp, #28]
 8006efc:	f7ff ff2f 	bl	8006d5e <__exponent>
 8006f00:	9a08      	ldr	r2, [sp, #32]
 8006f02:	9004      	str	r0, [sp, #16]
 8006f04:	1813      	adds	r3, r2, r0
 8006f06:	2a01      	cmp	r2, #1
 8006f08:	6123      	str	r3, [r4, #16]
 8006f0a:	dc02      	bgt.n	8006f12 <_printf_float+0x132>
 8006f0c:	6822      	ldr	r2, [r4, #0]
 8006f0e:	07d2      	lsls	r2, r2, #31
 8006f10:	d501      	bpl.n	8006f16 <_printf_float+0x136>
 8006f12:	3301      	adds	r3, #1
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0a2      	beq.n	8006e64 <_printf_float+0x84>
 8006f1e:	232d      	movs	r3, #45	; 0x2d
 8006f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f24:	e79e      	b.n	8006e64 <_printf_float+0x84>
 8006f26:	9904      	ldr	r1, [sp, #16]
 8006f28:	2947      	cmp	r1, #71	; 0x47
 8006f2a:	d1c1      	bne.n	8006eb0 <_printf_float+0xd0>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1bf      	bne.n	8006eb0 <_printf_float+0xd0>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e7bc      	b.n	8006eae <_printf_float+0xce>
 8006f34:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006f38:	d118      	bne.n	8006f6c <_printf_float+0x18c>
 8006f3a:	2900      	cmp	r1, #0
 8006f3c:	6863      	ldr	r3, [r4, #4]
 8006f3e:	dd0b      	ble.n	8006f58 <_printf_float+0x178>
 8006f40:	6121      	str	r1, [r4, #16]
 8006f42:	b913      	cbnz	r3, 8006f4a <_printf_float+0x16a>
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	07d0      	lsls	r0, r2, #31
 8006f48:	d502      	bpl.n	8006f50 <_printf_float+0x170>
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	440b      	add	r3, r1
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	2300      	movs	r3, #0
 8006f52:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	e7de      	b.n	8006f16 <_printf_float+0x136>
 8006f58:	b913      	cbnz	r3, 8006f60 <_printf_float+0x180>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	07d2      	lsls	r2, r2, #31
 8006f5e:	d501      	bpl.n	8006f64 <_printf_float+0x184>
 8006f60:	3302      	adds	r3, #2
 8006f62:	e7f4      	b.n	8006f4e <_printf_float+0x16e>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e7f2      	b.n	8006f4e <_printf_float+0x16e>
 8006f68:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006f6c:	9b08      	ldr	r3, [sp, #32]
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	db05      	blt.n	8006f7e <_printf_float+0x19e>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	6121      	str	r1, [r4, #16]
 8006f76:	07d8      	lsls	r0, r3, #31
 8006f78:	d5ea      	bpl.n	8006f50 <_printf_float+0x170>
 8006f7a:	1c4b      	adds	r3, r1, #1
 8006f7c:	e7e7      	b.n	8006f4e <_printf_float+0x16e>
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	bfd4      	ite	le
 8006f82:	f1c1 0202 	rsble	r2, r1, #2
 8006f86:	2201      	movgt	r2, #1
 8006f88:	4413      	add	r3, r2
 8006f8a:	e7e0      	b.n	8006f4e <_printf_float+0x16e>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	055a      	lsls	r2, r3, #21
 8006f90:	d407      	bmi.n	8006fa2 <_printf_float+0x1c2>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	4642      	mov	r2, r8
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d12a      	bne.n	8006ff6 <_printf_float+0x216>
 8006fa0:	e76a      	b.n	8006e78 <_printf_float+0x98>
 8006fa2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fa6:	f240 80e0 	bls.w	800716a <_printf_float+0x38a>
 8006faa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006fae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb6:	d133      	bne.n	8007020 <_printf_float+0x240>
 8006fb8:	4a37      	ldr	r2, [pc, #220]	; (8007098 <_printf_float+0x2b8>)
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f af58 	beq.w	8006e78 <_printf_float+0x98>
 8006fc8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	db02      	blt.n	8006fd6 <_printf_float+0x1f6>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	07d8      	lsls	r0, r3, #31
 8006fd4:	d50f      	bpl.n	8006ff6 <_printf_float+0x216>
 8006fd6:	4653      	mov	r3, sl
 8006fd8:	465a      	mov	r2, fp
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f43f af49 	beq.w	8006e78 <_printf_float+0x98>
 8006fe6:	f04f 0800 	mov.w	r8, #0
 8006fea:	f104 091a 	add.w	r9, r4, #26
 8006fee:	9b08      	ldr	r3, [sp, #32]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	4543      	cmp	r3, r8
 8006ff4:	dc09      	bgt.n	800700a <_printf_float+0x22a>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	079b      	lsls	r3, r3, #30
 8006ffa:	f100 8106 	bmi.w	800720a <_printf_float+0x42a>
 8006ffe:	68e0      	ldr	r0, [r4, #12]
 8007000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007002:	4298      	cmp	r0, r3
 8007004:	bfb8      	it	lt
 8007006:	4618      	movlt	r0, r3
 8007008:	e738      	b.n	8006e7c <_printf_float+0x9c>
 800700a:	2301      	movs	r3, #1
 800700c:	464a      	mov	r2, r9
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f af2f 	beq.w	8006e78 <_printf_float+0x98>
 800701a:	f108 0801 	add.w	r8, r8, #1
 800701e:	e7e6      	b.n	8006fee <_printf_float+0x20e>
 8007020:	9b07      	ldr	r3, [sp, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	dc3a      	bgt.n	800709c <_printf_float+0x2bc>
 8007026:	4a1c      	ldr	r2, [pc, #112]	; (8007098 <_printf_float+0x2b8>)
 8007028:	2301      	movs	r3, #1
 800702a:	4631      	mov	r1, r6
 800702c:	4628      	mov	r0, r5
 800702e:	47b8      	blx	r7
 8007030:	3001      	adds	r0, #1
 8007032:	f43f af21 	beq.w	8006e78 <_printf_float+0x98>
 8007036:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800703a:	4313      	orrs	r3, r2
 800703c:	d102      	bne.n	8007044 <_printf_float+0x264>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	07d9      	lsls	r1, r3, #31
 8007042:	d5d8      	bpl.n	8006ff6 <_printf_float+0x216>
 8007044:	4653      	mov	r3, sl
 8007046:	465a      	mov	r2, fp
 8007048:	4631      	mov	r1, r6
 800704a:	4628      	mov	r0, r5
 800704c:	47b8      	blx	r7
 800704e:	3001      	adds	r0, #1
 8007050:	f43f af12 	beq.w	8006e78 <_printf_float+0x98>
 8007054:	f04f 0900 	mov.w	r9, #0
 8007058:	f104 0a1a 	add.w	sl, r4, #26
 800705c:	9b07      	ldr	r3, [sp, #28]
 800705e:	425b      	negs	r3, r3
 8007060:	454b      	cmp	r3, r9
 8007062:	dc01      	bgt.n	8007068 <_printf_float+0x288>
 8007064:	9b08      	ldr	r3, [sp, #32]
 8007066:	e795      	b.n	8006f94 <_printf_float+0x1b4>
 8007068:	2301      	movs	r3, #1
 800706a:	4652      	mov	r2, sl
 800706c:	4631      	mov	r1, r6
 800706e:	4628      	mov	r0, r5
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f af00 	beq.w	8006e78 <_printf_float+0x98>
 8007078:	f109 0901 	add.w	r9, r9, #1
 800707c:	e7ee      	b.n	800705c <_printf_float+0x27c>
 800707e:	bf00      	nop
 8007080:	ffffffff 	.word	0xffffffff
 8007084:	7fefffff 	.word	0x7fefffff
 8007088:	0802fcc0 	.word	0x0802fcc0
 800708c:	0802fcc4 	.word	0x0802fcc4
 8007090:	0802fcc8 	.word	0x0802fcc8
 8007094:	0802fccc 	.word	0x0802fccc
 8007098:	0802fefb 	.word	0x0802fefb
 800709c:	9a08      	ldr	r2, [sp, #32]
 800709e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070a0:	429a      	cmp	r2, r3
 80070a2:	bfa8      	it	ge
 80070a4:	461a      	movge	r2, r3
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	4691      	mov	r9, r2
 80070aa:	dc38      	bgt.n	800711e <_printf_float+0x33e>
 80070ac:	2300      	movs	r3, #0
 80070ae:	9305      	str	r3, [sp, #20]
 80070b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070b4:	f104 021a 	add.w	r2, r4, #26
 80070b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ba:	9905      	ldr	r1, [sp, #20]
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	eba3 0309 	sub.w	r3, r3, r9
 80070c2:	428b      	cmp	r3, r1
 80070c4:	dc33      	bgt.n	800712e <_printf_float+0x34e>
 80070c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	db3c      	blt.n	8007148 <_printf_float+0x368>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	07da      	lsls	r2, r3, #31
 80070d2:	d439      	bmi.n	8007148 <_printf_float+0x368>
 80070d4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80070d8:	eba2 0903 	sub.w	r9, r2, r3
 80070dc:	9b04      	ldr	r3, [sp, #16]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	4591      	cmp	r9, r2
 80070e2:	bfa8      	it	ge
 80070e4:	4691      	movge	r9, r2
 80070e6:	f1b9 0f00 	cmp.w	r9, #0
 80070ea:	dc35      	bgt.n	8007158 <_printf_float+0x378>
 80070ec:	f04f 0800 	mov.w	r8, #0
 80070f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f4:	f104 0a1a 	add.w	sl, r4, #26
 80070f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	eba3 0309 	sub.w	r3, r3, r9
 8007102:	4543      	cmp	r3, r8
 8007104:	f77f af77 	ble.w	8006ff6 <_printf_float+0x216>
 8007108:	2301      	movs	r3, #1
 800710a:	4652      	mov	r2, sl
 800710c:	4631      	mov	r1, r6
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	f43f aeb0 	beq.w	8006e78 <_printf_float+0x98>
 8007118:	f108 0801 	add.w	r8, r8, #1
 800711c:	e7ec      	b.n	80070f8 <_printf_float+0x318>
 800711e:	4613      	mov	r3, r2
 8007120:	4631      	mov	r1, r6
 8007122:	4642      	mov	r2, r8
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	d1bf      	bne.n	80070ac <_printf_float+0x2cc>
 800712c:	e6a4      	b.n	8006e78 <_printf_float+0x98>
 800712e:	2301      	movs	r3, #1
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	9204      	str	r2, [sp, #16]
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f ae9d 	beq.w	8006e78 <_printf_float+0x98>
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	9a04      	ldr	r2, [sp, #16]
 8007142:	3301      	adds	r3, #1
 8007144:	9305      	str	r3, [sp, #20]
 8007146:	e7b7      	b.n	80070b8 <_printf_float+0x2d8>
 8007148:	4653      	mov	r3, sl
 800714a:	465a      	mov	r2, fp
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	d1be      	bne.n	80070d4 <_printf_float+0x2f4>
 8007156:	e68f      	b.n	8006e78 <_printf_float+0x98>
 8007158:	9a04      	ldr	r2, [sp, #16]
 800715a:	464b      	mov	r3, r9
 800715c:	4442      	add	r2, r8
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	d1c1      	bne.n	80070ec <_printf_float+0x30c>
 8007168:	e686      	b.n	8006e78 <_printf_float+0x98>
 800716a:	9a08      	ldr	r2, [sp, #32]
 800716c:	2a01      	cmp	r2, #1
 800716e:	dc01      	bgt.n	8007174 <_printf_float+0x394>
 8007170:	07db      	lsls	r3, r3, #31
 8007172:	d537      	bpl.n	80071e4 <_printf_float+0x404>
 8007174:	2301      	movs	r3, #1
 8007176:	4642      	mov	r2, r8
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f ae7a 	beq.w	8006e78 <_printf_float+0x98>
 8007184:	4653      	mov	r3, sl
 8007186:	465a      	mov	r2, fp
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f43f ae72 	beq.w	8006e78 <_printf_float+0x98>
 8007194:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007198:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	d01a      	beq.n	80071da <_printf_float+0x3fa>
 80071a4:	3b01      	subs	r3, #1
 80071a6:	f108 0201 	add.w	r2, r8, #1
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	d10e      	bne.n	80071d2 <_printf_float+0x3f2>
 80071b4:	e660      	b.n	8006e78 <_printf_float+0x98>
 80071b6:	2301      	movs	r3, #1
 80071b8:	464a      	mov	r2, r9
 80071ba:	4631      	mov	r1, r6
 80071bc:	4628      	mov	r0, r5
 80071be:	47b8      	blx	r7
 80071c0:	3001      	adds	r0, #1
 80071c2:	f43f ae59 	beq.w	8006e78 <_printf_float+0x98>
 80071c6:	f108 0801 	add.w	r8, r8, #1
 80071ca:	9b08      	ldr	r3, [sp, #32]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	4543      	cmp	r3, r8
 80071d0:	dcf1      	bgt.n	80071b6 <_printf_float+0x3d6>
 80071d2:	9b04      	ldr	r3, [sp, #16]
 80071d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071d8:	e6dd      	b.n	8006f96 <_printf_float+0x1b6>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	f104 091a 	add.w	r9, r4, #26
 80071e2:	e7f2      	b.n	80071ca <_printf_float+0x3ea>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4642      	mov	r2, r8
 80071e8:	e7df      	b.n	80071aa <_printf_float+0x3ca>
 80071ea:	2301      	movs	r3, #1
 80071ec:	464a      	mov	r2, r9
 80071ee:	4631      	mov	r1, r6
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b8      	blx	r7
 80071f4:	3001      	adds	r0, #1
 80071f6:	f43f ae3f 	beq.w	8006e78 <_printf_float+0x98>
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	68e3      	ldr	r3, [r4, #12]
 8007200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007202:	1a5b      	subs	r3, r3, r1
 8007204:	4543      	cmp	r3, r8
 8007206:	dcf0      	bgt.n	80071ea <_printf_float+0x40a>
 8007208:	e6f9      	b.n	8006ffe <_printf_float+0x21e>
 800720a:	f04f 0800 	mov.w	r8, #0
 800720e:	f104 0919 	add.w	r9, r4, #25
 8007212:	e7f4      	b.n	80071fe <_printf_float+0x41e>

08007214 <_printf_common>:
 8007214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007218:	4616      	mov	r6, r2
 800721a:	4699      	mov	r9, r3
 800721c:	688a      	ldr	r2, [r1, #8]
 800721e:	690b      	ldr	r3, [r1, #16]
 8007220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007224:	4293      	cmp	r3, r2
 8007226:	bfb8      	it	lt
 8007228:	4613      	movlt	r3, r2
 800722a:	6033      	str	r3, [r6, #0]
 800722c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007230:	4607      	mov	r7, r0
 8007232:	460c      	mov	r4, r1
 8007234:	b10a      	cbz	r2, 800723a <_printf_common+0x26>
 8007236:	3301      	adds	r3, #1
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	0699      	lsls	r1, r3, #26
 800723e:	bf42      	ittt	mi
 8007240:	6833      	ldrmi	r3, [r6, #0]
 8007242:	3302      	addmi	r3, #2
 8007244:	6033      	strmi	r3, [r6, #0]
 8007246:	6825      	ldr	r5, [r4, #0]
 8007248:	f015 0506 	ands.w	r5, r5, #6
 800724c:	d106      	bne.n	800725c <_printf_common+0x48>
 800724e:	f104 0a19 	add.w	sl, r4, #25
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	6832      	ldr	r2, [r6, #0]
 8007256:	1a9b      	subs	r3, r3, r2
 8007258:	42ab      	cmp	r3, r5
 800725a:	dc26      	bgt.n	80072aa <_printf_common+0x96>
 800725c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007260:	1e13      	subs	r3, r2, #0
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	bf18      	it	ne
 8007266:	2301      	movne	r3, #1
 8007268:	0692      	lsls	r2, r2, #26
 800726a:	d42b      	bmi.n	80072c4 <_printf_common+0xb0>
 800726c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007270:	4649      	mov	r1, r9
 8007272:	4638      	mov	r0, r7
 8007274:	47c0      	blx	r8
 8007276:	3001      	adds	r0, #1
 8007278:	d01e      	beq.n	80072b8 <_printf_common+0xa4>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	6922      	ldr	r2, [r4, #16]
 800727e:	f003 0306 	and.w	r3, r3, #6
 8007282:	2b04      	cmp	r3, #4
 8007284:	bf02      	ittt	eq
 8007286:	68e5      	ldreq	r5, [r4, #12]
 8007288:	6833      	ldreq	r3, [r6, #0]
 800728a:	1aed      	subeq	r5, r5, r3
 800728c:	68a3      	ldr	r3, [r4, #8]
 800728e:	bf0c      	ite	eq
 8007290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007294:	2500      	movne	r5, #0
 8007296:	4293      	cmp	r3, r2
 8007298:	bfc4      	itt	gt
 800729a:	1a9b      	subgt	r3, r3, r2
 800729c:	18ed      	addgt	r5, r5, r3
 800729e:	2600      	movs	r6, #0
 80072a0:	341a      	adds	r4, #26
 80072a2:	42b5      	cmp	r5, r6
 80072a4:	d11a      	bne.n	80072dc <_printf_common+0xc8>
 80072a6:	2000      	movs	r0, #0
 80072a8:	e008      	b.n	80072bc <_printf_common+0xa8>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4652      	mov	r2, sl
 80072ae:	4649      	mov	r1, r9
 80072b0:	4638      	mov	r0, r7
 80072b2:	47c0      	blx	r8
 80072b4:	3001      	adds	r0, #1
 80072b6:	d103      	bne.n	80072c0 <_printf_common+0xac>
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c0:	3501      	adds	r5, #1
 80072c2:	e7c6      	b.n	8007252 <_printf_common+0x3e>
 80072c4:	18e1      	adds	r1, r4, r3
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	2030      	movs	r0, #48	; 0x30
 80072ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ce:	4422      	add	r2, r4
 80072d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072d8:	3302      	adds	r3, #2
 80072da:	e7c7      	b.n	800726c <_printf_common+0x58>
 80072dc:	2301      	movs	r3, #1
 80072de:	4622      	mov	r2, r4
 80072e0:	4649      	mov	r1, r9
 80072e2:	4638      	mov	r0, r7
 80072e4:	47c0      	blx	r8
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0e6      	beq.n	80072b8 <_printf_common+0xa4>
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7d9      	b.n	80072a2 <_printf_common+0x8e>
	...

080072f0 <_printf_i>:
 80072f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	7e0f      	ldrb	r7, [r1, #24]
 80072f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072f8:	2f78      	cmp	r7, #120	; 0x78
 80072fa:	4691      	mov	r9, r2
 80072fc:	4680      	mov	r8, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	469a      	mov	sl, r3
 8007302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007306:	d807      	bhi.n	8007318 <_printf_i+0x28>
 8007308:	2f62      	cmp	r7, #98	; 0x62
 800730a:	d80a      	bhi.n	8007322 <_printf_i+0x32>
 800730c:	2f00      	cmp	r7, #0
 800730e:	f000 80d4 	beq.w	80074ba <_printf_i+0x1ca>
 8007312:	2f58      	cmp	r7, #88	; 0x58
 8007314:	f000 80c0 	beq.w	8007498 <_printf_i+0x1a8>
 8007318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800731c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007320:	e03a      	b.n	8007398 <_printf_i+0xa8>
 8007322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007326:	2b15      	cmp	r3, #21
 8007328:	d8f6      	bhi.n	8007318 <_printf_i+0x28>
 800732a:	a101      	add	r1, pc, #4	; (adr r1, 8007330 <_printf_i+0x40>)
 800732c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007330:	08007389 	.word	0x08007389
 8007334:	0800739d 	.word	0x0800739d
 8007338:	08007319 	.word	0x08007319
 800733c:	08007319 	.word	0x08007319
 8007340:	08007319 	.word	0x08007319
 8007344:	08007319 	.word	0x08007319
 8007348:	0800739d 	.word	0x0800739d
 800734c:	08007319 	.word	0x08007319
 8007350:	08007319 	.word	0x08007319
 8007354:	08007319 	.word	0x08007319
 8007358:	08007319 	.word	0x08007319
 800735c:	080074a1 	.word	0x080074a1
 8007360:	080073c9 	.word	0x080073c9
 8007364:	0800745b 	.word	0x0800745b
 8007368:	08007319 	.word	0x08007319
 800736c:	08007319 	.word	0x08007319
 8007370:	080074c3 	.word	0x080074c3
 8007374:	08007319 	.word	0x08007319
 8007378:	080073c9 	.word	0x080073c9
 800737c:	08007319 	.word	0x08007319
 8007380:	08007319 	.word	0x08007319
 8007384:	08007463 	.word	0x08007463
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	1d1a      	adds	r2, r3, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	602a      	str	r2, [r5, #0]
 8007390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007398:	2301      	movs	r3, #1
 800739a:	e09f      	b.n	80074dc <_printf_i+0x1ec>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	0607      	lsls	r7, r0, #24
 80073a2:	f103 0104 	add.w	r1, r3, #4
 80073a6:	6029      	str	r1, [r5, #0]
 80073a8:	d501      	bpl.n	80073ae <_printf_i+0xbe>
 80073aa:	681e      	ldr	r6, [r3, #0]
 80073ac:	e003      	b.n	80073b6 <_printf_i+0xc6>
 80073ae:	0646      	lsls	r6, r0, #25
 80073b0:	d5fb      	bpl.n	80073aa <_printf_i+0xba>
 80073b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	da03      	bge.n	80073c2 <_printf_i+0xd2>
 80073ba:	232d      	movs	r3, #45	; 0x2d
 80073bc:	4276      	negs	r6, r6
 80073be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c2:	485a      	ldr	r0, [pc, #360]	; (800752c <_printf_i+0x23c>)
 80073c4:	230a      	movs	r3, #10
 80073c6:	e012      	b.n	80073ee <_printf_i+0xfe>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	6820      	ldr	r0, [r4, #0]
 80073cc:	1d19      	adds	r1, r3, #4
 80073ce:	6029      	str	r1, [r5, #0]
 80073d0:	0605      	lsls	r5, r0, #24
 80073d2:	d501      	bpl.n	80073d8 <_printf_i+0xe8>
 80073d4:	681e      	ldr	r6, [r3, #0]
 80073d6:	e002      	b.n	80073de <_printf_i+0xee>
 80073d8:	0641      	lsls	r1, r0, #25
 80073da:	d5fb      	bpl.n	80073d4 <_printf_i+0xe4>
 80073dc:	881e      	ldrh	r6, [r3, #0]
 80073de:	4853      	ldr	r0, [pc, #332]	; (800752c <_printf_i+0x23c>)
 80073e0:	2f6f      	cmp	r7, #111	; 0x6f
 80073e2:	bf0c      	ite	eq
 80073e4:	2308      	moveq	r3, #8
 80073e6:	230a      	movne	r3, #10
 80073e8:	2100      	movs	r1, #0
 80073ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ee:	6865      	ldr	r5, [r4, #4]
 80073f0:	60a5      	str	r5, [r4, #8]
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	bfa2      	ittt	ge
 80073f6:	6821      	ldrge	r1, [r4, #0]
 80073f8:	f021 0104 	bicge.w	r1, r1, #4
 80073fc:	6021      	strge	r1, [r4, #0]
 80073fe:	b90e      	cbnz	r6, 8007404 <_printf_i+0x114>
 8007400:	2d00      	cmp	r5, #0
 8007402:	d04b      	beq.n	800749c <_printf_i+0x1ac>
 8007404:	4615      	mov	r5, r2
 8007406:	fbb6 f1f3 	udiv	r1, r6, r3
 800740a:	fb03 6711 	mls	r7, r3, r1, r6
 800740e:	5dc7      	ldrb	r7, [r0, r7]
 8007410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007414:	4637      	mov	r7, r6
 8007416:	42bb      	cmp	r3, r7
 8007418:	460e      	mov	r6, r1
 800741a:	d9f4      	bls.n	8007406 <_printf_i+0x116>
 800741c:	2b08      	cmp	r3, #8
 800741e:	d10b      	bne.n	8007438 <_printf_i+0x148>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	07de      	lsls	r6, r3, #31
 8007424:	d508      	bpl.n	8007438 <_printf_i+0x148>
 8007426:	6923      	ldr	r3, [r4, #16]
 8007428:	6861      	ldr	r1, [r4, #4]
 800742a:	4299      	cmp	r1, r3
 800742c:	bfde      	ittt	le
 800742e:	2330      	movle	r3, #48	; 0x30
 8007430:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007434:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007438:	1b52      	subs	r2, r2, r5
 800743a:	6122      	str	r2, [r4, #16]
 800743c:	f8cd a000 	str.w	sl, [sp]
 8007440:	464b      	mov	r3, r9
 8007442:	aa03      	add	r2, sp, #12
 8007444:	4621      	mov	r1, r4
 8007446:	4640      	mov	r0, r8
 8007448:	f7ff fee4 	bl	8007214 <_printf_common>
 800744c:	3001      	adds	r0, #1
 800744e:	d14a      	bne.n	80074e6 <_printf_i+0x1f6>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	b004      	add	sp, #16
 8007456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	f043 0320 	orr.w	r3, r3, #32
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	4833      	ldr	r0, [pc, #204]	; (8007530 <_printf_i+0x240>)
 8007464:	2778      	movs	r7, #120	; 0x78
 8007466:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	6829      	ldr	r1, [r5, #0]
 800746e:	061f      	lsls	r7, r3, #24
 8007470:	f851 6b04 	ldr.w	r6, [r1], #4
 8007474:	d402      	bmi.n	800747c <_printf_i+0x18c>
 8007476:	065f      	lsls	r7, r3, #25
 8007478:	bf48      	it	mi
 800747a:	b2b6      	uxthmi	r6, r6
 800747c:	07df      	lsls	r7, r3, #31
 800747e:	bf48      	it	mi
 8007480:	f043 0320 	orrmi.w	r3, r3, #32
 8007484:	6029      	str	r1, [r5, #0]
 8007486:	bf48      	it	mi
 8007488:	6023      	strmi	r3, [r4, #0]
 800748a:	b91e      	cbnz	r6, 8007494 <_printf_i+0x1a4>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	f023 0320 	bic.w	r3, r3, #32
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	2310      	movs	r3, #16
 8007496:	e7a7      	b.n	80073e8 <_printf_i+0xf8>
 8007498:	4824      	ldr	r0, [pc, #144]	; (800752c <_printf_i+0x23c>)
 800749a:	e7e4      	b.n	8007466 <_printf_i+0x176>
 800749c:	4615      	mov	r5, r2
 800749e:	e7bd      	b.n	800741c <_printf_i+0x12c>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	6826      	ldr	r6, [r4, #0]
 80074a4:	6961      	ldr	r1, [r4, #20]
 80074a6:	1d18      	adds	r0, r3, #4
 80074a8:	6028      	str	r0, [r5, #0]
 80074aa:	0635      	lsls	r5, r6, #24
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	d501      	bpl.n	80074b4 <_printf_i+0x1c4>
 80074b0:	6019      	str	r1, [r3, #0]
 80074b2:	e002      	b.n	80074ba <_printf_i+0x1ca>
 80074b4:	0670      	lsls	r0, r6, #25
 80074b6:	d5fb      	bpl.n	80074b0 <_printf_i+0x1c0>
 80074b8:	8019      	strh	r1, [r3, #0]
 80074ba:	2300      	movs	r3, #0
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	4615      	mov	r5, r2
 80074c0:	e7bc      	b.n	800743c <_printf_i+0x14c>
 80074c2:	682b      	ldr	r3, [r5, #0]
 80074c4:	1d1a      	adds	r2, r3, #4
 80074c6:	602a      	str	r2, [r5, #0]
 80074c8:	681d      	ldr	r5, [r3, #0]
 80074ca:	6862      	ldr	r2, [r4, #4]
 80074cc:	2100      	movs	r1, #0
 80074ce:	4628      	mov	r0, r5
 80074d0:	f7f8 feb6 	bl	8000240 <memchr>
 80074d4:	b108      	cbz	r0, 80074da <_printf_i+0x1ea>
 80074d6:	1b40      	subs	r0, r0, r5
 80074d8:	6060      	str	r0, [r4, #4]
 80074da:	6863      	ldr	r3, [r4, #4]
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	2300      	movs	r3, #0
 80074e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e4:	e7aa      	b.n	800743c <_printf_i+0x14c>
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	462a      	mov	r2, r5
 80074ea:	4649      	mov	r1, r9
 80074ec:	4640      	mov	r0, r8
 80074ee:	47d0      	blx	sl
 80074f0:	3001      	adds	r0, #1
 80074f2:	d0ad      	beq.n	8007450 <_printf_i+0x160>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	079b      	lsls	r3, r3, #30
 80074f8:	d413      	bmi.n	8007522 <_printf_i+0x232>
 80074fa:	68e0      	ldr	r0, [r4, #12]
 80074fc:	9b03      	ldr	r3, [sp, #12]
 80074fe:	4298      	cmp	r0, r3
 8007500:	bfb8      	it	lt
 8007502:	4618      	movlt	r0, r3
 8007504:	e7a6      	b.n	8007454 <_printf_i+0x164>
 8007506:	2301      	movs	r3, #1
 8007508:	4632      	mov	r2, r6
 800750a:	4649      	mov	r1, r9
 800750c:	4640      	mov	r0, r8
 800750e:	47d0      	blx	sl
 8007510:	3001      	adds	r0, #1
 8007512:	d09d      	beq.n	8007450 <_printf_i+0x160>
 8007514:	3501      	adds	r5, #1
 8007516:	68e3      	ldr	r3, [r4, #12]
 8007518:	9903      	ldr	r1, [sp, #12]
 800751a:	1a5b      	subs	r3, r3, r1
 800751c:	42ab      	cmp	r3, r5
 800751e:	dcf2      	bgt.n	8007506 <_printf_i+0x216>
 8007520:	e7eb      	b.n	80074fa <_printf_i+0x20a>
 8007522:	2500      	movs	r5, #0
 8007524:	f104 0619 	add.w	r6, r4, #25
 8007528:	e7f5      	b.n	8007516 <_printf_i+0x226>
 800752a:	bf00      	nop
 800752c:	0802fcd0 	.word	0x0802fcd0
 8007530:	0802fce1 	.word	0x0802fce1

08007534 <std>:
 8007534:	2300      	movs	r3, #0
 8007536:	b510      	push	{r4, lr}
 8007538:	4604      	mov	r4, r0
 800753a:	e9c0 3300 	strd	r3, r3, [r0]
 800753e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007542:	6083      	str	r3, [r0, #8]
 8007544:	8181      	strh	r1, [r0, #12]
 8007546:	6643      	str	r3, [r0, #100]	; 0x64
 8007548:	81c2      	strh	r2, [r0, #14]
 800754a:	6183      	str	r3, [r0, #24]
 800754c:	4619      	mov	r1, r3
 800754e:	2208      	movs	r2, #8
 8007550:	305c      	adds	r0, #92	; 0x5c
 8007552:	f000 f942 	bl	80077da <memset>
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <std+0x58>)
 8007558:	6263      	str	r3, [r4, #36]	; 0x24
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <std+0x5c>)
 800755c:	62a3      	str	r3, [r4, #40]	; 0x28
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <std+0x60>)
 8007560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007562:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <std+0x64>)
 8007564:	6323      	str	r3, [r4, #48]	; 0x30
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <std+0x68>)
 8007568:	6224      	str	r4, [r4, #32]
 800756a:	429c      	cmp	r4, r3
 800756c:	d006      	beq.n	800757c <std+0x48>
 800756e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007572:	4294      	cmp	r4, r2
 8007574:	d002      	beq.n	800757c <std+0x48>
 8007576:	33d0      	adds	r3, #208	; 0xd0
 8007578:	429c      	cmp	r4, r3
 800757a:	d105      	bne.n	8007588 <std+0x54>
 800757c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007584:	f000 b9a6 	b.w	80078d4 <__retarget_lock_init_recursive>
 8007588:	bd10      	pop	{r4, pc}
 800758a:	bf00      	nop
 800758c:	08007751 	.word	0x08007751
 8007590:	08007777 	.word	0x08007777
 8007594:	080077af 	.word	0x080077af
 8007598:	080077d3 	.word	0x080077d3
 800759c:	200005f8 	.word	0x200005f8

080075a0 <stdio_exit_handler>:
 80075a0:	4a02      	ldr	r2, [pc, #8]	; (80075ac <stdio_exit_handler+0xc>)
 80075a2:	4903      	ldr	r1, [pc, #12]	; (80075b0 <stdio_exit_handler+0x10>)
 80075a4:	4803      	ldr	r0, [pc, #12]	; (80075b4 <stdio_exit_handler+0x14>)
 80075a6:	f000 b869 	b.w	800767c <_fwalk_sglue>
 80075aa:	bf00      	nop
 80075ac:	20000010 	.word	0x20000010
 80075b0:	080097bd 	.word	0x080097bd
 80075b4:	2000001c 	.word	0x2000001c

080075b8 <cleanup_stdio>:
 80075b8:	6841      	ldr	r1, [r0, #4]
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <cleanup_stdio+0x34>)
 80075bc:	4299      	cmp	r1, r3
 80075be:	b510      	push	{r4, lr}
 80075c0:	4604      	mov	r4, r0
 80075c2:	d001      	beq.n	80075c8 <cleanup_stdio+0x10>
 80075c4:	f002 f8fa 	bl	80097bc <_fflush_r>
 80075c8:	68a1      	ldr	r1, [r4, #8]
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <cleanup_stdio+0x38>)
 80075cc:	4299      	cmp	r1, r3
 80075ce:	d002      	beq.n	80075d6 <cleanup_stdio+0x1e>
 80075d0:	4620      	mov	r0, r4
 80075d2:	f002 f8f3 	bl	80097bc <_fflush_r>
 80075d6:	68e1      	ldr	r1, [r4, #12]
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <cleanup_stdio+0x3c>)
 80075da:	4299      	cmp	r1, r3
 80075dc:	d004      	beq.n	80075e8 <cleanup_stdio+0x30>
 80075de:	4620      	mov	r0, r4
 80075e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e4:	f002 b8ea 	b.w	80097bc <_fflush_r>
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	bf00      	nop
 80075ec:	200005f8 	.word	0x200005f8
 80075f0:	20000660 	.word	0x20000660
 80075f4:	200006c8 	.word	0x200006c8

080075f8 <global_stdio_init.part.0>:
 80075f8:	b510      	push	{r4, lr}
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <global_stdio_init.part.0+0x30>)
 80075fc:	4c0b      	ldr	r4, [pc, #44]	; (800762c <global_stdio_init.part.0+0x34>)
 80075fe:	4a0c      	ldr	r2, [pc, #48]	; (8007630 <global_stdio_init.part.0+0x38>)
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	4620      	mov	r0, r4
 8007604:	2200      	movs	r2, #0
 8007606:	2104      	movs	r1, #4
 8007608:	f7ff ff94 	bl	8007534 <std>
 800760c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007610:	2201      	movs	r2, #1
 8007612:	2109      	movs	r1, #9
 8007614:	f7ff ff8e 	bl	8007534 <std>
 8007618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800761c:	2202      	movs	r2, #2
 800761e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007622:	2112      	movs	r1, #18
 8007624:	f7ff bf86 	b.w	8007534 <std>
 8007628:	20000730 	.word	0x20000730
 800762c:	200005f8 	.word	0x200005f8
 8007630:	080075a1 	.word	0x080075a1

08007634 <__sfp_lock_acquire>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sfp_lock_acquire+0x8>)
 8007636:	f000 b94e 	b.w	80078d6 <__retarget_lock_acquire_recursive>
 800763a:	bf00      	nop
 800763c:	20000739 	.word	0x20000739

08007640 <__sfp_lock_release>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__sfp_lock_release+0x8>)
 8007642:	f000 b949 	b.w	80078d8 <__retarget_lock_release_recursive>
 8007646:	bf00      	nop
 8007648:	20000739 	.word	0x20000739

0800764c <__sinit>:
 800764c:	b510      	push	{r4, lr}
 800764e:	4604      	mov	r4, r0
 8007650:	f7ff fff0 	bl	8007634 <__sfp_lock_acquire>
 8007654:	6a23      	ldr	r3, [r4, #32]
 8007656:	b11b      	cbz	r3, 8007660 <__sinit+0x14>
 8007658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765c:	f7ff bff0 	b.w	8007640 <__sfp_lock_release>
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <__sinit+0x28>)
 8007662:	6223      	str	r3, [r4, #32]
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <__sinit+0x2c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1f5      	bne.n	8007658 <__sinit+0xc>
 800766c:	f7ff ffc4 	bl	80075f8 <global_stdio_init.part.0>
 8007670:	e7f2      	b.n	8007658 <__sinit+0xc>
 8007672:	bf00      	nop
 8007674:	080075b9 	.word	0x080075b9
 8007678:	20000730 	.word	0x20000730

0800767c <_fwalk_sglue>:
 800767c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007680:	4607      	mov	r7, r0
 8007682:	4688      	mov	r8, r1
 8007684:	4614      	mov	r4, r2
 8007686:	2600      	movs	r6, #0
 8007688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800768c:	f1b9 0901 	subs.w	r9, r9, #1
 8007690:	d505      	bpl.n	800769e <_fwalk_sglue+0x22>
 8007692:	6824      	ldr	r4, [r4, #0]
 8007694:	2c00      	cmp	r4, #0
 8007696:	d1f7      	bne.n	8007688 <_fwalk_sglue+0xc>
 8007698:	4630      	mov	r0, r6
 800769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769e:	89ab      	ldrh	r3, [r5, #12]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d907      	bls.n	80076b4 <_fwalk_sglue+0x38>
 80076a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076a8:	3301      	adds	r3, #1
 80076aa:	d003      	beq.n	80076b4 <_fwalk_sglue+0x38>
 80076ac:	4629      	mov	r1, r5
 80076ae:	4638      	mov	r0, r7
 80076b0:	47c0      	blx	r8
 80076b2:	4306      	orrs	r6, r0
 80076b4:	3568      	adds	r5, #104	; 0x68
 80076b6:	e7e9      	b.n	800768c <_fwalk_sglue+0x10>

080076b8 <siprintf>:
 80076b8:	b40e      	push	{r1, r2, r3}
 80076ba:	b500      	push	{lr}
 80076bc:	b09c      	sub	sp, #112	; 0x70
 80076be:	ab1d      	add	r3, sp, #116	; 0x74
 80076c0:	9002      	str	r0, [sp, #8]
 80076c2:	9006      	str	r0, [sp, #24]
 80076c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076c8:	4809      	ldr	r0, [pc, #36]	; (80076f0 <siprintf+0x38>)
 80076ca:	9107      	str	r1, [sp, #28]
 80076cc:	9104      	str	r1, [sp, #16]
 80076ce:	4909      	ldr	r1, [pc, #36]	; (80076f4 <siprintf+0x3c>)
 80076d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d4:	9105      	str	r1, [sp, #20]
 80076d6:	6800      	ldr	r0, [r0, #0]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	a902      	add	r1, sp, #8
 80076dc:	f001 fbca 	bl	8008e74 <_svfiprintf_r>
 80076e0:	9b02      	ldr	r3, [sp, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	b01c      	add	sp, #112	; 0x70
 80076e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076ec:	b003      	add	sp, #12
 80076ee:	4770      	bx	lr
 80076f0:	20000068 	.word	0x20000068
 80076f4:	ffff0208 	.word	0xffff0208

080076f8 <siscanf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	b510      	push	{r4, lr}
 80076fc:	b09f      	sub	sp, #124	; 0x7c
 80076fe:	ac21      	add	r4, sp, #132	; 0x84
 8007700:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007704:	f854 2b04 	ldr.w	r2, [r4], #4
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800770e:	9004      	str	r0, [sp, #16]
 8007710:	9008      	str	r0, [sp, #32]
 8007712:	f7f8 fde5 	bl	80002e0 <strlen>
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <siscanf+0x50>)
 8007718:	9005      	str	r0, [sp, #20]
 800771a:	9009      	str	r0, [sp, #36]	; 0x24
 800771c:	930d      	str	r3, [sp, #52]	; 0x34
 800771e:	480b      	ldr	r0, [pc, #44]	; (800774c <siscanf+0x54>)
 8007720:	9a01      	ldr	r2, [sp, #4]
 8007722:	6800      	ldr	r0, [r0, #0]
 8007724:	9403      	str	r4, [sp, #12]
 8007726:	2300      	movs	r3, #0
 8007728:	9311      	str	r3, [sp, #68]	; 0x44
 800772a:	9316      	str	r3, [sp, #88]	; 0x58
 800772c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007730:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007734:	a904      	add	r1, sp, #16
 8007736:	4623      	mov	r3, r4
 8007738:	f001 fcf4 	bl	8009124 <__ssvfiscanf_r>
 800773c:	b01f      	add	sp, #124	; 0x7c
 800773e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007742:	b003      	add	sp, #12
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	08007773 	.word	0x08007773
 800774c:	20000068 	.word	0x20000068

08007750 <__sread>:
 8007750:	b510      	push	{r4, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	f000 f86e 	bl	8007838 <_read_r>
 800775c:	2800      	cmp	r0, #0
 800775e:	bfab      	itete	ge
 8007760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007762:	89a3      	ldrhlt	r3, [r4, #12]
 8007764:	181b      	addge	r3, r3, r0
 8007766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800776a:	bfac      	ite	ge
 800776c:	6563      	strge	r3, [r4, #84]	; 0x54
 800776e:	81a3      	strhlt	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__seofread>:
 8007772:	2000      	movs	r0, #0
 8007774:	4770      	bx	lr

08007776 <__swrite>:
 8007776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	461f      	mov	r7, r3
 800777c:	898b      	ldrh	r3, [r1, #12]
 800777e:	05db      	lsls	r3, r3, #23
 8007780:	4605      	mov	r5, r0
 8007782:	460c      	mov	r4, r1
 8007784:	4616      	mov	r6, r2
 8007786:	d505      	bpl.n	8007794 <__swrite+0x1e>
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	2302      	movs	r3, #2
 800778e:	2200      	movs	r2, #0
 8007790:	f000 f840 	bl	8007814 <_lseek_r>
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	4628      	mov	r0, r5
 80077a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077aa:	f000 b857 	b.w	800785c <_write_r>

080077ae <__sseek>:
 80077ae:	b510      	push	{r4, lr}
 80077b0:	460c      	mov	r4, r1
 80077b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b6:	f000 f82d 	bl	8007814 <_lseek_r>
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	bf15      	itete	ne
 80077c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80077c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077ca:	81a3      	strheq	r3, [r4, #12]
 80077cc:	bf18      	it	ne
 80077ce:	81a3      	strhne	r3, [r4, #12]
 80077d0:	bd10      	pop	{r4, pc}

080077d2 <__sclose>:
 80077d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d6:	f000 b80d 	b.w	80077f4 <_close_r>

080077da <memset>:
 80077da:	4402      	add	r2, r0
 80077dc:	4603      	mov	r3, r0
 80077de:	4293      	cmp	r3, r2
 80077e0:	d100      	bne.n	80077e4 <memset+0xa>
 80077e2:	4770      	bx	lr
 80077e4:	f803 1b01 	strb.w	r1, [r3], #1
 80077e8:	e7f9      	b.n	80077de <memset+0x4>
	...

080077ec <_localeconv_r>:
 80077ec:	4800      	ldr	r0, [pc, #0]	; (80077f0 <_localeconv_r+0x4>)
 80077ee:	4770      	bx	lr
 80077f0:	2000015c 	.word	0x2000015c

080077f4 <_close_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4d06      	ldr	r5, [pc, #24]	; (8007810 <_close_r+0x1c>)
 80077f8:	2300      	movs	r3, #0
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	f7f9 ff31 	bl	8001666 <_close>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_close_r+0x1a>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_close_r+0x1a>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	20000734 	.word	0x20000734

08007814 <_lseek_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d07      	ldr	r5, [pc, #28]	; (8007834 <_lseek_r+0x20>)
 8007818:	4604      	mov	r4, r0
 800781a:	4608      	mov	r0, r1
 800781c:	4611      	mov	r1, r2
 800781e:	2200      	movs	r2, #0
 8007820:	602a      	str	r2, [r5, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	f7f9 ff46 	bl	80016b4 <_lseek>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_lseek_r+0x1e>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	b103      	cbz	r3, 8007832 <_lseek_r+0x1e>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	20000734 	.word	0x20000734

08007838 <_read_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4d07      	ldr	r5, [pc, #28]	; (8007858 <_read_r+0x20>)
 800783c:	4604      	mov	r4, r0
 800783e:	4608      	mov	r0, r1
 8007840:	4611      	mov	r1, r2
 8007842:	2200      	movs	r2, #0
 8007844:	602a      	str	r2, [r5, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	f7f9 fed4 	bl	80015f4 <_read>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d102      	bne.n	8007856 <_read_r+0x1e>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	b103      	cbz	r3, 8007856 <_read_r+0x1e>
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	20000734 	.word	0x20000734

0800785c <_write_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d07      	ldr	r5, [pc, #28]	; (800787c <_write_r+0x20>)
 8007860:	4604      	mov	r4, r0
 8007862:	4608      	mov	r0, r1
 8007864:	4611      	mov	r1, r2
 8007866:	2200      	movs	r2, #0
 8007868:	602a      	str	r2, [r5, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	f7f9 fedf 	bl	800162e <_write>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_write_r+0x1e>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_write_r+0x1e>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20000734 	.word	0x20000734

08007880 <__errno>:
 8007880:	4b01      	ldr	r3, [pc, #4]	; (8007888 <__errno+0x8>)
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20000068 	.word	0x20000068

0800788c <__libc_init_array>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4d0d      	ldr	r5, [pc, #52]	; (80078c4 <__libc_init_array+0x38>)
 8007890:	4c0d      	ldr	r4, [pc, #52]	; (80078c8 <__libc_init_array+0x3c>)
 8007892:	1b64      	subs	r4, r4, r5
 8007894:	10a4      	asrs	r4, r4, #2
 8007896:	2600      	movs	r6, #0
 8007898:	42a6      	cmp	r6, r4
 800789a:	d109      	bne.n	80078b0 <__libc_init_array+0x24>
 800789c:	4d0b      	ldr	r5, [pc, #44]	; (80078cc <__libc_init_array+0x40>)
 800789e:	4c0c      	ldr	r4, [pc, #48]	; (80078d0 <__libc_init_array+0x44>)
 80078a0:	f002 fc9e 	bl	800a1e0 <_init>
 80078a4:	1b64      	subs	r4, r4, r5
 80078a6:	10a4      	asrs	r4, r4, #2
 80078a8:	2600      	movs	r6, #0
 80078aa:	42a6      	cmp	r6, r4
 80078ac:	d105      	bne.n	80078ba <__libc_init_array+0x2e>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b4:	4798      	blx	r3
 80078b6:	3601      	adds	r6, #1
 80078b8:	e7ee      	b.n	8007898 <__libc_init_array+0xc>
 80078ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80078be:	4798      	blx	r3
 80078c0:	3601      	adds	r6, #1
 80078c2:	e7f2      	b.n	80078aa <__libc_init_array+0x1e>
 80078c4:	08030050 	.word	0x08030050
 80078c8:	08030050 	.word	0x08030050
 80078cc:	08030050 	.word	0x08030050
 80078d0:	08030054 	.word	0x08030054

080078d4 <__retarget_lock_init_recursive>:
 80078d4:	4770      	bx	lr

080078d6 <__retarget_lock_acquire_recursive>:
 80078d6:	4770      	bx	lr

080078d8 <__retarget_lock_release_recursive>:
 80078d8:	4770      	bx	lr

080078da <quorem>:
 80078da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078de:	6903      	ldr	r3, [r0, #16]
 80078e0:	690c      	ldr	r4, [r1, #16]
 80078e2:	42a3      	cmp	r3, r4
 80078e4:	4607      	mov	r7, r0
 80078e6:	db7e      	blt.n	80079e6 <quorem+0x10c>
 80078e8:	3c01      	subs	r4, #1
 80078ea:	f101 0814 	add.w	r8, r1, #20
 80078ee:	f100 0514 	add.w	r5, r0, #20
 80078f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007900:	3301      	adds	r3, #1
 8007902:	429a      	cmp	r2, r3
 8007904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800790c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007910:	d331      	bcc.n	8007976 <quorem+0x9c>
 8007912:	f04f 0e00 	mov.w	lr, #0
 8007916:	4640      	mov	r0, r8
 8007918:	46ac      	mov	ip, r5
 800791a:	46f2      	mov	sl, lr
 800791c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007920:	b293      	uxth	r3, r2
 8007922:	fb06 e303 	mla	r3, r6, r3, lr
 8007926:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800792a:	0c1a      	lsrs	r2, r3, #16
 800792c:	b29b      	uxth	r3, r3
 800792e:	ebaa 0303 	sub.w	r3, sl, r3
 8007932:	f8dc a000 	ldr.w	sl, [ip]
 8007936:	fa13 f38a 	uxtah	r3, r3, sl
 800793a:	fb06 220e 	mla	r2, r6, lr, r2
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	9b00      	ldr	r3, [sp, #0]
 8007942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007946:	b292      	uxth	r2, r2
 8007948:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800794c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007950:	f8bd 3000 	ldrh.w	r3, [sp]
 8007954:	4581      	cmp	r9, r0
 8007956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800795a:	f84c 3b04 	str.w	r3, [ip], #4
 800795e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007962:	d2db      	bcs.n	800791c <quorem+0x42>
 8007964:	f855 300b 	ldr.w	r3, [r5, fp]
 8007968:	b92b      	cbnz	r3, 8007976 <quorem+0x9c>
 800796a:	9b01      	ldr	r3, [sp, #4]
 800796c:	3b04      	subs	r3, #4
 800796e:	429d      	cmp	r5, r3
 8007970:	461a      	mov	r2, r3
 8007972:	d32c      	bcc.n	80079ce <quorem+0xf4>
 8007974:	613c      	str	r4, [r7, #16]
 8007976:	4638      	mov	r0, r7
 8007978:	f001 f922 	bl	8008bc0 <__mcmp>
 800797c:	2800      	cmp	r0, #0
 800797e:	db22      	blt.n	80079c6 <quorem+0xec>
 8007980:	3601      	adds	r6, #1
 8007982:	4629      	mov	r1, r5
 8007984:	2000      	movs	r0, #0
 8007986:	f858 2b04 	ldr.w	r2, [r8], #4
 800798a:	f8d1 c000 	ldr.w	ip, [r1]
 800798e:	b293      	uxth	r3, r2
 8007990:	1ac3      	subs	r3, r0, r3
 8007992:	0c12      	lsrs	r2, r2, #16
 8007994:	fa13 f38c 	uxtah	r3, r3, ip
 8007998:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800799c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079a6:	45c1      	cmp	r9, r8
 80079a8:	f841 3b04 	str.w	r3, [r1], #4
 80079ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079b0:	d2e9      	bcs.n	8007986 <quorem+0xac>
 80079b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ba:	b922      	cbnz	r2, 80079c6 <quorem+0xec>
 80079bc:	3b04      	subs	r3, #4
 80079be:	429d      	cmp	r5, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	d30a      	bcc.n	80079da <quorem+0x100>
 80079c4:	613c      	str	r4, [r7, #16]
 80079c6:	4630      	mov	r0, r6
 80079c8:	b003      	add	sp, #12
 80079ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	d1ce      	bne.n	8007974 <quorem+0x9a>
 80079d6:	3c01      	subs	r4, #1
 80079d8:	e7c9      	b.n	800796e <quorem+0x94>
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	3b04      	subs	r3, #4
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d1f0      	bne.n	80079c4 <quorem+0xea>
 80079e2:	3c01      	subs	r4, #1
 80079e4:	e7eb      	b.n	80079be <quorem+0xe4>
 80079e6:	2000      	movs	r0, #0
 80079e8:	e7ee      	b.n	80079c8 <quorem+0xee>
 80079ea:	0000      	movs	r0, r0
 80079ec:	0000      	movs	r0, r0
	...

080079f0 <_dtoa_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	ed2d 8b02 	vpush	{d8}
 80079f8:	69c5      	ldr	r5, [r0, #28]
 80079fa:	b091      	sub	sp, #68	; 0x44
 80079fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a00:	ec59 8b10 	vmov	r8, r9, d0
 8007a04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007a06:	9106      	str	r1, [sp, #24]
 8007a08:	4606      	mov	r6, r0
 8007a0a:	9208      	str	r2, [sp, #32]
 8007a0c:	930c      	str	r3, [sp, #48]	; 0x30
 8007a0e:	b975      	cbnz	r5, 8007a2e <_dtoa_r+0x3e>
 8007a10:	2010      	movs	r0, #16
 8007a12:	f000 fda5 	bl	8008560 <malloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	61f0      	str	r0, [r6, #28]
 8007a1a:	b920      	cbnz	r0, 8007a26 <_dtoa_r+0x36>
 8007a1c:	4ba6      	ldr	r3, [pc, #664]	; (8007cb8 <_dtoa_r+0x2c8>)
 8007a1e:	21ef      	movs	r1, #239	; 0xef
 8007a20:	48a6      	ldr	r0, [pc, #664]	; (8007cbc <_dtoa_r+0x2cc>)
 8007a22:	f001 ff9f 	bl	8009964 <__assert_func>
 8007a26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a2a:	6005      	str	r5, [r0, #0]
 8007a2c:	60c5      	str	r5, [r0, #12]
 8007a2e:	69f3      	ldr	r3, [r6, #28]
 8007a30:	6819      	ldr	r1, [r3, #0]
 8007a32:	b151      	cbz	r1, 8007a4a <_dtoa_r+0x5a>
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	604a      	str	r2, [r1, #4]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4093      	lsls	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 fe82 	bl	8008748 <_Bfree>
 8007a44:	69f3      	ldr	r3, [r6, #28]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	f1b9 0300 	subs.w	r3, r9, #0
 8007a4e:	bfbb      	ittet	lt
 8007a50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a54:	9303      	strlt	r3, [sp, #12]
 8007a56:	2300      	movge	r3, #0
 8007a58:	2201      	movlt	r2, #1
 8007a5a:	bfac      	ite	ge
 8007a5c:	6023      	strge	r3, [r4, #0]
 8007a5e:	6022      	strlt	r2, [r4, #0]
 8007a60:	4b97      	ldr	r3, [pc, #604]	; (8007cc0 <_dtoa_r+0x2d0>)
 8007a62:	9c03      	ldr	r4, [sp, #12]
 8007a64:	43a3      	bics	r3, r4
 8007a66:	d11c      	bne.n	8007aa2 <_dtoa_r+0xb2>
 8007a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007a74:	ea53 0308 	orrs.w	r3, r3, r8
 8007a78:	f000 84fb 	beq.w	8008472 <_dtoa_r+0xa82>
 8007a7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a7e:	b963      	cbnz	r3, 8007a9a <_dtoa_r+0xaa>
 8007a80:	4b90      	ldr	r3, [pc, #576]	; (8007cc4 <_dtoa_r+0x2d4>)
 8007a82:	e020      	b.n	8007ac6 <_dtoa_r+0xd6>
 8007a84:	4b90      	ldr	r3, [pc, #576]	; (8007cc8 <_dtoa_r+0x2d8>)
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	9801      	ldr	r0, [sp, #4]
 8007a90:	b011      	add	sp, #68	; 0x44
 8007a92:	ecbd 8b02 	vpop	{d8}
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	4b8a      	ldr	r3, [pc, #552]	; (8007cc4 <_dtoa_r+0x2d4>)
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	3303      	adds	r3, #3
 8007aa0:	e7f3      	b.n	8007a8a <_dtoa_r+0x9a>
 8007aa2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007aa6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aae:	d10c      	bne.n	8007aca <_dtoa_r+0xda>
 8007ab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 84d7 	beq.w	800846c <_dtoa_r+0xa7c>
 8007abe:	4b83      	ldr	r3, [pc, #524]	; (8007ccc <_dtoa_r+0x2dc>)
 8007ac0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	e7e1      	b.n	8007a8e <_dtoa_r+0x9e>
 8007aca:	aa0e      	add	r2, sp, #56	; 0x38
 8007acc:	a90f      	add	r1, sp, #60	; 0x3c
 8007ace:	4630      	mov	r0, r6
 8007ad0:	eeb0 0b48 	vmov.f64	d0, d8
 8007ad4:	f001 f91a 	bl	8008d0c <__d2b>
 8007ad8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ade:	4605      	mov	r5, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d046      	beq.n	8007b72 <_dtoa_r+0x182>
 8007ae4:	eeb0 7b48 	vmov.f64	d7, d8
 8007ae8:	ee18 1a90 	vmov	r1, s17
 8007aec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007af0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007af4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007af8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007afc:	2000      	movs	r0, #0
 8007afe:	ee07 1a90 	vmov	s15, r1
 8007b02:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007b06:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007ca0 <_dtoa_r+0x2b0>
 8007b0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b0e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007ca8 <_dtoa_r+0x2b8>
 8007b12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007b16:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007cb0 <_dtoa_r+0x2c0>
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007b22:	eeb0 7b46 	vmov.f64	d7, d6
 8007b26:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007b2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007b2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b36:	ee16 ba90 	vmov	fp, s13
 8007b3a:	9009      	str	r0, [sp, #36]	; 0x24
 8007b3c:	d508      	bpl.n	8007b50 <_dtoa_r+0x160>
 8007b3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007b42:	eeb4 6b47 	vcmp.f64	d6, d7
 8007b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4a:	bf18      	it	ne
 8007b4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007b50:	f1bb 0f16 	cmp.w	fp, #22
 8007b54:	d82b      	bhi.n	8007bae <_dtoa_r+0x1be>
 8007b56:	495e      	ldr	r1, [pc, #376]	; (8007cd0 <_dtoa_r+0x2e0>)
 8007b58:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007b5c:	ed91 7b00 	vldr	d7, [r1]
 8007b60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b68:	d501      	bpl.n	8007b6e <_dtoa_r+0x17e>
 8007b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b6e:	2100      	movs	r1, #0
 8007b70:	e01e      	b.n	8007bb0 <_dtoa_r+0x1c0>
 8007b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b74:	4413      	add	r3, r2
 8007b76:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007b7a:	2920      	cmp	r1, #32
 8007b7c:	bfc1      	itttt	gt
 8007b7e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007b82:	408c      	lslgt	r4, r1
 8007b84:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007b88:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007b8c:	bfd6      	itet	le
 8007b8e:	f1c1 0120 	rsble	r1, r1, #32
 8007b92:	4321      	orrgt	r1, r4
 8007b94:	fa08 f101 	lslle.w	r1, r8, r1
 8007b98:	ee07 1a90 	vmov	s15, r1
 8007b9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	ee17 1a90 	vmov	r1, s15
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007bac:	e7a7      	b.n	8007afe <_dtoa_r+0x10e>
 8007bae:	2101      	movs	r1, #1
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	1e53      	subs	r3, r2, #1
 8007bb4:	9305      	str	r3, [sp, #20]
 8007bb6:	bf45      	ittet	mi
 8007bb8:	f1c2 0301 	rsbmi	r3, r2, #1
 8007bbc:	9304      	strmi	r3, [sp, #16]
 8007bbe:	2300      	movpl	r3, #0
 8007bc0:	2300      	movmi	r3, #0
 8007bc2:	bf4c      	ite	mi
 8007bc4:	9305      	strmi	r3, [sp, #20]
 8007bc6:	9304      	strpl	r3, [sp, #16]
 8007bc8:	f1bb 0f00 	cmp.w	fp, #0
 8007bcc:	910b      	str	r1, [sp, #44]	; 0x2c
 8007bce:	db18      	blt.n	8007c02 <_dtoa_r+0x212>
 8007bd0:	9b05      	ldr	r3, [sp, #20]
 8007bd2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007bd6:	445b      	add	r3, fp
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9a06      	ldr	r2, [sp, #24]
 8007bde:	2a09      	cmp	r2, #9
 8007be0:	d848      	bhi.n	8007c74 <_dtoa_r+0x284>
 8007be2:	2a05      	cmp	r2, #5
 8007be4:	bfc4      	itt	gt
 8007be6:	3a04      	subgt	r2, #4
 8007be8:	9206      	strgt	r2, [sp, #24]
 8007bea:	9a06      	ldr	r2, [sp, #24]
 8007bec:	f1a2 0202 	sub.w	r2, r2, #2
 8007bf0:	bfcc      	ite	gt
 8007bf2:	2400      	movgt	r4, #0
 8007bf4:	2401      	movle	r4, #1
 8007bf6:	2a03      	cmp	r2, #3
 8007bf8:	d847      	bhi.n	8007c8a <_dtoa_r+0x29a>
 8007bfa:	e8df f002 	tbb	[pc, r2]
 8007bfe:	2d0b      	.short	0x2d0b
 8007c00:	392b      	.short	0x392b
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	2200      	movs	r2, #0
 8007c06:	eba3 030b 	sub.w	r3, r3, fp
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c0e:	f1cb 0300 	rsb	r3, fp, #0
 8007c12:	e7e3      	b.n	8007bdc <_dtoa_r+0x1ec>
 8007c14:	2200      	movs	r2, #0
 8007c16:	9207      	str	r2, [sp, #28]
 8007c18:	9a08      	ldr	r2, [sp, #32]
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	dc38      	bgt.n	8007c90 <_dtoa_r+0x2a0>
 8007c1e:	f04f 0a01 	mov.w	sl, #1
 8007c22:	46d1      	mov	r9, sl
 8007c24:	4652      	mov	r2, sl
 8007c26:	f8cd a020 	str.w	sl, [sp, #32]
 8007c2a:	69f7      	ldr	r7, [r6, #28]
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	2004      	movs	r0, #4
 8007c30:	f100 0c14 	add.w	ip, r0, #20
 8007c34:	4594      	cmp	ip, r2
 8007c36:	d930      	bls.n	8007c9a <_dtoa_r+0x2aa>
 8007c38:	6079      	str	r1, [r7, #4]
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c3e:	f000 fd43 	bl	80086c8 <_Balloc>
 8007c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c44:	9001      	str	r0, [sp, #4]
 8007c46:	4602      	mov	r2, r0
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d145      	bne.n	8007cd8 <_dtoa_r+0x2e8>
 8007c4c:	4b21      	ldr	r3, [pc, #132]	; (8007cd4 <_dtoa_r+0x2e4>)
 8007c4e:	f240 11af 	movw	r1, #431	; 0x1af
 8007c52:	e6e5      	b.n	8007a20 <_dtoa_r+0x30>
 8007c54:	2201      	movs	r2, #1
 8007c56:	e7de      	b.n	8007c16 <_dtoa_r+0x226>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	9207      	str	r2, [sp, #28]
 8007c5c:	9a08      	ldr	r2, [sp, #32]
 8007c5e:	eb0b 0a02 	add.w	sl, fp, r2
 8007c62:	f10a 0901 	add.w	r9, sl, #1
 8007c66:	464a      	mov	r2, r9
 8007c68:	2a01      	cmp	r2, #1
 8007c6a:	bfb8      	it	lt
 8007c6c:	2201      	movlt	r2, #1
 8007c6e:	e7dc      	b.n	8007c2a <_dtoa_r+0x23a>
 8007c70:	2201      	movs	r2, #1
 8007c72:	e7f2      	b.n	8007c5a <_dtoa_r+0x26a>
 8007c74:	2401      	movs	r4, #1
 8007c76:	2200      	movs	r2, #0
 8007c78:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007c7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c80:	2100      	movs	r1, #0
 8007c82:	46d1      	mov	r9, sl
 8007c84:	2212      	movs	r2, #18
 8007c86:	9108      	str	r1, [sp, #32]
 8007c88:	e7cf      	b.n	8007c2a <_dtoa_r+0x23a>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	9207      	str	r2, [sp, #28]
 8007c8e:	e7f5      	b.n	8007c7c <_dtoa_r+0x28c>
 8007c90:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007c94:	46d1      	mov	r9, sl
 8007c96:	4652      	mov	r2, sl
 8007c98:	e7c7      	b.n	8007c2a <_dtoa_r+0x23a>
 8007c9a:	3101      	adds	r1, #1
 8007c9c:	0040      	lsls	r0, r0, #1
 8007c9e:	e7c7      	b.n	8007c30 <_dtoa_r+0x240>
 8007ca0:	636f4361 	.word	0x636f4361
 8007ca4:	3fd287a7 	.word	0x3fd287a7
 8007ca8:	8b60c8b3 	.word	0x8b60c8b3
 8007cac:	3fc68a28 	.word	0x3fc68a28
 8007cb0:	509f79fb 	.word	0x509f79fb
 8007cb4:	3fd34413 	.word	0x3fd34413
 8007cb8:	0802fcff 	.word	0x0802fcff
 8007cbc:	0802fd16 	.word	0x0802fd16
 8007cc0:	7ff00000 	.word	0x7ff00000
 8007cc4:	0802fcfb 	.word	0x0802fcfb
 8007cc8:	0802fcf2 	.word	0x0802fcf2
 8007ccc:	0802fefc 	.word	0x0802fefc
 8007cd0:	0802fe00 	.word	0x0802fe00
 8007cd4:	0802fd6e 	.word	0x0802fd6e
 8007cd8:	69f2      	ldr	r2, [r6, #28]
 8007cda:	9901      	ldr	r1, [sp, #4]
 8007cdc:	6011      	str	r1, [r2, #0]
 8007cde:	f1b9 0f0e 	cmp.w	r9, #14
 8007ce2:	d86c      	bhi.n	8007dbe <_dtoa_r+0x3ce>
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	d06a      	beq.n	8007dbe <_dtoa_r+0x3ce>
 8007ce8:	f1bb 0f00 	cmp.w	fp, #0
 8007cec:	f340 80a0 	ble.w	8007e30 <_dtoa_r+0x440>
 8007cf0:	4ac1      	ldr	r2, [pc, #772]	; (8007ff8 <_dtoa_r+0x608>)
 8007cf2:	f00b 010f 	and.w	r1, fp, #15
 8007cf6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007cfa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007cfe:	ed92 7b00 	vldr	d7, [r2]
 8007d02:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007d06:	f000 8087 	beq.w	8007e18 <_dtoa_r+0x428>
 8007d0a:	49bc      	ldr	r1, [pc, #752]	; (8007ffc <_dtoa_r+0x60c>)
 8007d0c:	ed91 6b08 	vldr	d6, [r1, #32]
 8007d10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007d14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007d18:	f002 020f 	and.w	r2, r2, #15
 8007d1c:	2103      	movs	r1, #3
 8007d1e:	48b7      	ldr	r0, [pc, #732]	; (8007ffc <_dtoa_r+0x60c>)
 8007d20:	2a00      	cmp	r2, #0
 8007d22:	d17b      	bne.n	8007e1c <_dtoa_r+0x42c>
 8007d24:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	f000 80a0 	beq.w	8007e7c <_dtoa_r+0x48c>
 8007d3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007d40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	f140 8098 	bpl.w	8007e7c <_dtoa_r+0x48c>
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	f000 8094 	beq.w	8007e7c <_dtoa_r+0x48c>
 8007d54:	f1ba 0f00 	cmp.w	sl, #0
 8007d58:	dd2f      	ble.n	8007dba <_dtoa_r+0x3ca>
 8007d5a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007d5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d66:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007d6a:	3101      	adds	r1, #1
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d72:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007d76:	ee07 1a90 	vmov	s15, r1
 8007d7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d7e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007d82:	ee15 7a90 	vmov	r7, s11
 8007d86:	ec51 0b15 	vmov	r0, r1, d5
 8007d8a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	d177      	bne.n	8007e82 <_dtoa_r+0x492>
 8007d92:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007d96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007d9a:	ec41 0b17 	vmov	d7, r0, r1
 8007d9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da6:	f300 826a 	bgt.w	800827e <_dtoa_r+0x88e>
 8007daa:	eeb1 7b47 	vneg.f64	d7, d7
 8007dae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	f100 8260 	bmi.w	800827a <_dtoa_r+0x88a>
 8007dba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	f2c0 811d 	blt.w	8008000 <_dtoa_r+0x610>
 8007dc6:	f1bb 0f0e 	cmp.w	fp, #14
 8007dca:	f300 8119 	bgt.w	8008000 <_dtoa_r+0x610>
 8007dce:	4b8a      	ldr	r3, [pc, #552]	; (8007ff8 <_dtoa_r+0x608>)
 8007dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dd4:	ed93 6b00 	vldr	d6, [r3]
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f280 80b7 	bge.w	8007f4e <_dtoa_r+0x55e>
 8007de0:	f1b9 0f00 	cmp.w	r9, #0
 8007de4:	f300 80b3 	bgt.w	8007f4e <_dtoa_r+0x55e>
 8007de8:	f040 8246 	bne.w	8008278 <_dtoa_r+0x888>
 8007dec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007df0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007df4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007df8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e00:	464c      	mov	r4, r9
 8007e02:	464f      	mov	r7, r9
 8007e04:	f280 821c 	bge.w	8008240 <_dtoa_r+0x850>
 8007e08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e0c:	2331      	movs	r3, #49	; 0x31
 8007e0e:	f808 3b01 	strb.w	r3, [r8], #1
 8007e12:	f10b 0b01 	add.w	fp, fp, #1
 8007e16:	e218      	b.n	800824a <_dtoa_r+0x85a>
 8007e18:	2102      	movs	r1, #2
 8007e1a:	e780      	b.n	8007d1e <_dtoa_r+0x32e>
 8007e1c:	07d4      	lsls	r4, r2, #31
 8007e1e:	d504      	bpl.n	8007e2a <_dtoa_r+0x43a>
 8007e20:	ed90 6b00 	vldr	d6, [r0]
 8007e24:	3101      	adds	r1, #1
 8007e26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e2a:	1052      	asrs	r2, r2, #1
 8007e2c:	3008      	adds	r0, #8
 8007e2e:	e777      	b.n	8007d20 <_dtoa_r+0x330>
 8007e30:	d022      	beq.n	8007e78 <_dtoa_r+0x488>
 8007e32:	f1cb 0200 	rsb	r2, fp, #0
 8007e36:	4970      	ldr	r1, [pc, #448]	; (8007ff8 <_dtoa_r+0x608>)
 8007e38:	f002 000f 	and.w	r0, r2, #15
 8007e3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007e40:	ed91 7b00 	vldr	d7, [r1]
 8007e44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007e48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e4c:	486b      	ldr	r0, [pc, #428]	; (8007ffc <_dtoa_r+0x60c>)
 8007e4e:	1112      	asrs	r2, r2, #4
 8007e50:	2400      	movs	r4, #0
 8007e52:	2102      	movs	r1, #2
 8007e54:	b92a      	cbnz	r2, 8007e62 <_dtoa_r+0x472>
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	f43f af6a 	beq.w	8007d30 <_dtoa_r+0x340>
 8007e5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e60:	e766      	b.n	8007d30 <_dtoa_r+0x340>
 8007e62:	07d7      	lsls	r7, r2, #31
 8007e64:	d505      	bpl.n	8007e72 <_dtoa_r+0x482>
 8007e66:	ed90 6b00 	vldr	d6, [r0]
 8007e6a:	3101      	adds	r1, #1
 8007e6c:	2401      	movs	r4, #1
 8007e6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e72:	1052      	asrs	r2, r2, #1
 8007e74:	3008      	adds	r0, #8
 8007e76:	e7ed      	b.n	8007e54 <_dtoa_r+0x464>
 8007e78:	2102      	movs	r1, #2
 8007e7a:	e759      	b.n	8007d30 <_dtoa_r+0x340>
 8007e7c:	465a      	mov	r2, fp
 8007e7e:	464c      	mov	r4, r9
 8007e80:	e775      	b.n	8007d6e <_dtoa_r+0x37e>
 8007e82:	ec41 0b17 	vmov	d7, r0, r1
 8007e86:	495c      	ldr	r1, [pc, #368]	; (8007ff8 <_dtoa_r+0x608>)
 8007e88:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007e8c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007e90:	9901      	ldr	r1, [sp, #4]
 8007e92:	440c      	add	r4, r1
 8007e94:	9907      	ldr	r1, [sp, #28]
 8007e96:	b351      	cbz	r1, 8007eee <_dtoa_r+0x4fe>
 8007e98:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007e9c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007ea0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ea4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007ea8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007eac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007eb0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007eb4:	ee14 1a90 	vmov	r1, s9
 8007eb8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ebc:	3130      	adds	r1, #48	; 0x30
 8007ebe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007ec2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eca:	f808 1b01 	strb.w	r1, [r8], #1
 8007ece:	d439      	bmi.n	8007f44 <_dtoa_r+0x554>
 8007ed0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007ed4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007edc:	d472      	bmi.n	8007fc4 <_dtoa_r+0x5d4>
 8007ede:	45a0      	cmp	r8, r4
 8007ee0:	f43f af6b 	beq.w	8007dba <_dtoa_r+0x3ca>
 8007ee4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007ee8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007eec:	e7e0      	b.n	8007eb0 <_dtoa_r+0x4c0>
 8007eee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ef2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007efc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f00:	ee14 1a90 	vmov	r1, s9
 8007f04:	3130      	adds	r1, #48	; 0x30
 8007f06:	f808 1b01 	strb.w	r1, [r8], #1
 8007f0a:	45a0      	cmp	r8, r4
 8007f0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f10:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f14:	d118      	bne.n	8007f48 <_dtoa_r+0x558>
 8007f16:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007f1a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007f1e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f26:	dc4d      	bgt.n	8007fc4 <_dtoa_r+0x5d4>
 8007f28:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007f2c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f34:	f57f af41 	bpl.w	8007dba <_dtoa_r+0x3ca>
 8007f38:	4680      	mov	r8, r0
 8007f3a:	3801      	subs	r0, #1
 8007f3c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007f40:	2b30      	cmp	r3, #48	; 0x30
 8007f42:	d0f9      	beq.n	8007f38 <_dtoa_r+0x548>
 8007f44:	4693      	mov	fp, r2
 8007f46:	e02a      	b.n	8007f9e <_dtoa_r+0x5ae>
 8007f48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f4c:	e7d6      	b.n	8007efc <_dtoa_r+0x50c>
 8007f4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f52:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007f56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f5a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007f5e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007f62:	ee15 3a10 	vmov	r3, s10
 8007f66:	3330      	adds	r3, #48	; 0x30
 8007f68:	f808 3b01 	strb.w	r3, [r8], #1
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	eba8 0303 	sub.w	r3, r8, r3
 8007f72:	4599      	cmp	r9, r3
 8007f74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007f78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007f7c:	d133      	bne.n	8007fe6 <_dtoa_r+0x5f6>
 8007f7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007f82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8a:	dc1a      	bgt.n	8007fc2 <_dtoa_r+0x5d2>
 8007f8c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f94:	d103      	bne.n	8007f9e <_dtoa_r+0x5ae>
 8007f96:	ee15 3a10 	vmov	r3, s10
 8007f9a:	07d9      	lsls	r1, r3, #31
 8007f9c:	d411      	bmi.n	8007fc2 <_dtoa_r+0x5d2>
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 fbd1 	bl	8008748 <_Bfree>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007faa:	f888 3000 	strb.w	r3, [r8]
 8007fae:	f10b 0301 	add.w	r3, fp, #1
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f43f ad69 	beq.w	8007a8e <_dtoa_r+0x9e>
 8007fbc:	f8c3 8000 	str.w	r8, [r3]
 8007fc0:	e565      	b.n	8007a8e <_dtoa_r+0x9e>
 8007fc2:	465a      	mov	r2, fp
 8007fc4:	4643      	mov	r3, r8
 8007fc6:	4698      	mov	r8, r3
 8007fc8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007fcc:	2939      	cmp	r1, #57	; 0x39
 8007fce:	d106      	bne.n	8007fde <_dtoa_r+0x5ee>
 8007fd0:	9901      	ldr	r1, [sp, #4]
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d1f7      	bne.n	8007fc6 <_dtoa_r+0x5d6>
 8007fd6:	9801      	ldr	r0, [sp, #4]
 8007fd8:	2130      	movs	r1, #48	; 0x30
 8007fda:	3201      	adds	r2, #1
 8007fdc:	7001      	strb	r1, [r0, #0]
 8007fde:	7819      	ldrb	r1, [r3, #0]
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	7019      	strb	r1, [r3, #0]
 8007fe4:	e7ae      	b.n	8007f44 <_dtoa_r+0x554>
 8007fe6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007fea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff2:	d1b2      	bne.n	8007f5a <_dtoa_r+0x56a>
 8007ff4:	e7d3      	b.n	8007f9e <_dtoa_r+0x5ae>
 8007ff6:	bf00      	nop
 8007ff8:	0802fe00 	.word	0x0802fe00
 8007ffc:	0802fdd8 	.word	0x0802fdd8
 8008000:	9907      	ldr	r1, [sp, #28]
 8008002:	2900      	cmp	r1, #0
 8008004:	f000 80d0 	beq.w	80081a8 <_dtoa_r+0x7b8>
 8008008:	9906      	ldr	r1, [sp, #24]
 800800a:	2901      	cmp	r1, #1
 800800c:	f300 80b4 	bgt.w	8008178 <_dtoa_r+0x788>
 8008010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008012:	2900      	cmp	r1, #0
 8008014:	f000 80ac 	beq.w	8008170 <_dtoa_r+0x780>
 8008018:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800801c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008020:	461c      	mov	r4, r3
 8008022:	9309      	str	r3, [sp, #36]	; 0x24
 8008024:	9b04      	ldr	r3, [sp, #16]
 8008026:	4413      	add	r3, r2
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	9b05      	ldr	r3, [sp, #20]
 800802c:	2101      	movs	r1, #1
 800802e:	4413      	add	r3, r2
 8008030:	4630      	mov	r0, r6
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	f000 fc3e 	bl	80088b4 <__i2b>
 8008038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803a:	4607      	mov	r7, r0
 800803c:	f1b8 0f00 	cmp.w	r8, #0
 8008040:	d00d      	beq.n	800805e <_dtoa_r+0x66e>
 8008042:	9a05      	ldr	r2, [sp, #20]
 8008044:	2a00      	cmp	r2, #0
 8008046:	dd0a      	ble.n	800805e <_dtoa_r+0x66e>
 8008048:	4542      	cmp	r2, r8
 800804a:	9904      	ldr	r1, [sp, #16]
 800804c:	bfa8      	it	ge
 800804e:	4642      	movge	r2, r8
 8008050:	1a89      	subs	r1, r1, r2
 8008052:	9104      	str	r1, [sp, #16]
 8008054:	9905      	ldr	r1, [sp, #20]
 8008056:	eba8 0802 	sub.w	r8, r8, r2
 800805a:	1a8a      	subs	r2, r1, r2
 800805c:	9205      	str	r2, [sp, #20]
 800805e:	b303      	cbz	r3, 80080a2 <_dtoa_r+0x6b2>
 8008060:	9a07      	ldr	r2, [sp, #28]
 8008062:	2a00      	cmp	r2, #0
 8008064:	f000 80a5 	beq.w	80081b2 <_dtoa_r+0x7c2>
 8008068:	2c00      	cmp	r4, #0
 800806a:	dd13      	ble.n	8008094 <_dtoa_r+0x6a4>
 800806c:	4639      	mov	r1, r7
 800806e:	4622      	mov	r2, r4
 8008070:	4630      	mov	r0, r6
 8008072:	930d      	str	r3, [sp, #52]	; 0x34
 8008074:	f000 fcde 	bl	8008a34 <__pow5mult>
 8008078:	462a      	mov	r2, r5
 800807a:	4601      	mov	r1, r0
 800807c:	4607      	mov	r7, r0
 800807e:	4630      	mov	r0, r6
 8008080:	f000 fc2e 	bl	80088e0 <__multiply>
 8008084:	4629      	mov	r1, r5
 8008086:	9009      	str	r0, [sp, #36]	; 0x24
 8008088:	4630      	mov	r0, r6
 800808a:	f000 fb5d 	bl	8008748 <_Bfree>
 800808e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008092:	4615      	mov	r5, r2
 8008094:	1b1a      	subs	r2, r3, r4
 8008096:	d004      	beq.n	80080a2 <_dtoa_r+0x6b2>
 8008098:	4629      	mov	r1, r5
 800809a:	4630      	mov	r0, r6
 800809c:	f000 fcca 	bl	8008a34 <__pow5mult>
 80080a0:	4605      	mov	r5, r0
 80080a2:	2101      	movs	r1, #1
 80080a4:	4630      	mov	r0, r6
 80080a6:	f000 fc05 	bl	80088b4 <__i2b>
 80080aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	f340 8081 	ble.w	80081b6 <_dtoa_r+0x7c6>
 80080b4:	461a      	mov	r2, r3
 80080b6:	4601      	mov	r1, r0
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 fcbb 	bl	8008a34 <__pow5mult>
 80080be:	9b06      	ldr	r3, [sp, #24]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	4604      	mov	r4, r0
 80080c4:	dd7a      	ble.n	80081bc <_dtoa_r+0x7cc>
 80080c6:	2300      	movs	r3, #0
 80080c8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ca:	6922      	ldr	r2, [r4, #16]
 80080cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80080d0:	6910      	ldr	r0, [r2, #16]
 80080d2:	f000 fba1 	bl	8008818 <__hi0bits>
 80080d6:	f1c0 0020 	rsb	r0, r0, #32
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	4418      	add	r0, r3
 80080de:	f010 001f 	ands.w	r0, r0, #31
 80080e2:	f000 8093 	beq.w	800820c <_dtoa_r+0x81c>
 80080e6:	f1c0 0220 	rsb	r2, r0, #32
 80080ea:	2a04      	cmp	r2, #4
 80080ec:	f340 8085 	ble.w	80081fa <_dtoa_r+0x80a>
 80080f0:	9b04      	ldr	r3, [sp, #16]
 80080f2:	f1c0 001c 	rsb	r0, r0, #28
 80080f6:	4403      	add	r3, r0
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	9b05      	ldr	r3, [sp, #20]
 80080fc:	4480      	add	r8, r0
 80080fe:	4403      	add	r3, r0
 8008100:	9305      	str	r3, [sp, #20]
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	dd05      	ble.n	8008114 <_dtoa_r+0x724>
 8008108:	4629      	mov	r1, r5
 800810a:	461a      	mov	r2, r3
 800810c:	4630      	mov	r0, r6
 800810e:	f000 fceb 	bl	8008ae8 <__lshift>
 8008112:	4605      	mov	r5, r0
 8008114:	9b05      	ldr	r3, [sp, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dd05      	ble.n	8008126 <_dtoa_r+0x736>
 800811a:	4621      	mov	r1, r4
 800811c:	461a      	mov	r2, r3
 800811e:	4630      	mov	r0, r6
 8008120:	f000 fce2 	bl	8008ae8 <__lshift>
 8008124:	4604      	mov	r4, r0
 8008126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d071      	beq.n	8008210 <_dtoa_r+0x820>
 800812c:	4621      	mov	r1, r4
 800812e:	4628      	mov	r0, r5
 8008130:	f000 fd46 	bl	8008bc0 <__mcmp>
 8008134:	2800      	cmp	r0, #0
 8008136:	da6b      	bge.n	8008210 <_dtoa_r+0x820>
 8008138:	2300      	movs	r3, #0
 800813a:	4629      	mov	r1, r5
 800813c:	220a      	movs	r2, #10
 800813e:	4630      	mov	r0, r6
 8008140:	f000 fb24 	bl	800878c <__multadd>
 8008144:	9b07      	ldr	r3, [sp, #28]
 8008146:	f10b 3bff 	add.w	fp, fp, #4294967295
 800814a:	4605      	mov	r5, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8197 	beq.w	8008480 <_dtoa_r+0xa90>
 8008152:	4639      	mov	r1, r7
 8008154:	2300      	movs	r3, #0
 8008156:	220a      	movs	r2, #10
 8008158:	4630      	mov	r0, r6
 800815a:	f000 fb17 	bl	800878c <__multadd>
 800815e:	f1ba 0f00 	cmp.w	sl, #0
 8008162:	4607      	mov	r7, r0
 8008164:	f300 8093 	bgt.w	800828e <_dtoa_r+0x89e>
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	2b02      	cmp	r3, #2
 800816c:	dc57      	bgt.n	800821e <_dtoa_r+0x82e>
 800816e:	e08e      	b.n	800828e <_dtoa_r+0x89e>
 8008170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008172:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008176:	e751      	b.n	800801c <_dtoa_r+0x62c>
 8008178:	f109 34ff 	add.w	r4, r9, #4294967295
 800817c:	42a3      	cmp	r3, r4
 800817e:	bfbf      	itttt	lt
 8008180:	1ae2      	sublt	r2, r4, r3
 8008182:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008184:	189b      	addlt	r3, r3, r2
 8008186:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008188:	bfae      	itee	ge
 800818a:	1b1c      	subge	r4, r3, r4
 800818c:	4623      	movlt	r3, r4
 800818e:	2400      	movlt	r4, #0
 8008190:	f1b9 0f00 	cmp.w	r9, #0
 8008194:	bfb5      	itete	lt
 8008196:	9a04      	ldrlt	r2, [sp, #16]
 8008198:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800819c:	eba2 0809 	sublt.w	r8, r2, r9
 80081a0:	464a      	movge	r2, r9
 80081a2:	bfb8      	it	lt
 80081a4:	2200      	movlt	r2, #0
 80081a6:	e73c      	b.n	8008022 <_dtoa_r+0x632>
 80081a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80081ac:	9f07      	ldr	r7, [sp, #28]
 80081ae:	461c      	mov	r4, r3
 80081b0:	e744      	b.n	800803c <_dtoa_r+0x64c>
 80081b2:	461a      	mov	r2, r3
 80081b4:	e770      	b.n	8008098 <_dtoa_r+0x6a8>
 80081b6:	9b06      	ldr	r3, [sp, #24]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	dc18      	bgt.n	80081ee <_dtoa_r+0x7fe>
 80081bc:	9b02      	ldr	r3, [sp, #8]
 80081be:	b9b3      	cbnz	r3, 80081ee <_dtoa_r+0x7fe>
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80081c6:	b9a2      	cbnz	r2, 80081f2 <_dtoa_r+0x802>
 80081c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081cc:	0d12      	lsrs	r2, r2, #20
 80081ce:	0512      	lsls	r2, r2, #20
 80081d0:	b18a      	cbz	r2, 80081f6 <_dtoa_r+0x806>
 80081d2:	9b04      	ldr	r3, [sp, #16]
 80081d4:	3301      	adds	r3, #1
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	9b05      	ldr	r3, [sp, #20]
 80081da:	3301      	adds	r3, #1
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	2301      	movs	r3, #1
 80081e0:	9309      	str	r3, [sp, #36]	; 0x24
 80081e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f47f af70 	bne.w	80080ca <_dtoa_r+0x6da>
 80081ea:	2001      	movs	r0, #1
 80081ec:	e775      	b.n	80080da <_dtoa_r+0x6ea>
 80081ee:	2300      	movs	r3, #0
 80081f0:	e7f6      	b.n	80081e0 <_dtoa_r+0x7f0>
 80081f2:	9b02      	ldr	r3, [sp, #8]
 80081f4:	e7f4      	b.n	80081e0 <_dtoa_r+0x7f0>
 80081f6:	9209      	str	r2, [sp, #36]	; 0x24
 80081f8:	e7f3      	b.n	80081e2 <_dtoa_r+0x7f2>
 80081fa:	d082      	beq.n	8008102 <_dtoa_r+0x712>
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	321c      	adds	r2, #28
 8008200:	4413      	add	r3, r2
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	4490      	add	r8, r2
 8008208:	4413      	add	r3, r2
 800820a:	e779      	b.n	8008100 <_dtoa_r+0x710>
 800820c:	4602      	mov	r2, r0
 800820e:	e7f5      	b.n	80081fc <_dtoa_r+0x80c>
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	dc36      	bgt.n	8008284 <_dtoa_r+0x894>
 8008216:	9b06      	ldr	r3, [sp, #24]
 8008218:	2b02      	cmp	r3, #2
 800821a:	dd33      	ble.n	8008284 <_dtoa_r+0x894>
 800821c:	46ca      	mov	sl, r9
 800821e:	f1ba 0f00 	cmp.w	sl, #0
 8008222:	d10d      	bne.n	8008240 <_dtoa_r+0x850>
 8008224:	4621      	mov	r1, r4
 8008226:	4653      	mov	r3, sl
 8008228:	2205      	movs	r2, #5
 800822a:	4630      	mov	r0, r6
 800822c:	f000 faae 	bl	800878c <__multadd>
 8008230:	4601      	mov	r1, r0
 8008232:	4604      	mov	r4, r0
 8008234:	4628      	mov	r0, r5
 8008236:	f000 fcc3 	bl	8008bc0 <__mcmp>
 800823a:	2800      	cmp	r0, #0
 800823c:	f73f ade4 	bgt.w	8007e08 <_dtoa_r+0x418>
 8008240:	9b08      	ldr	r3, [sp, #32]
 8008242:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008246:	ea6f 0b03 	mvn.w	fp, r3
 800824a:	f04f 0900 	mov.w	r9, #0
 800824e:	4621      	mov	r1, r4
 8008250:	4630      	mov	r0, r6
 8008252:	f000 fa79 	bl	8008748 <_Bfree>
 8008256:	2f00      	cmp	r7, #0
 8008258:	f43f aea1 	beq.w	8007f9e <_dtoa_r+0x5ae>
 800825c:	f1b9 0f00 	cmp.w	r9, #0
 8008260:	d005      	beq.n	800826e <_dtoa_r+0x87e>
 8008262:	45b9      	cmp	r9, r7
 8008264:	d003      	beq.n	800826e <_dtoa_r+0x87e>
 8008266:	4649      	mov	r1, r9
 8008268:	4630      	mov	r0, r6
 800826a:	f000 fa6d 	bl	8008748 <_Bfree>
 800826e:	4639      	mov	r1, r7
 8008270:	4630      	mov	r0, r6
 8008272:	f000 fa69 	bl	8008748 <_Bfree>
 8008276:	e692      	b.n	8007f9e <_dtoa_r+0x5ae>
 8008278:	2400      	movs	r4, #0
 800827a:	4627      	mov	r7, r4
 800827c:	e7e0      	b.n	8008240 <_dtoa_r+0x850>
 800827e:	4693      	mov	fp, r2
 8008280:	4627      	mov	r7, r4
 8008282:	e5c1      	b.n	8007e08 <_dtoa_r+0x418>
 8008284:	9b07      	ldr	r3, [sp, #28]
 8008286:	46ca      	mov	sl, r9
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8100 	beq.w	800848e <_dtoa_r+0xa9e>
 800828e:	f1b8 0f00 	cmp.w	r8, #0
 8008292:	dd05      	ble.n	80082a0 <_dtoa_r+0x8b0>
 8008294:	4639      	mov	r1, r7
 8008296:	4642      	mov	r2, r8
 8008298:	4630      	mov	r0, r6
 800829a:	f000 fc25 	bl	8008ae8 <__lshift>
 800829e:	4607      	mov	r7, r0
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d05d      	beq.n	8008362 <_dtoa_r+0x972>
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 fa0d 	bl	80086c8 <_Balloc>
 80082ae:	4680      	mov	r8, r0
 80082b0:	b928      	cbnz	r0, 80082be <_dtoa_r+0x8ce>
 80082b2:	4b82      	ldr	r3, [pc, #520]	; (80084bc <_dtoa_r+0xacc>)
 80082b4:	4602      	mov	r2, r0
 80082b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80082ba:	f7ff bbb1 	b.w	8007a20 <_dtoa_r+0x30>
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	3202      	adds	r2, #2
 80082c2:	0092      	lsls	r2, r2, #2
 80082c4:	f107 010c 	add.w	r1, r7, #12
 80082c8:	300c      	adds	r0, #12
 80082ca:	f001 fb3d 	bl	8009948 <memcpy>
 80082ce:	2201      	movs	r2, #1
 80082d0:	4641      	mov	r1, r8
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 fc08 	bl	8008ae8 <__lshift>
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	3301      	adds	r3, #1
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	4453      	add	r3, sl
 80082e2:	9308      	str	r3, [sp, #32]
 80082e4:	9b02      	ldr	r3, [sp, #8]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	46b9      	mov	r9, r7
 80082ec:	9307      	str	r3, [sp, #28]
 80082ee:	4607      	mov	r7, r0
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	4621      	mov	r1, r4
 80082f4:	3b01      	subs	r3, #1
 80082f6:	4628      	mov	r0, r5
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	f7ff faee 	bl	80078da <quorem>
 80082fe:	4603      	mov	r3, r0
 8008300:	3330      	adds	r3, #48	; 0x30
 8008302:	9005      	str	r0, [sp, #20]
 8008304:	4649      	mov	r1, r9
 8008306:	4628      	mov	r0, r5
 8008308:	9309      	str	r3, [sp, #36]	; 0x24
 800830a:	f000 fc59 	bl	8008bc0 <__mcmp>
 800830e:	463a      	mov	r2, r7
 8008310:	4682      	mov	sl, r0
 8008312:	4621      	mov	r1, r4
 8008314:	4630      	mov	r0, r6
 8008316:	f000 fc6f 	bl	8008bf8 <__mdiff>
 800831a:	68c2      	ldr	r2, [r0, #12]
 800831c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831e:	4680      	mov	r8, r0
 8008320:	bb0a      	cbnz	r2, 8008366 <_dtoa_r+0x976>
 8008322:	4601      	mov	r1, r0
 8008324:	4628      	mov	r0, r5
 8008326:	f000 fc4b 	bl	8008bc0 <__mcmp>
 800832a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832c:	4602      	mov	r2, r0
 800832e:	4641      	mov	r1, r8
 8008330:	4630      	mov	r0, r6
 8008332:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008336:	f000 fa07 	bl	8008748 <_Bfree>
 800833a:	9b06      	ldr	r3, [sp, #24]
 800833c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008342:	ea43 0102 	orr.w	r1, r3, r2
 8008346:	9b07      	ldr	r3, [sp, #28]
 8008348:	4319      	orrs	r1, r3
 800834a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834c:	d10d      	bne.n	800836a <_dtoa_r+0x97a>
 800834e:	2b39      	cmp	r3, #57	; 0x39
 8008350:	d029      	beq.n	80083a6 <_dtoa_r+0x9b6>
 8008352:	f1ba 0f00 	cmp.w	sl, #0
 8008356:	dd01      	ble.n	800835c <_dtoa_r+0x96c>
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	3331      	adds	r3, #49	; 0x31
 800835c:	9a02      	ldr	r2, [sp, #8]
 800835e:	7013      	strb	r3, [r2, #0]
 8008360:	e775      	b.n	800824e <_dtoa_r+0x85e>
 8008362:	4638      	mov	r0, r7
 8008364:	e7b8      	b.n	80082d8 <_dtoa_r+0x8e8>
 8008366:	2201      	movs	r2, #1
 8008368:	e7e1      	b.n	800832e <_dtoa_r+0x93e>
 800836a:	f1ba 0f00 	cmp.w	sl, #0
 800836e:	db06      	blt.n	800837e <_dtoa_r+0x98e>
 8008370:	9906      	ldr	r1, [sp, #24]
 8008372:	ea41 0a0a 	orr.w	sl, r1, sl
 8008376:	9907      	ldr	r1, [sp, #28]
 8008378:	ea5a 0a01 	orrs.w	sl, sl, r1
 800837c:	d120      	bne.n	80083c0 <_dtoa_r+0x9d0>
 800837e:	2a00      	cmp	r2, #0
 8008380:	ddec      	ble.n	800835c <_dtoa_r+0x96c>
 8008382:	4629      	mov	r1, r5
 8008384:	2201      	movs	r2, #1
 8008386:	4630      	mov	r0, r6
 8008388:	9304      	str	r3, [sp, #16]
 800838a:	f000 fbad 	bl	8008ae8 <__lshift>
 800838e:	4621      	mov	r1, r4
 8008390:	4605      	mov	r5, r0
 8008392:	f000 fc15 	bl	8008bc0 <__mcmp>
 8008396:	2800      	cmp	r0, #0
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	dc02      	bgt.n	80083a2 <_dtoa_r+0x9b2>
 800839c:	d1de      	bne.n	800835c <_dtoa_r+0x96c>
 800839e:	07da      	lsls	r2, r3, #31
 80083a0:	d5dc      	bpl.n	800835c <_dtoa_r+0x96c>
 80083a2:	2b39      	cmp	r3, #57	; 0x39
 80083a4:	d1d8      	bne.n	8008358 <_dtoa_r+0x968>
 80083a6:	9a02      	ldr	r2, [sp, #8]
 80083a8:	2339      	movs	r3, #57	; 0x39
 80083aa:	7013      	strb	r3, [r2, #0]
 80083ac:	4643      	mov	r3, r8
 80083ae:	4698      	mov	r8, r3
 80083b0:	3b01      	subs	r3, #1
 80083b2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80083b6:	2a39      	cmp	r2, #57	; 0x39
 80083b8:	d051      	beq.n	800845e <_dtoa_r+0xa6e>
 80083ba:	3201      	adds	r2, #1
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	e746      	b.n	800824e <_dtoa_r+0x85e>
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	dd03      	ble.n	80083cc <_dtoa_r+0x9dc>
 80083c4:	2b39      	cmp	r3, #57	; 0x39
 80083c6:	d0ee      	beq.n	80083a6 <_dtoa_r+0x9b6>
 80083c8:	3301      	adds	r3, #1
 80083ca:	e7c7      	b.n	800835c <_dtoa_r+0x96c>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	9908      	ldr	r1, [sp, #32]
 80083d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80083d4:	428a      	cmp	r2, r1
 80083d6:	d02b      	beq.n	8008430 <_dtoa_r+0xa40>
 80083d8:	4629      	mov	r1, r5
 80083da:	2300      	movs	r3, #0
 80083dc:	220a      	movs	r2, #10
 80083de:	4630      	mov	r0, r6
 80083e0:	f000 f9d4 	bl	800878c <__multadd>
 80083e4:	45b9      	cmp	r9, r7
 80083e6:	4605      	mov	r5, r0
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	f04f 020a 	mov.w	r2, #10
 80083f0:	4649      	mov	r1, r9
 80083f2:	4630      	mov	r0, r6
 80083f4:	d107      	bne.n	8008406 <_dtoa_r+0xa16>
 80083f6:	f000 f9c9 	bl	800878c <__multadd>
 80083fa:	4681      	mov	r9, r0
 80083fc:	4607      	mov	r7, r0
 80083fe:	9b04      	ldr	r3, [sp, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	e774      	b.n	80082f0 <_dtoa_r+0x900>
 8008406:	f000 f9c1 	bl	800878c <__multadd>
 800840a:	4639      	mov	r1, r7
 800840c:	4681      	mov	r9, r0
 800840e:	2300      	movs	r3, #0
 8008410:	220a      	movs	r2, #10
 8008412:	4630      	mov	r0, r6
 8008414:	f000 f9ba 	bl	800878c <__multadd>
 8008418:	4607      	mov	r7, r0
 800841a:	e7f0      	b.n	80083fe <_dtoa_r+0xa0e>
 800841c:	f1ba 0f00 	cmp.w	sl, #0
 8008420:	9a01      	ldr	r2, [sp, #4]
 8008422:	bfcc      	ite	gt
 8008424:	46d0      	movgt	r8, sl
 8008426:	f04f 0801 	movle.w	r8, #1
 800842a:	4490      	add	r8, r2
 800842c:	f04f 0900 	mov.w	r9, #0
 8008430:	4629      	mov	r1, r5
 8008432:	2201      	movs	r2, #1
 8008434:	4630      	mov	r0, r6
 8008436:	9302      	str	r3, [sp, #8]
 8008438:	f000 fb56 	bl	8008ae8 <__lshift>
 800843c:	4621      	mov	r1, r4
 800843e:	4605      	mov	r5, r0
 8008440:	f000 fbbe 	bl	8008bc0 <__mcmp>
 8008444:	2800      	cmp	r0, #0
 8008446:	dcb1      	bgt.n	80083ac <_dtoa_r+0x9bc>
 8008448:	d102      	bne.n	8008450 <_dtoa_r+0xa60>
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	07db      	lsls	r3, r3, #31
 800844e:	d4ad      	bmi.n	80083ac <_dtoa_r+0x9bc>
 8008450:	4643      	mov	r3, r8
 8008452:	4698      	mov	r8, r3
 8008454:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008458:	2a30      	cmp	r2, #48	; 0x30
 800845a:	d0fa      	beq.n	8008452 <_dtoa_r+0xa62>
 800845c:	e6f7      	b.n	800824e <_dtoa_r+0x85e>
 800845e:	9a01      	ldr	r2, [sp, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d1a4      	bne.n	80083ae <_dtoa_r+0x9be>
 8008464:	f10b 0b01 	add.w	fp, fp, #1
 8008468:	2331      	movs	r3, #49	; 0x31
 800846a:	e778      	b.n	800835e <_dtoa_r+0x96e>
 800846c:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <_dtoa_r+0xad0>)
 800846e:	f7ff bb2a 	b.w	8007ac6 <_dtoa_r+0xd6>
 8008472:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008474:	2b00      	cmp	r3, #0
 8008476:	f47f ab05 	bne.w	8007a84 <_dtoa_r+0x94>
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <_dtoa_r+0xad4>)
 800847c:	f7ff bb23 	b.w	8007ac6 <_dtoa_r+0xd6>
 8008480:	f1ba 0f00 	cmp.w	sl, #0
 8008484:	dc03      	bgt.n	800848e <_dtoa_r+0xa9e>
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	2b02      	cmp	r3, #2
 800848a:	f73f aec8 	bgt.w	800821e <_dtoa_r+0x82e>
 800848e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff fa20 	bl	80078da <quorem>
 800849a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800849e:	f808 3b01 	strb.w	r3, [r8], #1
 80084a2:	9a01      	ldr	r2, [sp, #4]
 80084a4:	eba8 0202 	sub.w	r2, r8, r2
 80084a8:	4592      	cmp	sl, r2
 80084aa:	ddb7      	ble.n	800841c <_dtoa_r+0xa2c>
 80084ac:	4629      	mov	r1, r5
 80084ae:	2300      	movs	r3, #0
 80084b0:	220a      	movs	r2, #10
 80084b2:	4630      	mov	r0, r6
 80084b4:	f000 f96a 	bl	800878c <__multadd>
 80084b8:	4605      	mov	r5, r0
 80084ba:	e7ea      	b.n	8008492 <_dtoa_r+0xaa2>
 80084bc:	0802fd6e 	.word	0x0802fd6e
 80084c0:	0802fefb 	.word	0x0802fefb
 80084c4:	0802fcf2 	.word	0x0802fcf2

080084c8 <_free_r>:
 80084c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d044      	beq.n	8008558 <_free_r+0x90>
 80084ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d2:	9001      	str	r0, [sp, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f1a1 0404 	sub.w	r4, r1, #4
 80084da:	bfb8      	it	lt
 80084dc:	18e4      	addlt	r4, r4, r3
 80084de:	f000 f8e7 	bl	80086b0 <__malloc_lock>
 80084e2:	4a1e      	ldr	r2, [pc, #120]	; (800855c <_free_r+0x94>)
 80084e4:	9801      	ldr	r0, [sp, #4]
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	b933      	cbnz	r3, 80084f8 <_free_r+0x30>
 80084ea:	6063      	str	r3, [r4, #4]
 80084ec:	6014      	str	r4, [r2, #0]
 80084ee:	b003      	add	sp, #12
 80084f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f4:	f000 b8e2 	b.w	80086bc <__malloc_unlock>
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d908      	bls.n	800850e <_free_r+0x46>
 80084fc:	6825      	ldr	r5, [r4, #0]
 80084fe:	1961      	adds	r1, r4, r5
 8008500:	428b      	cmp	r3, r1
 8008502:	bf01      	itttt	eq
 8008504:	6819      	ldreq	r1, [r3, #0]
 8008506:	685b      	ldreq	r3, [r3, #4]
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	e7ed      	b.n	80084ea <_free_r+0x22>
 800850e:	461a      	mov	r2, r3
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	b10b      	cbz	r3, 8008518 <_free_r+0x50>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d9fa      	bls.n	800850e <_free_r+0x46>
 8008518:	6811      	ldr	r1, [r2, #0]
 800851a:	1855      	adds	r5, r2, r1
 800851c:	42a5      	cmp	r5, r4
 800851e:	d10b      	bne.n	8008538 <_free_r+0x70>
 8008520:	6824      	ldr	r4, [r4, #0]
 8008522:	4421      	add	r1, r4
 8008524:	1854      	adds	r4, r2, r1
 8008526:	42a3      	cmp	r3, r4
 8008528:	6011      	str	r1, [r2, #0]
 800852a:	d1e0      	bne.n	80084ee <_free_r+0x26>
 800852c:	681c      	ldr	r4, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	6053      	str	r3, [r2, #4]
 8008532:	440c      	add	r4, r1
 8008534:	6014      	str	r4, [r2, #0]
 8008536:	e7da      	b.n	80084ee <_free_r+0x26>
 8008538:	d902      	bls.n	8008540 <_free_r+0x78>
 800853a:	230c      	movs	r3, #12
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	e7d6      	b.n	80084ee <_free_r+0x26>
 8008540:	6825      	ldr	r5, [r4, #0]
 8008542:	1961      	adds	r1, r4, r5
 8008544:	428b      	cmp	r3, r1
 8008546:	bf04      	itt	eq
 8008548:	6819      	ldreq	r1, [r3, #0]
 800854a:	685b      	ldreq	r3, [r3, #4]
 800854c:	6063      	str	r3, [r4, #4]
 800854e:	bf04      	itt	eq
 8008550:	1949      	addeq	r1, r1, r5
 8008552:	6021      	streq	r1, [r4, #0]
 8008554:	6054      	str	r4, [r2, #4]
 8008556:	e7ca      	b.n	80084ee <_free_r+0x26>
 8008558:	b003      	add	sp, #12
 800855a:	bd30      	pop	{r4, r5, pc}
 800855c:	2000073c 	.word	0x2000073c

08008560 <malloc>:
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <malloc+0xc>)
 8008562:	4601      	mov	r1, r0
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	f000 b823 	b.w	80085b0 <_malloc_r>
 800856a:	bf00      	nop
 800856c:	20000068 	.word	0x20000068

08008570 <sbrk_aligned>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4e0e      	ldr	r6, [pc, #56]	; (80085ac <sbrk_aligned+0x3c>)
 8008574:	460c      	mov	r4, r1
 8008576:	6831      	ldr	r1, [r6, #0]
 8008578:	4605      	mov	r5, r0
 800857a:	b911      	cbnz	r1, 8008582 <sbrk_aligned+0x12>
 800857c:	f001 f9d4 	bl	8009928 <_sbrk_r>
 8008580:	6030      	str	r0, [r6, #0]
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f001 f9cf 	bl	8009928 <_sbrk_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d00a      	beq.n	80085a4 <sbrk_aligned+0x34>
 800858e:	1cc4      	adds	r4, r0, #3
 8008590:	f024 0403 	bic.w	r4, r4, #3
 8008594:	42a0      	cmp	r0, r4
 8008596:	d007      	beq.n	80085a8 <sbrk_aligned+0x38>
 8008598:	1a21      	subs	r1, r4, r0
 800859a:	4628      	mov	r0, r5
 800859c:	f001 f9c4 	bl	8009928 <_sbrk_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d101      	bne.n	80085a8 <sbrk_aligned+0x38>
 80085a4:	f04f 34ff 	mov.w	r4, #4294967295
 80085a8:	4620      	mov	r0, r4
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	20000740 	.word	0x20000740

080085b0 <_malloc_r>:
 80085b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b4:	1ccd      	adds	r5, r1, #3
 80085b6:	f025 0503 	bic.w	r5, r5, #3
 80085ba:	3508      	adds	r5, #8
 80085bc:	2d0c      	cmp	r5, #12
 80085be:	bf38      	it	cc
 80085c0:	250c      	movcc	r5, #12
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	4607      	mov	r7, r0
 80085c6:	db01      	blt.n	80085cc <_malloc_r+0x1c>
 80085c8:	42a9      	cmp	r1, r5
 80085ca:	d905      	bls.n	80085d8 <_malloc_r+0x28>
 80085cc:	230c      	movs	r3, #12
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	2600      	movs	r6, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086ac <_malloc_r+0xfc>
 80085dc:	f000 f868 	bl	80086b0 <__malloc_lock>
 80085e0:	f8d8 3000 	ldr.w	r3, [r8]
 80085e4:	461c      	mov	r4, r3
 80085e6:	bb5c      	cbnz	r4, 8008640 <_malloc_r+0x90>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4638      	mov	r0, r7
 80085ec:	f7ff ffc0 	bl	8008570 <sbrk_aligned>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	4604      	mov	r4, r0
 80085f4:	d155      	bne.n	80086a2 <_malloc_r+0xf2>
 80085f6:	f8d8 4000 	ldr.w	r4, [r8]
 80085fa:	4626      	mov	r6, r4
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	d145      	bne.n	800868c <_malloc_r+0xdc>
 8008600:	2c00      	cmp	r4, #0
 8008602:	d048      	beq.n	8008696 <_malloc_r+0xe6>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	4631      	mov	r1, r6
 8008608:	4638      	mov	r0, r7
 800860a:	eb04 0903 	add.w	r9, r4, r3
 800860e:	f001 f98b 	bl	8009928 <_sbrk_r>
 8008612:	4581      	cmp	r9, r0
 8008614:	d13f      	bne.n	8008696 <_malloc_r+0xe6>
 8008616:	6821      	ldr	r1, [r4, #0]
 8008618:	1a6d      	subs	r5, r5, r1
 800861a:	4629      	mov	r1, r5
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff ffa7 	bl	8008570 <sbrk_aligned>
 8008622:	3001      	adds	r0, #1
 8008624:	d037      	beq.n	8008696 <_malloc_r+0xe6>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	442b      	add	r3, r5
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	f8d8 3000 	ldr.w	r3, [r8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d038      	beq.n	80086a6 <_malloc_r+0xf6>
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	42a2      	cmp	r2, r4
 8008638:	d12b      	bne.n	8008692 <_malloc_r+0xe2>
 800863a:	2200      	movs	r2, #0
 800863c:	605a      	str	r2, [r3, #4]
 800863e:	e00f      	b.n	8008660 <_malloc_r+0xb0>
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	1b52      	subs	r2, r2, r5
 8008644:	d41f      	bmi.n	8008686 <_malloc_r+0xd6>
 8008646:	2a0b      	cmp	r2, #11
 8008648:	d917      	bls.n	800867a <_malloc_r+0xca>
 800864a:	1961      	adds	r1, r4, r5
 800864c:	42a3      	cmp	r3, r4
 800864e:	6025      	str	r5, [r4, #0]
 8008650:	bf18      	it	ne
 8008652:	6059      	strne	r1, [r3, #4]
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	bf08      	it	eq
 8008658:	f8c8 1000 	streq.w	r1, [r8]
 800865c:	5162      	str	r2, [r4, r5]
 800865e:	604b      	str	r3, [r1, #4]
 8008660:	4638      	mov	r0, r7
 8008662:	f104 060b 	add.w	r6, r4, #11
 8008666:	f000 f829 	bl	80086bc <__malloc_unlock>
 800866a:	f026 0607 	bic.w	r6, r6, #7
 800866e:	1d23      	adds	r3, r4, #4
 8008670:	1af2      	subs	r2, r6, r3
 8008672:	d0ae      	beq.n	80085d2 <_malloc_r+0x22>
 8008674:	1b9b      	subs	r3, r3, r6
 8008676:	50a3      	str	r3, [r4, r2]
 8008678:	e7ab      	b.n	80085d2 <_malloc_r+0x22>
 800867a:	42a3      	cmp	r3, r4
 800867c:	6862      	ldr	r2, [r4, #4]
 800867e:	d1dd      	bne.n	800863c <_malloc_r+0x8c>
 8008680:	f8c8 2000 	str.w	r2, [r8]
 8008684:	e7ec      	b.n	8008660 <_malloc_r+0xb0>
 8008686:	4623      	mov	r3, r4
 8008688:	6864      	ldr	r4, [r4, #4]
 800868a:	e7ac      	b.n	80085e6 <_malloc_r+0x36>
 800868c:	4634      	mov	r4, r6
 800868e:	6876      	ldr	r6, [r6, #4]
 8008690:	e7b4      	b.n	80085fc <_malloc_r+0x4c>
 8008692:	4613      	mov	r3, r2
 8008694:	e7cc      	b.n	8008630 <_malloc_r+0x80>
 8008696:	230c      	movs	r3, #12
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	4638      	mov	r0, r7
 800869c:	f000 f80e 	bl	80086bc <__malloc_unlock>
 80086a0:	e797      	b.n	80085d2 <_malloc_r+0x22>
 80086a2:	6025      	str	r5, [r4, #0]
 80086a4:	e7dc      	b.n	8008660 <_malloc_r+0xb0>
 80086a6:	605b      	str	r3, [r3, #4]
 80086a8:	deff      	udf	#255	; 0xff
 80086aa:	bf00      	nop
 80086ac:	2000073c 	.word	0x2000073c

080086b0 <__malloc_lock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	; (80086b8 <__malloc_lock+0x8>)
 80086b2:	f7ff b910 	b.w	80078d6 <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	20000738 	.word	0x20000738

080086bc <__malloc_unlock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__malloc_unlock+0x8>)
 80086be:	f7ff b90b 	b.w	80078d8 <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	20000738 	.word	0x20000738

080086c8 <_Balloc>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	69c6      	ldr	r6, [r0, #28]
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	b976      	cbnz	r6, 80086f0 <_Balloc+0x28>
 80086d2:	2010      	movs	r0, #16
 80086d4:	f7ff ff44 	bl	8008560 <malloc>
 80086d8:	4602      	mov	r2, r0
 80086da:	61e0      	str	r0, [r4, #28]
 80086dc:	b920      	cbnz	r0, 80086e8 <_Balloc+0x20>
 80086de:	4b18      	ldr	r3, [pc, #96]	; (8008740 <_Balloc+0x78>)
 80086e0:	4818      	ldr	r0, [pc, #96]	; (8008744 <_Balloc+0x7c>)
 80086e2:	216b      	movs	r1, #107	; 0x6b
 80086e4:	f001 f93e 	bl	8009964 <__assert_func>
 80086e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ec:	6006      	str	r6, [r0, #0]
 80086ee:	60c6      	str	r6, [r0, #12]
 80086f0:	69e6      	ldr	r6, [r4, #28]
 80086f2:	68f3      	ldr	r3, [r6, #12]
 80086f4:	b183      	cbz	r3, 8008718 <_Balloc+0x50>
 80086f6:	69e3      	ldr	r3, [r4, #28]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086fe:	b9b8      	cbnz	r0, 8008730 <_Balloc+0x68>
 8008700:	2101      	movs	r1, #1
 8008702:	fa01 f605 	lsl.w	r6, r1, r5
 8008706:	1d72      	adds	r2, r6, #5
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	4620      	mov	r0, r4
 800870c:	f001 f948 	bl	80099a0 <_calloc_r>
 8008710:	b160      	cbz	r0, 800872c <_Balloc+0x64>
 8008712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008716:	e00e      	b.n	8008736 <_Balloc+0x6e>
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	2104      	movs	r1, #4
 800871c:	4620      	mov	r0, r4
 800871e:	f001 f93f 	bl	80099a0 <_calloc_r>
 8008722:	69e3      	ldr	r3, [r4, #28]
 8008724:	60f0      	str	r0, [r6, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e4      	bne.n	80086f6 <_Balloc+0x2e>
 800872c:	2000      	movs	r0, #0
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	6802      	ldr	r2, [r0, #0]
 8008732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008736:	2300      	movs	r3, #0
 8008738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800873c:	e7f7      	b.n	800872e <_Balloc+0x66>
 800873e:	bf00      	nop
 8008740:	0802fcff 	.word	0x0802fcff
 8008744:	0802fd7f 	.word	0x0802fd7f

08008748 <_Bfree>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	69c6      	ldr	r6, [r0, #28]
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	b976      	cbnz	r6, 8008770 <_Bfree+0x28>
 8008752:	2010      	movs	r0, #16
 8008754:	f7ff ff04 	bl	8008560 <malloc>
 8008758:	4602      	mov	r2, r0
 800875a:	61e8      	str	r0, [r5, #28]
 800875c:	b920      	cbnz	r0, 8008768 <_Bfree+0x20>
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <_Bfree+0x3c>)
 8008760:	4809      	ldr	r0, [pc, #36]	; (8008788 <_Bfree+0x40>)
 8008762:	218f      	movs	r1, #143	; 0x8f
 8008764:	f001 f8fe 	bl	8009964 <__assert_func>
 8008768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800876c:	6006      	str	r6, [r0, #0]
 800876e:	60c6      	str	r6, [r0, #12]
 8008770:	b13c      	cbz	r4, 8008782 <_Bfree+0x3a>
 8008772:	69eb      	ldr	r3, [r5, #28]
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800877c:	6021      	str	r1, [r4, #0]
 800877e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	0802fcff 	.word	0x0802fcff
 8008788:	0802fd7f 	.word	0x0802fd7f

0800878c <__multadd>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	690d      	ldr	r5, [r1, #16]
 8008792:	4607      	mov	r7, r0
 8008794:	460c      	mov	r4, r1
 8008796:	461e      	mov	r6, r3
 8008798:	f101 0c14 	add.w	ip, r1, #20
 800879c:	2000      	movs	r0, #0
 800879e:	f8dc 3000 	ldr.w	r3, [ip]
 80087a2:	b299      	uxth	r1, r3
 80087a4:	fb02 6101 	mla	r1, r2, r1, r6
 80087a8:	0c1e      	lsrs	r6, r3, #16
 80087aa:	0c0b      	lsrs	r3, r1, #16
 80087ac:	fb02 3306 	mla	r3, r2, r6, r3
 80087b0:	b289      	uxth	r1, r1
 80087b2:	3001      	adds	r0, #1
 80087b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087b8:	4285      	cmp	r5, r0
 80087ba:	f84c 1b04 	str.w	r1, [ip], #4
 80087be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087c2:	dcec      	bgt.n	800879e <__multadd+0x12>
 80087c4:	b30e      	cbz	r6, 800880a <__multadd+0x7e>
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	dc19      	bgt.n	8008800 <__multadd+0x74>
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	4638      	mov	r0, r7
 80087d0:	3101      	adds	r1, #1
 80087d2:	f7ff ff79 	bl	80086c8 <_Balloc>
 80087d6:	4680      	mov	r8, r0
 80087d8:	b928      	cbnz	r0, 80087e6 <__multadd+0x5a>
 80087da:	4602      	mov	r2, r0
 80087dc:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <__multadd+0x84>)
 80087de:	480d      	ldr	r0, [pc, #52]	; (8008814 <__multadd+0x88>)
 80087e0:	21ba      	movs	r1, #186	; 0xba
 80087e2:	f001 f8bf 	bl	8009964 <__assert_func>
 80087e6:	6922      	ldr	r2, [r4, #16]
 80087e8:	3202      	adds	r2, #2
 80087ea:	f104 010c 	add.w	r1, r4, #12
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	300c      	adds	r0, #12
 80087f2:	f001 f8a9 	bl	8009948 <memcpy>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff ffa5 	bl	8008748 <_Bfree>
 80087fe:	4644      	mov	r4, r8
 8008800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008804:	3501      	adds	r5, #1
 8008806:	615e      	str	r6, [r3, #20]
 8008808:	6125      	str	r5, [r4, #16]
 800880a:	4620      	mov	r0, r4
 800880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008810:	0802fd6e 	.word	0x0802fd6e
 8008814:	0802fd7f 	.word	0x0802fd7f

08008818 <__hi0bits>:
 8008818:	0c03      	lsrs	r3, r0, #16
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	b9d3      	cbnz	r3, 8008854 <__hi0bits+0x3c>
 800881e:	0400      	lsls	r0, r0, #16
 8008820:	2310      	movs	r3, #16
 8008822:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008826:	bf04      	itt	eq
 8008828:	0200      	lsleq	r0, r0, #8
 800882a:	3308      	addeq	r3, #8
 800882c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008830:	bf04      	itt	eq
 8008832:	0100      	lsleq	r0, r0, #4
 8008834:	3304      	addeq	r3, #4
 8008836:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800883a:	bf04      	itt	eq
 800883c:	0080      	lsleq	r0, r0, #2
 800883e:	3302      	addeq	r3, #2
 8008840:	2800      	cmp	r0, #0
 8008842:	db05      	blt.n	8008850 <__hi0bits+0x38>
 8008844:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008848:	f103 0301 	add.w	r3, r3, #1
 800884c:	bf08      	it	eq
 800884e:	2320      	moveq	r3, #32
 8008850:	4618      	mov	r0, r3
 8008852:	4770      	bx	lr
 8008854:	2300      	movs	r3, #0
 8008856:	e7e4      	b.n	8008822 <__hi0bits+0xa>

08008858 <__lo0bits>:
 8008858:	6803      	ldr	r3, [r0, #0]
 800885a:	f013 0207 	ands.w	r2, r3, #7
 800885e:	d00c      	beq.n	800887a <__lo0bits+0x22>
 8008860:	07d9      	lsls	r1, r3, #31
 8008862:	d422      	bmi.n	80088aa <__lo0bits+0x52>
 8008864:	079a      	lsls	r2, r3, #30
 8008866:	bf49      	itett	mi
 8008868:	085b      	lsrmi	r3, r3, #1
 800886a:	089b      	lsrpl	r3, r3, #2
 800886c:	6003      	strmi	r3, [r0, #0]
 800886e:	2201      	movmi	r2, #1
 8008870:	bf5c      	itt	pl
 8008872:	6003      	strpl	r3, [r0, #0]
 8008874:	2202      	movpl	r2, #2
 8008876:	4610      	mov	r0, r2
 8008878:	4770      	bx	lr
 800887a:	b299      	uxth	r1, r3
 800887c:	b909      	cbnz	r1, 8008882 <__lo0bits+0x2a>
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	2210      	movs	r2, #16
 8008882:	b2d9      	uxtb	r1, r3
 8008884:	b909      	cbnz	r1, 800888a <__lo0bits+0x32>
 8008886:	3208      	adds	r2, #8
 8008888:	0a1b      	lsrs	r3, r3, #8
 800888a:	0719      	lsls	r1, r3, #28
 800888c:	bf04      	itt	eq
 800888e:	091b      	lsreq	r3, r3, #4
 8008890:	3204      	addeq	r2, #4
 8008892:	0799      	lsls	r1, r3, #30
 8008894:	bf04      	itt	eq
 8008896:	089b      	lsreq	r3, r3, #2
 8008898:	3202      	addeq	r2, #2
 800889a:	07d9      	lsls	r1, r3, #31
 800889c:	d403      	bmi.n	80088a6 <__lo0bits+0x4e>
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	f102 0201 	add.w	r2, r2, #1
 80088a4:	d003      	beq.n	80088ae <__lo0bits+0x56>
 80088a6:	6003      	str	r3, [r0, #0]
 80088a8:	e7e5      	b.n	8008876 <__lo0bits+0x1e>
 80088aa:	2200      	movs	r2, #0
 80088ac:	e7e3      	b.n	8008876 <__lo0bits+0x1e>
 80088ae:	2220      	movs	r2, #32
 80088b0:	e7e1      	b.n	8008876 <__lo0bits+0x1e>
	...

080088b4 <__i2b>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	2101      	movs	r1, #1
 80088ba:	f7ff ff05 	bl	80086c8 <_Balloc>
 80088be:	4602      	mov	r2, r0
 80088c0:	b928      	cbnz	r0, 80088ce <__i2b+0x1a>
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <__i2b+0x24>)
 80088c4:	4805      	ldr	r0, [pc, #20]	; (80088dc <__i2b+0x28>)
 80088c6:	f240 1145 	movw	r1, #325	; 0x145
 80088ca:	f001 f84b 	bl	8009964 <__assert_func>
 80088ce:	2301      	movs	r3, #1
 80088d0:	6144      	str	r4, [r0, #20]
 80088d2:	6103      	str	r3, [r0, #16]
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	bf00      	nop
 80088d8:	0802fd6e 	.word	0x0802fd6e
 80088dc:	0802fd7f 	.word	0x0802fd7f

080088e0 <__multiply>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	4691      	mov	r9, r2
 80088e6:	690a      	ldr	r2, [r1, #16]
 80088e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	bfb8      	it	lt
 80088f0:	460b      	movlt	r3, r1
 80088f2:	460c      	mov	r4, r1
 80088f4:	bfbc      	itt	lt
 80088f6:	464c      	movlt	r4, r9
 80088f8:	4699      	movlt	r9, r3
 80088fa:	6927      	ldr	r7, [r4, #16]
 80088fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008900:	68a3      	ldr	r3, [r4, #8]
 8008902:	6861      	ldr	r1, [r4, #4]
 8008904:	eb07 060a 	add.w	r6, r7, sl
 8008908:	42b3      	cmp	r3, r6
 800890a:	b085      	sub	sp, #20
 800890c:	bfb8      	it	lt
 800890e:	3101      	addlt	r1, #1
 8008910:	f7ff feda 	bl	80086c8 <_Balloc>
 8008914:	b930      	cbnz	r0, 8008924 <__multiply+0x44>
 8008916:	4602      	mov	r2, r0
 8008918:	4b44      	ldr	r3, [pc, #272]	; (8008a2c <__multiply+0x14c>)
 800891a:	4845      	ldr	r0, [pc, #276]	; (8008a30 <__multiply+0x150>)
 800891c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008920:	f001 f820 	bl	8009964 <__assert_func>
 8008924:	f100 0514 	add.w	r5, r0, #20
 8008928:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800892c:	462b      	mov	r3, r5
 800892e:	2200      	movs	r2, #0
 8008930:	4543      	cmp	r3, r8
 8008932:	d321      	bcc.n	8008978 <__multiply+0x98>
 8008934:	f104 0314 	add.w	r3, r4, #20
 8008938:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800893c:	f109 0314 	add.w	r3, r9, #20
 8008940:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008944:	9202      	str	r2, [sp, #8]
 8008946:	1b3a      	subs	r2, r7, r4
 8008948:	3a15      	subs	r2, #21
 800894a:	f022 0203 	bic.w	r2, r2, #3
 800894e:	3204      	adds	r2, #4
 8008950:	f104 0115 	add.w	r1, r4, #21
 8008954:	428f      	cmp	r7, r1
 8008956:	bf38      	it	cc
 8008958:	2204      	movcc	r2, #4
 800895a:	9201      	str	r2, [sp, #4]
 800895c:	9a02      	ldr	r2, [sp, #8]
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d80c      	bhi.n	800897e <__multiply+0x9e>
 8008964:	2e00      	cmp	r6, #0
 8008966:	dd03      	ble.n	8008970 <__multiply+0x90>
 8008968:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800896c:	2b00      	cmp	r3, #0
 800896e:	d05b      	beq.n	8008a28 <__multiply+0x148>
 8008970:	6106      	str	r6, [r0, #16]
 8008972:	b005      	add	sp, #20
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	f843 2b04 	str.w	r2, [r3], #4
 800897c:	e7d8      	b.n	8008930 <__multiply+0x50>
 800897e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008982:	f1ba 0f00 	cmp.w	sl, #0
 8008986:	d024      	beq.n	80089d2 <__multiply+0xf2>
 8008988:	f104 0e14 	add.w	lr, r4, #20
 800898c:	46a9      	mov	r9, r5
 800898e:	f04f 0c00 	mov.w	ip, #0
 8008992:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008996:	f8d9 1000 	ldr.w	r1, [r9]
 800899a:	fa1f fb82 	uxth.w	fp, r2
 800899e:	b289      	uxth	r1, r1
 80089a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80089a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089a8:	f8d9 2000 	ldr.w	r2, [r9]
 80089ac:	4461      	add	r1, ip
 80089ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80089b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089ba:	b289      	uxth	r1, r1
 80089bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089c0:	4577      	cmp	r7, lr
 80089c2:	f849 1b04 	str.w	r1, [r9], #4
 80089c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ca:	d8e2      	bhi.n	8008992 <__multiply+0xb2>
 80089cc:	9a01      	ldr	r2, [sp, #4]
 80089ce:	f845 c002 	str.w	ip, [r5, r2]
 80089d2:	9a03      	ldr	r2, [sp, #12]
 80089d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089d8:	3304      	adds	r3, #4
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	d021      	beq.n	8008a24 <__multiply+0x144>
 80089e0:	6829      	ldr	r1, [r5, #0]
 80089e2:	f104 0c14 	add.w	ip, r4, #20
 80089e6:	46ae      	mov	lr, r5
 80089e8:	f04f 0a00 	mov.w	sl, #0
 80089ec:	f8bc b000 	ldrh.w	fp, [ip]
 80089f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089f4:	fb09 220b 	mla	r2, r9, fp, r2
 80089f8:	4452      	add	r2, sl
 80089fa:	b289      	uxth	r1, r1
 80089fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a00:	f84e 1b04 	str.w	r1, [lr], #4
 8008a04:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a0c:	f8be 1000 	ldrh.w	r1, [lr]
 8008a10:	fb09 110a 	mla	r1, r9, sl, r1
 8008a14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a18:	4567      	cmp	r7, ip
 8008a1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a1e:	d8e5      	bhi.n	80089ec <__multiply+0x10c>
 8008a20:	9a01      	ldr	r2, [sp, #4]
 8008a22:	50a9      	str	r1, [r5, r2]
 8008a24:	3504      	adds	r5, #4
 8008a26:	e799      	b.n	800895c <__multiply+0x7c>
 8008a28:	3e01      	subs	r6, #1
 8008a2a:	e79b      	b.n	8008964 <__multiply+0x84>
 8008a2c:	0802fd6e 	.word	0x0802fd6e
 8008a30:	0802fd7f 	.word	0x0802fd7f

08008a34 <__pow5mult>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	4615      	mov	r5, r2
 8008a3a:	f012 0203 	ands.w	r2, r2, #3
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460f      	mov	r7, r1
 8008a42:	d007      	beq.n	8008a54 <__pow5mult+0x20>
 8008a44:	4c25      	ldr	r4, [pc, #148]	; (8008adc <__pow5mult+0xa8>)
 8008a46:	3a01      	subs	r2, #1
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a4e:	f7ff fe9d 	bl	800878c <__multadd>
 8008a52:	4607      	mov	r7, r0
 8008a54:	10ad      	asrs	r5, r5, #2
 8008a56:	d03d      	beq.n	8008ad4 <__pow5mult+0xa0>
 8008a58:	69f4      	ldr	r4, [r6, #28]
 8008a5a:	b97c      	cbnz	r4, 8008a7c <__pow5mult+0x48>
 8008a5c:	2010      	movs	r0, #16
 8008a5e:	f7ff fd7f 	bl	8008560 <malloc>
 8008a62:	4602      	mov	r2, r0
 8008a64:	61f0      	str	r0, [r6, #28]
 8008a66:	b928      	cbnz	r0, 8008a74 <__pow5mult+0x40>
 8008a68:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <__pow5mult+0xac>)
 8008a6a:	481e      	ldr	r0, [pc, #120]	; (8008ae4 <__pow5mult+0xb0>)
 8008a6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008a70:	f000 ff78 	bl	8009964 <__assert_func>
 8008a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a78:	6004      	str	r4, [r0, #0]
 8008a7a:	60c4      	str	r4, [r0, #12]
 8008a7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a84:	b94c      	cbnz	r4, 8008a9a <__pow5mult+0x66>
 8008a86:	f240 2171 	movw	r1, #625	; 0x271
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ff12 	bl	80088b4 <__i2b>
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a96:	4604      	mov	r4, r0
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	07eb      	lsls	r3, r5, #31
 8008aa0:	d50a      	bpl.n	8008ab8 <__pow5mult+0x84>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff ff1a 	bl	80088e0 <__multiply>
 8008aac:	4639      	mov	r1, r7
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff fe49 	bl	8008748 <_Bfree>
 8008ab6:	4647      	mov	r7, r8
 8008ab8:	106d      	asrs	r5, r5, #1
 8008aba:	d00b      	beq.n	8008ad4 <__pow5mult+0xa0>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	b938      	cbnz	r0, 8008ad0 <__pow5mult+0x9c>
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ff0b 	bl	80088e0 <__multiply>
 8008aca:	6020      	str	r0, [r4, #0]
 8008acc:	f8c0 9000 	str.w	r9, [r0]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e7e4      	b.n	8008a9e <__pow5mult+0x6a>
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ada:	bf00      	nop
 8008adc:	0802fec8 	.word	0x0802fec8
 8008ae0:	0802fcff 	.word	0x0802fcff
 8008ae4:	0802fd7f 	.word	0x0802fd7f

08008ae8 <__lshift>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	460c      	mov	r4, r1
 8008aee:	6849      	ldr	r1, [r1, #4]
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	4607      	mov	r7, r0
 8008afa:	4691      	mov	r9, r2
 8008afc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b00:	f108 0601 	add.w	r6, r8, #1
 8008b04:	42b3      	cmp	r3, r6
 8008b06:	db0b      	blt.n	8008b20 <__lshift+0x38>
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff fddd 	bl	80086c8 <_Balloc>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	b948      	cbnz	r0, 8008b26 <__lshift+0x3e>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b28      	ldr	r3, [pc, #160]	; (8008bb8 <__lshift+0xd0>)
 8008b16:	4829      	ldr	r0, [pc, #164]	; (8008bbc <__lshift+0xd4>)
 8008b18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008b1c:	f000 ff22 	bl	8009964 <__assert_func>
 8008b20:	3101      	adds	r1, #1
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	e7ee      	b.n	8008b04 <__lshift+0x1c>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f100 0114 	add.w	r1, r0, #20
 8008b2c:	f100 0210 	add.w	r2, r0, #16
 8008b30:	4618      	mov	r0, r3
 8008b32:	4553      	cmp	r3, sl
 8008b34:	db33      	blt.n	8008b9e <__lshift+0xb6>
 8008b36:	6920      	ldr	r0, [r4, #16]
 8008b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b3c:	f104 0314 	add.w	r3, r4, #20
 8008b40:	f019 091f 	ands.w	r9, r9, #31
 8008b44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b4c:	d02b      	beq.n	8008ba6 <__lshift+0xbe>
 8008b4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b52:	468a      	mov	sl, r1
 8008b54:	2200      	movs	r2, #0
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	fa00 f009 	lsl.w	r0, r0, r9
 8008b5c:	4310      	orrs	r0, r2
 8008b5e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b66:	459c      	cmp	ip, r3
 8008b68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b6c:	d8f3      	bhi.n	8008b56 <__lshift+0x6e>
 8008b6e:	ebac 0304 	sub.w	r3, ip, r4
 8008b72:	3b15      	subs	r3, #21
 8008b74:	f023 0303 	bic.w	r3, r3, #3
 8008b78:	3304      	adds	r3, #4
 8008b7a:	f104 0015 	add.w	r0, r4, #21
 8008b7e:	4584      	cmp	ip, r0
 8008b80:	bf38      	it	cc
 8008b82:	2304      	movcc	r3, #4
 8008b84:	50ca      	str	r2, [r1, r3]
 8008b86:	b10a      	cbz	r2, 8008b8c <__lshift+0xa4>
 8008b88:	f108 0602 	add.w	r6, r8, #2
 8008b8c:	3e01      	subs	r6, #1
 8008b8e:	4638      	mov	r0, r7
 8008b90:	612e      	str	r6, [r5, #16]
 8008b92:	4621      	mov	r1, r4
 8008b94:	f7ff fdd8 	bl	8008748 <_Bfree>
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	e7c5      	b.n	8008b32 <__lshift+0x4a>
 8008ba6:	3904      	subs	r1, #4
 8008ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bb0:	459c      	cmp	ip, r3
 8008bb2:	d8f9      	bhi.n	8008ba8 <__lshift+0xc0>
 8008bb4:	e7ea      	b.n	8008b8c <__lshift+0xa4>
 8008bb6:	bf00      	nop
 8008bb8:	0802fd6e 	.word	0x0802fd6e
 8008bbc:	0802fd7f 	.word	0x0802fd7f

08008bc0 <__mcmp>:
 8008bc0:	b530      	push	{r4, r5, lr}
 8008bc2:	6902      	ldr	r2, [r0, #16]
 8008bc4:	690c      	ldr	r4, [r1, #16]
 8008bc6:	1b12      	subs	r2, r2, r4
 8008bc8:	d10e      	bne.n	8008be8 <__mcmp+0x28>
 8008bca:	f100 0314 	add.w	r3, r0, #20
 8008bce:	3114      	adds	r1, #20
 8008bd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008be0:	42a5      	cmp	r5, r4
 8008be2:	d003      	beq.n	8008bec <__mcmp+0x2c>
 8008be4:	d305      	bcc.n	8008bf2 <__mcmp+0x32>
 8008be6:	2201      	movs	r2, #1
 8008be8:	4610      	mov	r0, r2
 8008bea:	bd30      	pop	{r4, r5, pc}
 8008bec:	4283      	cmp	r3, r0
 8008bee:	d3f3      	bcc.n	8008bd8 <__mcmp+0x18>
 8008bf0:	e7fa      	b.n	8008be8 <__mcmp+0x28>
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf6:	e7f7      	b.n	8008be8 <__mcmp+0x28>

08008bf8 <__mdiff>:
 8008bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	4606      	mov	r6, r0
 8008c00:	4611      	mov	r1, r2
 8008c02:	4620      	mov	r0, r4
 8008c04:	4690      	mov	r8, r2
 8008c06:	f7ff ffdb 	bl	8008bc0 <__mcmp>
 8008c0a:	1e05      	subs	r5, r0, #0
 8008c0c:	d110      	bne.n	8008c30 <__mdiff+0x38>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff fd59 	bl	80086c8 <_Balloc>
 8008c16:	b930      	cbnz	r0, 8008c26 <__mdiff+0x2e>
 8008c18:	4b3a      	ldr	r3, [pc, #232]	; (8008d04 <__mdiff+0x10c>)
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	f240 2137 	movw	r1, #567	; 0x237
 8008c20:	4839      	ldr	r0, [pc, #228]	; (8008d08 <__mdiff+0x110>)
 8008c22:	f000 fe9f 	bl	8009964 <__assert_func>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c30:	bfa4      	itt	ge
 8008c32:	4643      	movge	r3, r8
 8008c34:	46a0      	movge	r8, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c3c:	bfa6      	itte	ge
 8008c3e:	461c      	movge	r4, r3
 8008c40:	2500      	movge	r5, #0
 8008c42:	2501      	movlt	r5, #1
 8008c44:	f7ff fd40 	bl	80086c8 <_Balloc>
 8008c48:	b920      	cbnz	r0, 8008c54 <__mdiff+0x5c>
 8008c4a:	4b2e      	ldr	r3, [pc, #184]	; (8008d04 <__mdiff+0x10c>)
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	f240 2145 	movw	r1, #581	; 0x245
 8008c52:	e7e5      	b.n	8008c20 <__mdiff+0x28>
 8008c54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c58:	6926      	ldr	r6, [r4, #16]
 8008c5a:	60c5      	str	r5, [r0, #12]
 8008c5c:	f104 0914 	add.w	r9, r4, #20
 8008c60:	f108 0514 	add.w	r5, r8, #20
 8008c64:	f100 0e14 	add.w	lr, r0, #20
 8008c68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c70:	f108 0210 	add.w	r2, r8, #16
 8008c74:	46f2      	mov	sl, lr
 8008c76:	2100      	movs	r1, #0
 8008c78:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c80:	fa11 f88b 	uxtah	r8, r1, fp
 8008c84:	b299      	uxth	r1, r3
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	eba8 0801 	sub.w	r8, r8, r1
 8008c8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c94:	fa1f f888 	uxth.w	r8, r8
 8008c98:	1419      	asrs	r1, r3, #16
 8008c9a:	454e      	cmp	r6, r9
 8008c9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ca0:	f84a 3b04 	str.w	r3, [sl], #4
 8008ca4:	d8e8      	bhi.n	8008c78 <__mdiff+0x80>
 8008ca6:	1b33      	subs	r3, r6, r4
 8008ca8:	3b15      	subs	r3, #21
 8008caa:	f023 0303 	bic.w	r3, r3, #3
 8008cae:	3304      	adds	r3, #4
 8008cb0:	3415      	adds	r4, #21
 8008cb2:	42a6      	cmp	r6, r4
 8008cb4:	bf38      	it	cc
 8008cb6:	2304      	movcc	r3, #4
 8008cb8:	441d      	add	r5, r3
 8008cba:	4473      	add	r3, lr
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	462e      	mov	r6, r5
 8008cc0:	4566      	cmp	r6, ip
 8008cc2:	d30e      	bcc.n	8008ce2 <__mdiff+0xea>
 8008cc4:	f10c 0203 	add.w	r2, ip, #3
 8008cc8:	1b52      	subs	r2, r2, r5
 8008cca:	f022 0203 	bic.w	r2, r2, #3
 8008cce:	3d03      	subs	r5, #3
 8008cd0:	45ac      	cmp	ip, r5
 8008cd2:	bf38      	it	cc
 8008cd4:	2200      	movcc	r2, #0
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008cdc:	b17a      	cbz	r2, 8008cfe <__mdiff+0x106>
 8008cde:	6107      	str	r7, [r0, #16]
 8008ce0:	e7a4      	b.n	8008c2c <__mdiff+0x34>
 8008ce2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ce6:	fa11 f288 	uxtah	r2, r1, r8
 8008cea:	1414      	asrs	r4, r2, #16
 8008cec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008cf6:	f84e 2b04 	str.w	r2, [lr], #4
 8008cfa:	1421      	asrs	r1, r4, #16
 8008cfc:	e7e0      	b.n	8008cc0 <__mdiff+0xc8>
 8008cfe:	3f01      	subs	r7, #1
 8008d00:	e7ea      	b.n	8008cd8 <__mdiff+0xe0>
 8008d02:	bf00      	nop
 8008d04:	0802fd6e 	.word	0x0802fd6e
 8008d08:	0802fd7f 	.word	0x0802fd7f

08008d0c <__d2b>:
 8008d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	460f      	mov	r7, r1
 8008d12:	2101      	movs	r1, #1
 8008d14:	ec59 8b10 	vmov	r8, r9, d0
 8008d18:	4616      	mov	r6, r2
 8008d1a:	f7ff fcd5 	bl	80086c8 <_Balloc>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	b930      	cbnz	r0, 8008d30 <__d2b+0x24>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <__d2b+0xac>)
 8008d26:	4825      	ldr	r0, [pc, #148]	; (8008dbc <__d2b+0xb0>)
 8008d28:	f240 310f 	movw	r1, #783	; 0x30f
 8008d2c:	f000 fe1a 	bl	8009964 <__assert_func>
 8008d30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d38:	bb2d      	cbnz	r5, 8008d86 <__d2b+0x7a>
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d40:	d026      	beq.n	8008d90 <__d2b+0x84>
 8008d42:	4668      	mov	r0, sp
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	f7ff fd87 	bl	8008858 <__lo0bits>
 8008d4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d4e:	b1e8      	cbz	r0, 8008d8c <__d2b+0x80>
 8008d50:	f1c0 0320 	rsb	r3, r0, #32
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	40c2      	lsrs	r2, r0
 8008d5c:	6163      	str	r3, [r4, #20]
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	61a3      	str	r3, [r4, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf14      	ite	ne
 8008d68:	2202      	movne	r2, #2
 8008d6a:	2201      	moveq	r2, #1
 8008d6c:	6122      	str	r2, [r4, #16]
 8008d6e:	b1bd      	cbz	r5, 8008da0 <__d2b+0x94>
 8008d70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d74:	4405      	add	r5, r0
 8008d76:	603d      	str	r5, [r7, #0]
 8008d78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d7c:	6030      	str	r0, [r6, #0]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	b003      	add	sp, #12
 8008d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d8a:	e7d6      	b.n	8008d3a <__d2b+0x2e>
 8008d8c:	6161      	str	r1, [r4, #20]
 8008d8e:	e7e7      	b.n	8008d60 <__d2b+0x54>
 8008d90:	a801      	add	r0, sp, #4
 8008d92:	f7ff fd61 	bl	8008858 <__lo0bits>
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	6163      	str	r3, [r4, #20]
 8008d9a:	3020      	adds	r0, #32
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	e7e5      	b.n	8008d6c <__d2b+0x60>
 8008da0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008da4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008da8:	6038      	str	r0, [r7, #0]
 8008daa:	6918      	ldr	r0, [r3, #16]
 8008dac:	f7ff fd34 	bl	8008818 <__hi0bits>
 8008db0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008db4:	e7e2      	b.n	8008d7c <__d2b+0x70>
 8008db6:	bf00      	nop
 8008db8:	0802fd6e 	.word	0x0802fd6e
 8008dbc:	0802fd7f 	.word	0x0802fd7f

08008dc0 <__ssputs_r>:
 8008dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc4:	688e      	ldr	r6, [r1, #8]
 8008dc6:	461f      	mov	r7, r3
 8008dc8:	42be      	cmp	r6, r7
 8008dca:	680b      	ldr	r3, [r1, #0]
 8008dcc:	4682      	mov	sl, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4690      	mov	r8, r2
 8008dd2:	d82c      	bhi.n	8008e2e <__ssputs_r+0x6e>
 8008dd4:	898a      	ldrh	r2, [r1, #12]
 8008dd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dda:	d026      	beq.n	8008e2a <__ssputs_r+0x6a>
 8008ddc:	6965      	ldr	r5, [r4, #20]
 8008dde:	6909      	ldr	r1, [r1, #16]
 8008de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008de4:	eba3 0901 	sub.w	r9, r3, r1
 8008de8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dec:	1c7b      	adds	r3, r7, #1
 8008dee:	444b      	add	r3, r9
 8008df0:	106d      	asrs	r5, r5, #1
 8008df2:	429d      	cmp	r5, r3
 8008df4:	bf38      	it	cc
 8008df6:	461d      	movcc	r5, r3
 8008df8:	0553      	lsls	r3, r2, #21
 8008dfa:	d527      	bpl.n	8008e4c <__ssputs_r+0x8c>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	f7ff fbd7 	bl	80085b0 <_malloc_r>
 8008e02:	4606      	mov	r6, r0
 8008e04:	b360      	cbz	r0, 8008e60 <__ssputs_r+0xa0>
 8008e06:	6921      	ldr	r1, [r4, #16]
 8008e08:	464a      	mov	r2, r9
 8008e0a:	f000 fd9d 	bl	8009948 <memcpy>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	6126      	str	r6, [r4, #16]
 8008e1c:	6165      	str	r5, [r4, #20]
 8008e1e:	444e      	add	r6, r9
 8008e20:	eba5 0509 	sub.w	r5, r5, r9
 8008e24:	6026      	str	r6, [r4, #0]
 8008e26:	60a5      	str	r5, [r4, #8]
 8008e28:	463e      	mov	r6, r7
 8008e2a:	42be      	cmp	r6, r7
 8008e2c:	d900      	bls.n	8008e30 <__ssputs_r+0x70>
 8008e2e:	463e      	mov	r6, r7
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	4632      	mov	r2, r6
 8008e34:	4641      	mov	r1, r8
 8008e36:	f000 fd5c 	bl	80098f2 <memmove>
 8008e3a:	68a3      	ldr	r3, [r4, #8]
 8008e3c:	1b9b      	subs	r3, r3, r6
 8008e3e:	60a3      	str	r3, [r4, #8]
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	4433      	add	r3, r6
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	2000      	movs	r0, #0
 8008e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	f000 fdcf 	bl	80099f0 <_realloc_r>
 8008e52:	4606      	mov	r6, r0
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d1e0      	bne.n	8008e1a <__ssputs_r+0x5a>
 8008e58:	6921      	ldr	r1, [r4, #16]
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	f7ff fb34 	bl	80084c8 <_free_r>
 8008e60:	230c      	movs	r3, #12
 8008e62:	f8ca 3000 	str.w	r3, [sl]
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	e7e9      	b.n	8008e48 <__ssputs_r+0x88>

08008e74 <_svfiprintf_r>:
 8008e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	4698      	mov	r8, r3
 8008e7a:	898b      	ldrh	r3, [r1, #12]
 8008e7c:	061b      	lsls	r3, r3, #24
 8008e7e:	b09d      	sub	sp, #116	; 0x74
 8008e80:	4607      	mov	r7, r0
 8008e82:	460d      	mov	r5, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	d50e      	bpl.n	8008ea6 <_svfiprintf_r+0x32>
 8008e88:	690b      	ldr	r3, [r1, #16]
 8008e8a:	b963      	cbnz	r3, 8008ea6 <_svfiprintf_r+0x32>
 8008e8c:	2140      	movs	r1, #64	; 0x40
 8008e8e:	f7ff fb8f 	bl	80085b0 <_malloc_r>
 8008e92:	6028      	str	r0, [r5, #0]
 8008e94:	6128      	str	r0, [r5, #16]
 8008e96:	b920      	cbnz	r0, 8008ea2 <_svfiprintf_r+0x2e>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e0d0      	b.n	8009044 <_svfiprintf_r+0x1d0>
 8008ea2:	2340      	movs	r3, #64	; 0x40
 8008ea4:	616b      	str	r3, [r5, #20]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eaa:	2320      	movs	r3, #32
 8008eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb4:	2330      	movs	r3, #48	; 0x30
 8008eb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800905c <_svfiprintf_r+0x1e8>
 8008eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ebe:	f04f 0901 	mov.w	r9, #1
 8008ec2:	4623      	mov	r3, r4
 8008ec4:	469a      	mov	sl, r3
 8008ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eca:	b10a      	cbz	r2, 8008ed0 <_svfiprintf_r+0x5c>
 8008ecc:	2a25      	cmp	r2, #37	; 0x25
 8008ece:	d1f9      	bne.n	8008ec4 <_svfiprintf_r+0x50>
 8008ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed4:	d00b      	beq.n	8008eee <_svfiprintf_r+0x7a>
 8008ed6:	465b      	mov	r3, fp
 8008ed8:	4622      	mov	r2, r4
 8008eda:	4629      	mov	r1, r5
 8008edc:	4638      	mov	r0, r7
 8008ede:	f7ff ff6f 	bl	8008dc0 <__ssputs_r>
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f000 80a9 	beq.w	800903a <_svfiprintf_r+0x1c6>
 8008ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eea:	445a      	add	r2, fp
 8008eec:	9209      	str	r2, [sp, #36]	; 0x24
 8008eee:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80a1 	beq.w	800903a <_svfiprintf_r+0x1c6>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f02:	f10a 0a01 	add.w	sl, sl, #1
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8008f10:	4654      	mov	r4, sl
 8008f12:	2205      	movs	r2, #5
 8008f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f18:	4850      	ldr	r0, [pc, #320]	; (800905c <_svfiprintf_r+0x1e8>)
 8008f1a:	f7f7 f991 	bl	8000240 <memchr>
 8008f1e:	9a04      	ldr	r2, [sp, #16]
 8008f20:	b9d8      	cbnz	r0, 8008f5a <_svfiprintf_r+0xe6>
 8008f22:	06d0      	lsls	r0, r2, #27
 8008f24:	bf44      	itt	mi
 8008f26:	2320      	movmi	r3, #32
 8008f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2c:	0711      	lsls	r1, r2, #28
 8008f2e:	bf44      	itt	mi
 8008f30:	232b      	movmi	r3, #43	; 0x2b
 8008f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f36:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3c:	d015      	beq.n	8008f6a <_svfiprintf_r+0xf6>
 8008f3e:	9a07      	ldr	r2, [sp, #28]
 8008f40:	4654      	mov	r4, sl
 8008f42:	2000      	movs	r0, #0
 8008f44:	f04f 0c0a 	mov.w	ip, #10
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4e:	3b30      	subs	r3, #48	; 0x30
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d94d      	bls.n	8008ff0 <_svfiprintf_r+0x17c>
 8008f54:	b1b0      	cbz	r0, 8008f84 <_svfiprintf_r+0x110>
 8008f56:	9207      	str	r2, [sp, #28]
 8008f58:	e014      	b.n	8008f84 <_svfiprintf_r+0x110>
 8008f5a:	eba0 0308 	sub.w	r3, r0, r8
 8008f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f62:	4313      	orrs	r3, r2
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	46a2      	mov	sl, r4
 8008f68:	e7d2      	b.n	8008f10 <_svfiprintf_r+0x9c>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	1d19      	adds	r1, r3, #4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	9103      	str	r1, [sp, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfbb      	ittet	lt
 8008f76:	425b      	neglt	r3, r3
 8008f78:	f042 0202 	orrlt.w	r2, r2, #2
 8008f7c:	9307      	strge	r3, [sp, #28]
 8008f7e:	9307      	strlt	r3, [sp, #28]
 8008f80:	bfb8      	it	lt
 8008f82:	9204      	strlt	r2, [sp, #16]
 8008f84:	7823      	ldrb	r3, [r4, #0]
 8008f86:	2b2e      	cmp	r3, #46	; 0x2e
 8008f88:	d10c      	bne.n	8008fa4 <_svfiprintf_r+0x130>
 8008f8a:	7863      	ldrb	r3, [r4, #1]
 8008f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8e:	d134      	bne.n	8008ffa <_svfiprintf_r+0x186>
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	1d1a      	adds	r2, r3, #4
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	9203      	str	r2, [sp, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bfb8      	it	lt
 8008f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fa0:	3402      	adds	r4, #2
 8008fa2:	9305      	str	r3, [sp, #20]
 8008fa4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800906c <_svfiprintf_r+0x1f8>
 8008fa8:	7821      	ldrb	r1, [r4, #0]
 8008faa:	2203      	movs	r2, #3
 8008fac:	4650      	mov	r0, sl
 8008fae:	f7f7 f947 	bl	8000240 <memchr>
 8008fb2:	b138      	cbz	r0, 8008fc4 <_svfiprintf_r+0x150>
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	eba0 000a 	sub.w	r0, r0, sl
 8008fba:	2240      	movs	r2, #64	; 0x40
 8008fbc:	4082      	lsls	r2, r0
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	3401      	adds	r4, #1
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc8:	4825      	ldr	r0, [pc, #148]	; (8009060 <_svfiprintf_r+0x1ec>)
 8008fca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fce:	2206      	movs	r2, #6
 8008fd0:	f7f7 f936 	bl	8000240 <memchr>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d038      	beq.n	800904a <_svfiprintf_r+0x1d6>
 8008fd8:	4b22      	ldr	r3, [pc, #136]	; (8009064 <_svfiprintf_r+0x1f0>)
 8008fda:	bb1b      	cbnz	r3, 8009024 <_svfiprintf_r+0x1b0>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	3307      	adds	r3, #7
 8008fe0:	f023 0307 	bic.w	r3, r3, #7
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	9303      	str	r3, [sp, #12]
 8008fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fea:	4433      	add	r3, r6
 8008fec:	9309      	str	r3, [sp, #36]	; 0x24
 8008fee:	e768      	b.n	8008ec2 <_svfiprintf_r+0x4e>
 8008ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	e7a6      	b.n	8008f48 <_svfiprintf_r+0xd4>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	3401      	adds	r4, #1
 8008ffe:	9305      	str	r3, [sp, #20]
 8009000:	4619      	mov	r1, r3
 8009002:	f04f 0c0a 	mov.w	ip, #10
 8009006:	4620      	mov	r0, r4
 8009008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800900c:	3a30      	subs	r2, #48	; 0x30
 800900e:	2a09      	cmp	r2, #9
 8009010:	d903      	bls.n	800901a <_svfiprintf_r+0x1a6>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0c6      	beq.n	8008fa4 <_svfiprintf_r+0x130>
 8009016:	9105      	str	r1, [sp, #20]
 8009018:	e7c4      	b.n	8008fa4 <_svfiprintf_r+0x130>
 800901a:	fb0c 2101 	mla	r1, ip, r1, r2
 800901e:	4604      	mov	r4, r0
 8009020:	2301      	movs	r3, #1
 8009022:	e7f0      	b.n	8009006 <_svfiprintf_r+0x192>
 8009024:	ab03      	add	r3, sp, #12
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	462a      	mov	r2, r5
 800902a:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <_svfiprintf_r+0x1f4>)
 800902c:	a904      	add	r1, sp, #16
 800902e:	4638      	mov	r0, r7
 8009030:	f7fd fed6 	bl	8006de0 <_printf_float>
 8009034:	1c42      	adds	r2, r0, #1
 8009036:	4606      	mov	r6, r0
 8009038:	d1d6      	bne.n	8008fe8 <_svfiprintf_r+0x174>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	065b      	lsls	r3, r3, #25
 800903e:	f53f af2d 	bmi.w	8008e9c <_svfiprintf_r+0x28>
 8009042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009044:	b01d      	add	sp, #116	; 0x74
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904a:	ab03      	add	r3, sp, #12
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	462a      	mov	r2, r5
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <_svfiprintf_r+0x1f4>)
 8009052:	a904      	add	r1, sp, #16
 8009054:	4638      	mov	r0, r7
 8009056:	f7fe f94b 	bl	80072f0 <_printf_i>
 800905a:	e7eb      	b.n	8009034 <_svfiprintf_r+0x1c0>
 800905c:	0802fed4 	.word	0x0802fed4
 8009060:	0802fede 	.word	0x0802fede
 8009064:	08006de1 	.word	0x08006de1
 8009068:	08008dc1 	.word	0x08008dc1
 800906c:	0802feda 	.word	0x0802feda

08009070 <_sungetc_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	1c4b      	adds	r3, r1, #1
 8009074:	4614      	mov	r4, r2
 8009076:	d103      	bne.n	8009080 <_sungetc_r+0x10>
 8009078:	f04f 35ff 	mov.w	r5, #4294967295
 800907c:	4628      	mov	r0, r5
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	8993      	ldrh	r3, [r2, #12]
 8009082:	f023 0320 	bic.w	r3, r3, #32
 8009086:	8193      	strh	r3, [r2, #12]
 8009088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800908a:	6852      	ldr	r2, [r2, #4]
 800908c:	b2cd      	uxtb	r5, r1
 800908e:	b18b      	cbz	r3, 80090b4 <_sungetc_r+0x44>
 8009090:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009092:	4293      	cmp	r3, r2
 8009094:	dd08      	ble.n	80090a8 <_sungetc_r+0x38>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	1e5a      	subs	r2, r3, #1
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80090a0:	6863      	ldr	r3, [r4, #4]
 80090a2:	3301      	adds	r3, #1
 80090a4:	6063      	str	r3, [r4, #4]
 80090a6:	e7e9      	b.n	800907c <_sungetc_r+0xc>
 80090a8:	4621      	mov	r1, r4
 80090aa:	f000 fbe8 	bl	800987e <__submore>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d0f1      	beq.n	8009096 <_sungetc_r+0x26>
 80090b2:	e7e1      	b.n	8009078 <_sungetc_r+0x8>
 80090b4:	6921      	ldr	r1, [r4, #16]
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	b151      	cbz	r1, 80090d0 <_sungetc_r+0x60>
 80090ba:	4299      	cmp	r1, r3
 80090bc:	d208      	bcs.n	80090d0 <_sungetc_r+0x60>
 80090be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80090c2:	42a9      	cmp	r1, r5
 80090c4:	d104      	bne.n	80090d0 <_sungetc_r+0x60>
 80090c6:	3b01      	subs	r3, #1
 80090c8:	3201      	adds	r2, #1
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	6062      	str	r2, [r4, #4]
 80090ce:	e7d5      	b.n	800907c <_sungetc_r+0xc>
 80090d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80090d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d8:	6363      	str	r3, [r4, #52]	; 0x34
 80090da:	2303      	movs	r3, #3
 80090dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80090de:	4623      	mov	r3, r4
 80090e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	2301      	movs	r3, #1
 80090e8:	e7dc      	b.n	80090a4 <_sungetc_r+0x34>

080090ea <__ssrefill_r>:
 80090ea:	b510      	push	{r4, lr}
 80090ec:	460c      	mov	r4, r1
 80090ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80090f0:	b169      	cbz	r1, 800910e <__ssrefill_r+0x24>
 80090f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f6:	4299      	cmp	r1, r3
 80090f8:	d001      	beq.n	80090fe <__ssrefill_r+0x14>
 80090fa:	f7ff f9e5 	bl	80084c8 <_free_r>
 80090fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009100:	6063      	str	r3, [r4, #4]
 8009102:	2000      	movs	r0, #0
 8009104:	6360      	str	r0, [r4, #52]	; 0x34
 8009106:	b113      	cbz	r3, 800910e <__ssrefill_r+0x24>
 8009108:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	bd10      	pop	{r4, pc}
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	6063      	str	r3, [r4, #4]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f043 0320 	orr.w	r3, r3, #32
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
 8009122:	e7f3      	b.n	800910c <__ssrefill_r+0x22>

08009124 <__ssvfiscanf_r>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800912e:	2100      	movs	r1, #0
 8009130:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009134:	49a6      	ldr	r1, [pc, #664]	; (80093d0 <__ssvfiscanf_r+0x2ac>)
 8009136:	91a0      	str	r1, [sp, #640]	; 0x280
 8009138:	f10d 0804 	add.w	r8, sp, #4
 800913c:	49a5      	ldr	r1, [pc, #660]	; (80093d4 <__ssvfiscanf_r+0x2b0>)
 800913e:	4fa6      	ldr	r7, [pc, #664]	; (80093d8 <__ssvfiscanf_r+0x2b4>)
 8009140:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80093dc <__ssvfiscanf_r+0x2b8>
 8009144:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009148:	4606      	mov	r6, r0
 800914a:	91a1      	str	r1, [sp, #644]	; 0x284
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	7813      	ldrb	r3, [r2, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 815a 	beq.w	800940a <__ssvfiscanf_r+0x2e6>
 8009156:	5cf9      	ldrb	r1, [r7, r3]
 8009158:	f011 0108 	ands.w	r1, r1, #8
 800915c:	f102 0501 	add.w	r5, r2, #1
 8009160:	d019      	beq.n	8009196 <__ssvfiscanf_r+0x72>
 8009162:	6863      	ldr	r3, [r4, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	dd0f      	ble.n	8009188 <__ssvfiscanf_r+0x64>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	781a      	ldrb	r2, [r3, #0]
 800916c:	5cba      	ldrb	r2, [r7, r2]
 800916e:	0712      	lsls	r2, r2, #28
 8009170:	d401      	bmi.n	8009176 <__ssvfiscanf_r+0x52>
 8009172:	462a      	mov	r2, r5
 8009174:	e7eb      	b.n	800914e <__ssvfiscanf_r+0x2a>
 8009176:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009178:	3201      	adds	r2, #1
 800917a:	9245      	str	r2, [sp, #276]	; 0x114
 800917c:	6862      	ldr	r2, [r4, #4]
 800917e:	3301      	adds	r3, #1
 8009180:	3a01      	subs	r2, #1
 8009182:	6062      	str	r2, [r4, #4]
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	e7ec      	b.n	8009162 <__ssvfiscanf_r+0x3e>
 8009188:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800918a:	4621      	mov	r1, r4
 800918c:	4630      	mov	r0, r6
 800918e:	4798      	blx	r3
 8009190:	2800      	cmp	r0, #0
 8009192:	d0e9      	beq.n	8009168 <__ssvfiscanf_r+0x44>
 8009194:	e7ed      	b.n	8009172 <__ssvfiscanf_r+0x4e>
 8009196:	2b25      	cmp	r3, #37	; 0x25
 8009198:	d012      	beq.n	80091c0 <__ssvfiscanf_r+0x9c>
 800919a:	469a      	mov	sl, r3
 800919c:	6863      	ldr	r3, [r4, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f340 8091 	ble.w	80092c6 <__ssvfiscanf_r+0x1a2>
 80091a4:	6822      	ldr	r2, [r4, #0]
 80091a6:	7813      	ldrb	r3, [r2, #0]
 80091a8:	4553      	cmp	r3, sl
 80091aa:	f040 812e 	bne.w	800940a <__ssvfiscanf_r+0x2e6>
 80091ae:	6863      	ldr	r3, [r4, #4]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	6063      	str	r3, [r4, #4]
 80091b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80091b6:	3201      	adds	r2, #1
 80091b8:	3301      	adds	r3, #1
 80091ba:	6022      	str	r2, [r4, #0]
 80091bc:	9345      	str	r3, [sp, #276]	; 0x114
 80091be:	e7d8      	b.n	8009172 <__ssvfiscanf_r+0x4e>
 80091c0:	9141      	str	r1, [sp, #260]	; 0x104
 80091c2:	9143      	str	r1, [sp, #268]	; 0x10c
 80091c4:	7853      	ldrb	r3, [r2, #1]
 80091c6:	2b2a      	cmp	r3, #42	; 0x2a
 80091c8:	bf02      	ittt	eq
 80091ca:	2310      	moveq	r3, #16
 80091cc:	1c95      	addeq	r5, r2, #2
 80091ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80091d0:	220a      	movs	r2, #10
 80091d2:	46aa      	mov	sl, r5
 80091d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80091d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80091dc:	2b09      	cmp	r3, #9
 80091de:	d91c      	bls.n	800921a <__ssvfiscanf_r+0xf6>
 80091e0:	487e      	ldr	r0, [pc, #504]	; (80093dc <__ssvfiscanf_r+0x2b8>)
 80091e2:	2203      	movs	r2, #3
 80091e4:	f7f7 f82c 	bl	8000240 <memchr>
 80091e8:	b138      	cbz	r0, 80091fa <__ssvfiscanf_r+0xd6>
 80091ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091ec:	eba0 0009 	sub.w	r0, r0, r9
 80091f0:	2301      	movs	r3, #1
 80091f2:	4083      	lsls	r3, r0
 80091f4:	4313      	orrs	r3, r2
 80091f6:	9341      	str	r3, [sp, #260]	; 0x104
 80091f8:	4655      	mov	r5, sl
 80091fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091fe:	2b78      	cmp	r3, #120	; 0x78
 8009200:	d806      	bhi.n	8009210 <__ssvfiscanf_r+0xec>
 8009202:	2b57      	cmp	r3, #87	; 0x57
 8009204:	d810      	bhi.n	8009228 <__ssvfiscanf_r+0x104>
 8009206:	2b25      	cmp	r3, #37	; 0x25
 8009208:	d0c7      	beq.n	800919a <__ssvfiscanf_r+0x76>
 800920a:	d857      	bhi.n	80092bc <__ssvfiscanf_r+0x198>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d065      	beq.n	80092dc <__ssvfiscanf_r+0x1b8>
 8009210:	2303      	movs	r3, #3
 8009212:	9347      	str	r3, [sp, #284]	; 0x11c
 8009214:	230a      	movs	r3, #10
 8009216:	9342      	str	r3, [sp, #264]	; 0x108
 8009218:	e076      	b.n	8009308 <__ssvfiscanf_r+0x1e4>
 800921a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800921c:	fb02 1103 	mla	r1, r2, r3, r1
 8009220:	3930      	subs	r1, #48	; 0x30
 8009222:	9143      	str	r1, [sp, #268]	; 0x10c
 8009224:	4655      	mov	r5, sl
 8009226:	e7d4      	b.n	80091d2 <__ssvfiscanf_r+0xae>
 8009228:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800922c:	2a20      	cmp	r2, #32
 800922e:	d8ef      	bhi.n	8009210 <__ssvfiscanf_r+0xec>
 8009230:	a101      	add	r1, pc, #4	; (adr r1, 8009238 <__ssvfiscanf_r+0x114>)
 8009232:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009236:	bf00      	nop
 8009238:	080092eb 	.word	0x080092eb
 800923c:	08009211 	.word	0x08009211
 8009240:	08009211 	.word	0x08009211
 8009244:	08009349 	.word	0x08009349
 8009248:	08009211 	.word	0x08009211
 800924c:	08009211 	.word	0x08009211
 8009250:	08009211 	.word	0x08009211
 8009254:	08009211 	.word	0x08009211
 8009258:	08009211 	.word	0x08009211
 800925c:	08009211 	.word	0x08009211
 8009260:	08009211 	.word	0x08009211
 8009264:	0800935f 	.word	0x0800935f
 8009268:	08009345 	.word	0x08009345
 800926c:	080092c3 	.word	0x080092c3
 8009270:	080092c3 	.word	0x080092c3
 8009274:	080092c3 	.word	0x080092c3
 8009278:	08009211 	.word	0x08009211
 800927c:	08009301 	.word	0x08009301
 8009280:	08009211 	.word	0x08009211
 8009284:	08009211 	.word	0x08009211
 8009288:	08009211 	.word	0x08009211
 800928c:	08009211 	.word	0x08009211
 8009290:	0800936f 	.word	0x0800936f
 8009294:	0800933d 	.word	0x0800933d
 8009298:	080092e3 	.word	0x080092e3
 800929c:	08009211 	.word	0x08009211
 80092a0:	08009211 	.word	0x08009211
 80092a4:	0800936b 	.word	0x0800936b
 80092a8:	08009211 	.word	0x08009211
 80092ac:	08009345 	.word	0x08009345
 80092b0:	08009211 	.word	0x08009211
 80092b4:	08009211 	.word	0x08009211
 80092b8:	080092eb 	.word	0x080092eb
 80092bc:	3b45      	subs	r3, #69	; 0x45
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d8a6      	bhi.n	8009210 <__ssvfiscanf_r+0xec>
 80092c2:	2305      	movs	r3, #5
 80092c4:	e01f      	b.n	8009306 <__ssvfiscanf_r+0x1e2>
 80092c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80092c8:	4621      	mov	r1, r4
 80092ca:	4630      	mov	r0, r6
 80092cc:	4798      	blx	r3
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f43f af68 	beq.w	80091a4 <__ssvfiscanf_r+0x80>
 80092d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f040 808d 	bne.w	80093f6 <__ssvfiscanf_r+0x2d2>
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	e08f      	b.n	8009402 <__ssvfiscanf_r+0x2de>
 80092e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80092e4:	f042 0220 	orr.w	r2, r2, #32
 80092e8:	9241      	str	r2, [sp, #260]	; 0x104
 80092ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80092ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092f0:	9241      	str	r2, [sp, #260]	; 0x104
 80092f2:	2210      	movs	r2, #16
 80092f4:	2b6f      	cmp	r3, #111	; 0x6f
 80092f6:	9242      	str	r2, [sp, #264]	; 0x108
 80092f8:	bf34      	ite	cc
 80092fa:	2303      	movcc	r3, #3
 80092fc:	2304      	movcs	r3, #4
 80092fe:	e002      	b.n	8009306 <__ssvfiscanf_r+0x1e2>
 8009300:	2300      	movs	r3, #0
 8009302:	9342      	str	r3, [sp, #264]	; 0x108
 8009304:	2303      	movs	r3, #3
 8009306:	9347      	str	r3, [sp, #284]	; 0x11c
 8009308:	6863      	ldr	r3, [r4, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	dd3d      	ble.n	800938a <__ssvfiscanf_r+0x266>
 800930e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009310:	0659      	lsls	r1, r3, #25
 8009312:	d404      	bmi.n	800931e <__ssvfiscanf_r+0x1fa>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	781a      	ldrb	r2, [r3, #0]
 8009318:	5cba      	ldrb	r2, [r7, r2]
 800931a:	0712      	lsls	r2, r2, #28
 800931c:	d43c      	bmi.n	8009398 <__ssvfiscanf_r+0x274>
 800931e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009320:	2b02      	cmp	r3, #2
 8009322:	dc4b      	bgt.n	80093bc <__ssvfiscanf_r+0x298>
 8009324:	466b      	mov	r3, sp
 8009326:	4622      	mov	r2, r4
 8009328:	a941      	add	r1, sp, #260	; 0x104
 800932a:	4630      	mov	r0, r6
 800932c:	f000 f872 	bl	8009414 <_scanf_chars>
 8009330:	2801      	cmp	r0, #1
 8009332:	d06a      	beq.n	800940a <__ssvfiscanf_r+0x2e6>
 8009334:	2802      	cmp	r0, #2
 8009336:	f47f af1c 	bne.w	8009172 <__ssvfiscanf_r+0x4e>
 800933a:	e7cb      	b.n	80092d4 <__ssvfiscanf_r+0x1b0>
 800933c:	2308      	movs	r3, #8
 800933e:	9342      	str	r3, [sp, #264]	; 0x108
 8009340:	2304      	movs	r3, #4
 8009342:	e7e0      	b.n	8009306 <__ssvfiscanf_r+0x1e2>
 8009344:	220a      	movs	r2, #10
 8009346:	e7d5      	b.n	80092f4 <__ssvfiscanf_r+0x1d0>
 8009348:	4629      	mov	r1, r5
 800934a:	4640      	mov	r0, r8
 800934c:	f000 fa5e 	bl	800980c <__sccl>
 8009350:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009356:	9341      	str	r3, [sp, #260]	; 0x104
 8009358:	4605      	mov	r5, r0
 800935a:	2301      	movs	r3, #1
 800935c:	e7d3      	b.n	8009306 <__ssvfiscanf_r+0x1e2>
 800935e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009364:	9341      	str	r3, [sp, #260]	; 0x104
 8009366:	2300      	movs	r3, #0
 8009368:	e7cd      	b.n	8009306 <__ssvfiscanf_r+0x1e2>
 800936a:	2302      	movs	r3, #2
 800936c:	e7cb      	b.n	8009306 <__ssvfiscanf_r+0x1e2>
 800936e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009370:	06c3      	lsls	r3, r0, #27
 8009372:	f53f aefe 	bmi.w	8009172 <__ssvfiscanf_r+0x4e>
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800937a:	1d19      	adds	r1, r3, #4
 800937c:	9100      	str	r1, [sp, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	07c0      	lsls	r0, r0, #31
 8009382:	bf4c      	ite	mi
 8009384:	801a      	strhmi	r2, [r3, #0]
 8009386:	601a      	strpl	r2, [r3, #0]
 8009388:	e6f3      	b.n	8009172 <__ssvfiscanf_r+0x4e>
 800938a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800938c:	4621      	mov	r1, r4
 800938e:	4630      	mov	r0, r6
 8009390:	4798      	blx	r3
 8009392:	2800      	cmp	r0, #0
 8009394:	d0bb      	beq.n	800930e <__ssvfiscanf_r+0x1ea>
 8009396:	e79d      	b.n	80092d4 <__ssvfiscanf_r+0x1b0>
 8009398:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800939a:	3201      	adds	r2, #1
 800939c:	9245      	str	r2, [sp, #276]	; 0x114
 800939e:	6862      	ldr	r2, [r4, #4]
 80093a0:	3a01      	subs	r2, #1
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	6062      	str	r2, [r4, #4]
 80093a6:	dd02      	ble.n	80093ae <__ssvfiscanf_r+0x28a>
 80093a8:	3301      	adds	r3, #1
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	e7b2      	b.n	8009314 <__ssvfiscanf_r+0x1f0>
 80093ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80093b0:	4621      	mov	r1, r4
 80093b2:	4630      	mov	r0, r6
 80093b4:	4798      	blx	r3
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d0ac      	beq.n	8009314 <__ssvfiscanf_r+0x1f0>
 80093ba:	e78b      	b.n	80092d4 <__ssvfiscanf_r+0x1b0>
 80093bc:	2b04      	cmp	r3, #4
 80093be:	dc0f      	bgt.n	80093e0 <__ssvfiscanf_r+0x2bc>
 80093c0:	466b      	mov	r3, sp
 80093c2:	4622      	mov	r2, r4
 80093c4:	a941      	add	r1, sp, #260	; 0x104
 80093c6:	4630      	mov	r0, r6
 80093c8:	f000 f87e 	bl	80094c8 <_scanf_i>
 80093cc:	e7b0      	b.n	8009330 <__ssvfiscanf_r+0x20c>
 80093ce:	bf00      	nop
 80093d0:	08009071 	.word	0x08009071
 80093d4:	080090eb 	.word	0x080090eb
 80093d8:	0802ff47 	.word	0x0802ff47
 80093dc:	0802feda 	.word	0x0802feda
 80093e0:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <__ssvfiscanf_r+0x2ec>)
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f43f aec5 	beq.w	8009172 <__ssvfiscanf_r+0x4e>
 80093e8:	466b      	mov	r3, sp
 80093ea:	4622      	mov	r2, r4
 80093ec:	a941      	add	r1, sp, #260	; 0x104
 80093ee:	4630      	mov	r0, r6
 80093f0:	f3af 8000 	nop.w
 80093f4:	e79c      	b.n	8009330 <__ssvfiscanf_r+0x20c>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80093fc:	bf18      	it	ne
 80093fe:	f04f 30ff 	movne.w	r0, #4294967295
 8009402:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800940c:	e7f9      	b.n	8009402 <__ssvfiscanf_r+0x2de>
 800940e:	bf00      	nop
 8009410:	00000000 	.word	0x00000000

08009414 <_scanf_chars>:
 8009414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009418:	4615      	mov	r5, r2
 800941a:	688a      	ldr	r2, [r1, #8]
 800941c:	4680      	mov	r8, r0
 800941e:	460c      	mov	r4, r1
 8009420:	b932      	cbnz	r2, 8009430 <_scanf_chars+0x1c>
 8009422:	698a      	ldr	r2, [r1, #24]
 8009424:	2a00      	cmp	r2, #0
 8009426:	bf0c      	ite	eq
 8009428:	2201      	moveq	r2, #1
 800942a:	f04f 32ff 	movne.w	r2, #4294967295
 800942e:	608a      	str	r2, [r1, #8]
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80094c4 <_scanf_chars+0xb0>
 8009436:	06d1      	lsls	r1, r2, #27
 8009438:	bf5f      	itttt	pl
 800943a:	681a      	ldrpl	r2, [r3, #0]
 800943c:	1d11      	addpl	r1, r2, #4
 800943e:	6019      	strpl	r1, [r3, #0]
 8009440:	6816      	ldrpl	r6, [r2, #0]
 8009442:	2700      	movs	r7, #0
 8009444:	69a0      	ldr	r0, [r4, #24]
 8009446:	b188      	cbz	r0, 800946c <_scanf_chars+0x58>
 8009448:	2801      	cmp	r0, #1
 800944a:	d107      	bne.n	800945c <_scanf_chars+0x48>
 800944c:	682a      	ldr	r2, [r5, #0]
 800944e:	7811      	ldrb	r1, [r2, #0]
 8009450:	6962      	ldr	r2, [r4, #20]
 8009452:	5c52      	ldrb	r2, [r2, r1]
 8009454:	b952      	cbnz	r2, 800946c <_scanf_chars+0x58>
 8009456:	2f00      	cmp	r7, #0
 8009458:	d031      	beq.n	80094be <_scanf_chars+0xaa>
 800945a:	e022      	b.n	80094a2 <_scanf_chars+0x8e>
 800945c:	2802      	cmp	r0, #2
 800945e:	d120      	bne.n	80094a2 <_scanf_chars+0x8e>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009468:	071b      	lsls	r3, r3, #28
 800946a:	d41a      	bmi.n	80094a2 <_scanf_chars+0x8e>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	06da      	lsls	r2, r3, #27
 8009470:	bf5e      	ittt	pl
 8009472:	682b      	ldrpl	r3, [r5, #0]
 8009474:	781b      	ldrbpl	r3, [r3, #0]
 8009476:	f806 3b01 	strbpl.w	r3, [r6], #1
 800947a:	682a      	ldr	r2, [r5, #0]
 800947c:	686b      	ldr	r3, [r5, #4]
 800947e:	3201      	adds	r2, #1
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	68a2      	ldr	r2, [r4, #8]
 8009484:	3b01      	subs	r3, #1
 8009486:	3a01      	subs	r2, #1
 8009488:	606b      	str	r3, [r5, #4]
 800948a:	3701      	adds	r7, #1
 800948c:	60a2      	str	r2, [r4, #8]
 800948e:	b142      	cbz	r2, 80094a2 <_scanf_chars+0x8e>
 8009490:	2b00      	cmp	r3, #0
 8009492:	dcd7      	bgt.n	8009444 <_scanf_chars+0x30>
 8009494:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009498:	4629      	mov	r1, r5
 800949a:	4640      	mov	r0, r8
 800949c:	4798      	blx	r3
 800949e:	2800      	cmp	r0, #0
 80094a0:	d0d0      	beq.n	8009444 <_scanf_chars+0x30>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	f013 0310 	ands.w	r3, r3, #16
 80094a8:	d105      	bne.n	80094b6 <_scanf_chars+0xa2>
 80094aa:	68e2      	ldr	r2, [r4, #12]
 80094ac:	3201      	adds	r2, #1
 80094ae:	60e2      	str	r2, [r4, #12]
 80094b0:	69a2      	ldr	r2, [r4, #24]
 80094b2:	b102      	cbz	r2, 80094b6 <_scanf_chars+0xa2>
 80094b4:	7033      	strb	r3, [r6, #0]
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	443b      	add	r3, r7
 80094ba:	6123      	str	r3, [r4, #16]
 80094bc:	2000      	movs	r0, #0
 80094be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c2:	bf00      	nop
 80094c4:	0802ff47 	.word	0x0802ff47

080094c8 <_scanf_i>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	4698      	mov	r8, r3
 80094ce:	4b74      	ldr	r3, [pc, #464]	; (80096a0 <_scanf_i+0x1d8>)
 80094d0:	460c      	mov	r4, r1
 80094d2:	4682      	mov	sl, r0
 80094d4:	4616      	mov	r6, r2
 80094d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094da:	b087      	sub	sp, #28
 80094dc:	ab03      	add	r3, sp, #12
 80094de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80094e2:	4b70      	ldr	r3, [pc, #448]	; (80096a4 <_scanf_i+0x1dc>)
 80094e4:	69a1      	ldr	r1, [r4, #24]
 80094e6:	4a70      	ldr	r2, [pc, #448]	; (80096a8 <_scanf_i+0x1e0>)
 80094e8:	2903      	cmp	r1, #3
 80094ea:	bf18      	it	ne
 80094ec:	461a      	movne	r2, r3
 80094ee:	68a3      	ldr	r3, [r4, #8]
 80094f0:	9201      	str	r2, [sp, #4]
 80094f2:	1e5a      	subs	r2, r3, #1
 80094f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80094f8:	bf88      	it	hi
 80094fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80094fe:	4627      	mov	r7, r4
 8009500:	bf82      	ittt	hi
 8009502:	eb03 0905 	addhi.w	r9, r3, r5
 8009506:	f240 135d 	movwhi	r3, #349	; 0x15d
 800950a:	60a3      	strhi	r3, [r4, #8]
 800950c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009510:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009514:	bf98      	it	ls
 8009516:	f04f 0900 	movls.w	r9, #0
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	463d      	mov	r5, r7
 800951e:	f04f 0b00 	mov.w	fp, #0
 8009522:	6831      	ldr	r1, [r6, #0]
 8009524:	ab03      	add	r3, sp, #12
 8009526:	7809      	ldrb	r1, [r1, #0]
 8009528:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800952c:	2202      	movs	r2, #2
 800952e:	f7f6 fe87 	bl	8000240 <memchr>
 8009532:	b328      	cbz	r0, 8009580 <_scanf_i+0xb8>
 8009534:	f1bb 0f01 	cmp.w	fp, #1
 8009538:	d159      	bne.n	80095ee <_scanf_i+0x126>
 800953a:	6862      	ldr	r2, [r4, #4]
 800953c:	b92a      	cbnz	r2, 800954a <_scanf_i+0x82>
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	2308      	movs	r3, #8
 8009542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009546:	6063      	str	r3, [r4, #4]
 8009548:	6022      	str	r2, [r4, #0]
 800954a:	6822      	ldr	r2, [r4, #0]
 800954c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009550:	6022      	str	r2, [r4, #0]
 8009552:	68a2      	ldr	r2, [r4, #8]
 8009554:	1e51      	subs	r1, r2, #1
 8009556:	60a1      	str	r1, [r4, #8]
 8009558:	b192      	cbz	r2, 8009580 <_scanf_i+0xb8>
 800955a:	6832      	ldr	r2, [r6, #0]
 800955c:	1c51      	adds	r1, r2, #1
 800955e:	6031      	str	r1, [r6, #0]
 8009560:	7812      	ldrb	r2, [r2, #0]
 8009562:	f805 2b01 	strb.w	r2, [r5], #1
 8009566:	6872      	ldr	r2, [r6, #4]
 8009568:	3a01      	subs	r2, #1
 800956a:	2a00      	cmp	r2, #0
 800956c:	6072      	str	r2, [r6, #4]
 800956e:	dc07      	bgt.n	8009580 <_scanf_i+0xb8>
 8009570:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009574:	4631      	mov	r1, r6
 8009576:	4650      	mov	r0, sl
 8009578:	4790      	blx	r2
 800957a:	2800      	cmp	r0, #0
 800957c:	f040 8085 	bne.w	800968a <_scanf_i+0x1c2>
 8009580:	f10b 0b01 	add.w	fp, fp, #1
 8009584:	f1bb 0f03 	cmp.w	fp, #3
 8009588:	d1cb      	bne.n	8009522 <_scanf_i+0x5a>
 800958a:	6863      	ldr	r3, [r4, #4]
 800958c:	b90b      	cbnz	r3, 8009592 <_scanf_i+0xca>
 800958e:	230a      	movs	r3, #10
 8009590:	6063      	str	r3, [r4, #4]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	4945      	ldr	r1, [pc, #276]	; (80096ac <_scanf_i+0x1e4>)
 8009596:	6960      	ldr	r0, [r4, #20]
 8009598:	1ac9      	subs	r1, r1, r3
 800959a:	f000 f937 	bl	800980c <__sccl>
 800959e:	f04f 0b00 	mov.w	fp, #0
 80095a2:	68a3      	ldr	r3, [r4, #8]
 80095a4:	6822      	ldr	r2, [r4, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d03d      	beq.n	8009626 <_scanf_i+0x15e>
 80095aa:	6831      	ldr	r1, [r6, #0]
 80095ac:	6960      	ldr	r0, [r4, #20]
 80095ae:	f891 c000 	ldrb.w	ip, [r1]
 80095b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d035      	beq.n	8009626 <_scanf_i+0x15e>
 80095ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80095be:	d124      	bne.n	800960a <_scanf_i+0x142>
 80095c0:	0510      	lsls	r0, r2, #20
 80095c2:	d522      	bpl.n	800960a <_scanf_i+0x142>
 80095c4:	f10b 0b01 	add.w	fp, fp, #1
 80095c8:	f1b9 0f00 	cmp.w	r9, #0
 80095cc:	d003      	beq.n	80095d6 <_scanf_i+0x10e>
 80095ce:	3301      	adds	r3, #1
 80095d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	6873      	ldr	r3, [r6, #4]
 80095d8:	3b01      	subs	r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	6073      	str	r3, [r6, #4]
 80095de:	dd1b      	ble.n	8009618 <_scanf_i+0x150>
 80095e0:	6833      	ldr	r3, [r6, #0]
 80095e2:	3301      	adds	r3, #1
 80095e4:	6033      	str	r3, [r6, #0]
 80095e6:	68a3      	ldr	r3, [r4, #8]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	60a3      	str	r3, [r4, #8]
 80095ec:	e7d9      	b.n	80095a2 <_scanf_i+0xda>
 80095ee:	f1bb 0f02 	cmp.w	fp, #2
 80095f2:	d1ae      	bne.n	8009552 <_scanf_i+0x8a>
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80095fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80095fe:	d1bf      	bne.n	8009580 <_scanf_i+0xb8>
 8009600:	2310      	movs	r3, #16
 8009602:	6063      	str	r3, [r4, #4]
 8009604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009608:	e7a2      	b.n	8009550 <_scanf_i+0x88>
 800960a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800960e:	6022      	str	r2, [r4, #0]
 8009610:	780b      	ldrb	r3, [r1, #0]
 8009612:	f805 3b01 	strb.w	r3, [r5], #1
 8009616:	e7de      	b.n	80095d6 <_scanf_i+0x10e>
 8009618:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800961c:	4631      	mov	r1, r6
 800961e:	4650      	mov	r0, sl
 8009620:	4798      	blx	r3
 8009622:	2800      	cmp	r0, #0
 8009624:	d0df      	beq.n	80095e6 <_scanf_i+0x11e>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	05d9      	lsls	r1, r3, #23
 800962a:	d50d      	bpl.n	8009648 <_scanf_i+0x180>
 800962c:	42bd      	cmp	r5, r7
 800962e:	d909      	bls.n	8009644 <_scanf_i+0x17c>
 8009630:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009638:	4632      	mov	r2, r6
 800963a:	4650      	mov	r0, sl
 800963c:	4798      	blx	r3
 800963e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009642:	464d      	mov	r5, r9
 8009644:	42bd      	cmp	r5, r7
 8009646:	d028      	beq.n	800969a <_scanf_i+0x1d2>
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	f012 0210 	ands.w	r2, r2, #16
 800964e:	d113      	bne.n	8009678 <_scanf_i+0x1b0>
 8009650:	702a      	strb	r2, [r5, #0]
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	9e01      	ldr	r6, [sp, #4]
 8009656:	4639      	mov	r1, r7
 8009658:	4650      	mov	r0, sl
 800965a:	47b0      	blx	r6
 800965c:	f8d8 3000 	ldr.w	r3, [r8]
 8009660:	6821      	ldr	r1, [r4, #0]
 8009662:	1d1a      	adds	r2, r3, #4
 8009664:	f8c8 2000 	str.w	r2, [r8]
 8009668:	f011 0f20 	tst.w	r1, #32
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	d00f      	beq.n	8009690 <_scanf_i+0x1c8>
 8009670:	6018      	str	r0, [r3, #0]
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	3301      	adds	r3, #1
 8009676:	60e3      	str	r3, [r4, #12]
 8009678:	6923      	ldr	r3, [r4, #16]
 800967a:	1bed      	subs	r5, r5, r7
 800967c:	445d      	add	r5, fp
 800967e:	442b      	add	r3, r5
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	2000      	movs	r0, #0
 8009684:	b007      	add	sp, #28
 8009686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968a:	f04f 0b00 	mov.w	fp, #0
 800968e:	e7ca      	b.n	8009626 <_scanf_i+0x15e>
 8009690:	07ca      	lsls	r2, r1, #31
 8009692:	bf4c      	ite	mi
 8009694:	8018      	strhmi	r0, [r3, #0]
 8009696:	6018      	strpl	r0, [r3, #0]
 8009698:	e7eb      	b.n	8009672 <_scanf_i+0x1aa>
 800969a:	2001      	movs	r0, #1
 800969c:	e7f2      	b.n	8009684 <_scanf_i+0x1bc>
 800969e:	bf00      	nop
 80096a0:	0800a25c 	.word	0x0800a25c
 80096a4:	08009c3d 	.word	0x08009c3d
 80096a8:	08009b55 	.word	0x08009b55
 80096ac:	0802fef5 	.word	0x0802fef5

080096b0 <__sflush_r>:
 80096b0:	898a      	ldrh	r2, [r1, #12]
 80096b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	4605      	mov	r5, r0
 80096b8:	0710      	lsls	r0, r2, #28
 80096ba:	460c      	mov	r4, r1
 80096bc:	d458      	bmi.n	8009770 <__sflush_r+0xc0>
 80096be:	684b      	ldr	r3, [r1, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc05      	bgt.n	80096d0 <__sflush_r+0x20>
 80096c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dc02      	bgt.n	80096d0 <__sflush_r+0x20>
 80096ca:	2000      	movs	r0, #0
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096d2:	2e00      	cmp	r6, #0
 80096d4:	d0f9      	beq.n	80096ca <__sflush_r+0x1a>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096dc:	682f      	ldr	r7, [r5, #0]
 80096de:	6a21      	ldr	r1, [r4, #32]
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	d032      	beq.n	800974a <__sflush_r+0x9a>
 80096e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	075a      	lsls	r2, r3, #29
 80096ea:	d505      	bpl.n	80096f8 <__sflush_r+0x48>
 80096ec:	6863      	ldr	r3, [r4, #4]
 80096ee:	1ac0      	subs	r0, r0, r3
 80096f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096f2:	b10b      	cbz	r3, 80096f8 <__sflush_r+0x48>
 80096f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096f6:	1ac0      	subs	r0, r0, r3
 80096f8:	2300      	movs	r3, #0
 80096fa:	4602      	mov	r2, r0
 80096fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096fe:	6a21      	ldr	r1, [r4, #32]
 8009700:	4628      	mov	r0, r5
 8009702:	47b0      	blx	r6
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	d106      	bne.n	8009718 <__sflush_r+0x68>
 800970a:	6829      	ldr	r1, [r5, #0]
 800970c:	291d      	cmp	r1, #29
 800970e:	d82b      	bhi.n	8009768 <__sflush_r+0xb8>
 8009710:	4a29      	ldr	r2, [pc, #164]	; (80097b8 <__sflush_r+0x108>)
 8009712:	410a      	asrs	r2, r1
 8009714:	07d6      	lsls	r6, r2, #31
 8009716:	d427      	bmi.n	8009768 <__sflush_r+0xb8>
 8009718:	2200      	movs	r2, #0
 800971a:	6062      	str	r2, [r4, #4]
 800971c:	04d9      	lsls	r1, r3, #19
 800971e:	6922      	ldr	r2, [r4, #16]
 8009720:	6022      	str	r2, [r4, #0]
 8009722:	d504      	bpl.n	800972e <__sflush_r+0x7e>
 8009724:	1c42      	adds	r2, r0, #1
 8009726:	d101      	bne.n	800972c <__sflush_r+0x7c>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b903      	cbnz	r3, 800972e <__sflush_r+0x7e>
 800972c:	6560      	str	r0, [r4, #84]	; 0x54
 800972e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009730:	602f      	str	r7, [r5, #0]
 8009732:	2900      	cmp	r1, #0
 8009734:	d0c9      	beq.n	80096ca <__sflush_r+0x1a>
 8009736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800973a:	4299      	cmp	r1, r3
 800973c:	d002      	beq.n	8009744 <__sflush_r+0x94>
 800973e:	4628      	mov	r0, r5
 8009740:	f7fe fec2 	bl	80084c8 <_free_r>
 8009744:	2000      	movs	r0, #0
 8009746:	6360      	str	r0, [r4, #52]	; 0x34
 8009748:	e7c0      	b.n	80096cc <__sflush_r+0x1c>
 800974a:	2301      	movs	r3, #1
 800974c:	4628      	mov	r0, r5
 800974e:	47b0      	blx	r6
 8009750:	1c41      	adds	r1, r0, #1
 8009752:	d1c8      	bne.n	80096e6 <__sflush_r+0x36>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0c5      	beq.n	80096e6 <__sflush_r+0x36>
 800975a:	2b1d      	cmp	r3, #29
 800975c:	d001      	beq.n	8009762 <__sflush_r+0xb2>
 800975e:	2b16      	cmp	r3, #22
 8009760:	d101      	bne.n	8009766 <__sflush_r+0xb6>
 8009762:	602f      	str	r7, [r5, #0]
 8009764:	e7b1      	b.n	80096ca <__sflush_r+0x1a>
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	e7ad      	b.n	80096cc <__sflush_r+0x1c>
 8009770:	690f      	ldr	r7, [r1, #16]
 8009772:	2f00      	cmp	r7, #0
 8009774:	d0a9      	beq.n	80096ca <__sflush_r+0x1a>
 8009776:	0793      	lsls	r3, r2, #30
 8009778:	680e      	ldr	r6, [r1, #0]
 800977a:	bf08      	it	eq
 800977c:	694b      	ldreq	r3, [r1, #20]
 800977e:	600f      	str	r7, [r1, #0]
 8009780:	bf18      	it	ne
 8009782:	2300      	movne	r3, #0
 8009784:	eba6 0807 	sub.w	r8, r6, r7
 8009788:	608b      	str	r3, [r1, #8]
 800978a:	f1b8 0f00 	cmp.w	r8, #0
 800978e:	dd9c      	ble.n	80096ca <__sflush_r+0x1a>
 8009790:	6a21      	ldr	r1, [r4, #32]
 8009792:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009794:	4643      	mov	r3, r8
 8009796:	463a      	mov	r2, r7
 8009798:	4628      	mov	r0, r5
 800979a:	47b0      	blx	r6
 800979c:	2800      	cmp	r0, #0
 800979e:	dc06      	bgt.n	80097ae <__sflush_r+0xfe>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	e78e      	b.n	80096cc <__sflush_r+0x1c>
 80097ae:	4407      	add	r7, r0
 80097b0:	eba8 0800 	sub.w	r8, r8, r0
 80097b4:	e7e9      	b.n	800978a <__sflush_r+0xda>
 80097b6:	bf00      	nop
 80097b8:	dfbffffe 	.word	0xdfbffffe

080097bc <_fflush_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	690b      	ldr	r3, [r1, #16]
 80097c0:	4605      	mov	r5, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	b913      	cbnz	r3, 80097cc <_fflush_r+0x10>
 80097c6:	2500      	movs	r5, #0
 80097c8:	4628      	mov	r0, r5
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	b118      	cbz	r0, 80097d6 <_fflush_r+0x1a>
 80097ce:	6a03      	ldr	r3, [r0, #32]
 80097d0:	b90b      	cbnz	r3, 80097d6 <_fflush_r+0x1a>
 80097d2:	f7fd ff3b 	bl	800764c <__sinit>
 80097d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0f3      	beq.n	80097c6 <_fflush_r+0xa>
 80097de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097e0:	07d0      	lsls	r0, r2, #31
 80097e2:	d404      	bmi.n	80097ee <_fflush_r+0x32>
 80097e4:	0599      	lsls	r1, r3, #22
 80097e6:	d402      	bmi.n	80097ee <_fflush_r+0x32>
 80097e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ea:	f7fe f874 	bl	80078d6 <__retarget_lock_acquire_recursive>
 80097ee:	4628      	mov	r0, r5
 80097f0:	4621      	mov	r1, r4
 80097f2:	f7ff ff5d 	bl	80096b0 <__sflush_r>
 80097f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097f8:	07da      	lsls	r2, r3, #31
 80097fa:	4605      	mov	r5, r0
 80097fc:	d4e4      	bmi.n	80097c8 <_fflush_r+0xc>
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	059b      	lsls	r3, r3, #22
 8009802:	d4e1      	bmi.n	80097c8 <_fflush_r+0xc>
 8009804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009806:	f7fe f867 	bl	80078d8 <__retarget_lock_release_recursive>
 800980a:	e7dd      	b.n	80097c8 <_fflush_r+0xc>

0800980c <__sccl>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	780b      	ldrb	r3, [r1, #0]
 8009810:	4604      	mov	r4, r0
 8009812:	2b5e      	cmp	r3, #94	; 0x5e
 8009814:	bf0b      	itete	eq
 8009816:	784b      	ldrbeq	r3, [r1, #1]
 8009818:	1c4a      	addne	r2, r1, #1
 800981a:	1c8a      	addeq	r2, r1, #2
 800981c:	2100      	movne	r1, #0
 800981e:	bf08      	it	eq
 8009820:	2101      	moveq	r1, #1
 8009822:	3801      	subs	r0, #1
 8009824:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009828:	f800 1f01 	strb.w	r1, [r0, #1]!
 800982c:	42a8      	cmp	r0, r5
 800982e:	d1fb      	bne.n	8009828 <__sccl+0x1c>
 8009830:	b90b      	cbnz	r3, 8009836 <__sccl+0x2a>
 8009832:	1e50      	subs	r0, r2, #1
 8009834:	bd70      	pop	{r4, r5, r6, pc}
 8009836:	f081 0101 	eor.w	r1, r1, #1
 800983a:	54e1      	strb	r1, [r4, r3]
 800983c:	4610      	mov	r0, r2
 800983e:	4602      	mov	r2, r0
 8009840:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009844:	2d2d      	cmp	r5, #45	; 0x2d
 8009846:	d005      	beq.n	8009854 <__sccl+0x48>
 8009848:	2d5d      	cmp	r5, #93	; 0x5d
 800984a:	d016      	beq.n	800987a <__sccl+0x6e>
 800984c:	2d00      	cmp	r5, #0
 800984e:	d0f1      	beq.n	8009834 <__sccl+0x28>
 8009850:	462b      	mov	r3, r5
 8009852:	e7f2      	b.n	800983a <__sccl+0x2e>
 8009854:	7846      	ldrb	r6, [r0, #1]
 8009856:	2e5d      	cmp	r6, #93	; 0x5d
 8009858:	d0fa      	beq.n	8009850 <__sccl+0x44>
 800985a:	42b3      	cmp	r3, r6
 800985c:	dcf8      	bgt.n	8009850 <__sccl+0x44>
 800985e:	3002      	adds	r0, #2
 8009860:	461a      	mov	r2, r3
 8009862:	3201      	adds	r2, #1
 8009864:	4296      	cmp	r6, r2
 8009866:	54a1      	strb	r1, [r4, r2]
 8009868:	dcfb      	bgt.n	8009862 <__sccl+0x56>
 800986a:	1af2      	subs	r2, r6, r3
 800986c:	3a01      	subs	r2, #1
 800986e:	1c5d      	adds	r5, r3, #1
 8009870:	42b3      	cmp	r3, r6
 8009872:	bfa8      	it	ge
 8009874:	2200      	movge	r2, #0
 8009876:	18ab      	adds	r3, r5, r2
 8009878:	e7e1      	b.n	800983e <__sccl+0x32>
 800987a:	4610      	mov	r0, r2
 800987c:	e7da      	b.n	8009834 <__sccl+0x28>

0800987e <__submore>:
 800987e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009882:	460c      	mov	r4, r1
 8009884:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800988a:	4299      	cmp	r1, r3
 800988c:	d11d      	bne.n	80098ca <__submore+0x4c>
 800988e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009892:	f7fe fe8d 	bl	80085b0 <_malloc_r>
 8009896:	b918      	cbnz	r0, 80098a0 <__submore+0x22>
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80098a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80098aa:	6360      	str	r0, [r4, #52]	; 0x34
 80098ac:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80098b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80098b4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80098b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80098bc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80098c0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80098c4:	6020      	str	r0, [r4, #0]
 80098c6:	2000      	movs	r0, #0
 80098c8:	e7e8      	b.n	800989c <__submore+0x1e>
 80098ca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80098cc:	0077      	lsls	r7, r6, #1
 80098ce:	463a      	mov	r2, r7
 80098d0:	f000 f88e 	bl	80099f0 <_realloc_r>
 80098d4:	4605      	mov	r5, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d0de      	beq.n	8009898 <__submore+0x1a>
 80098da:	eb00 0806 	add.w	r8, r0, r6
 80098de:	4601      	mov	r1, r0
 80098e0:	4632      	mov	r2, r6
 80098e2:	4640      	mov	r0, r8
 80098e4:	f000 f830 	bl	8009948 <memcpy>
 80098e8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80098ec:	f8c4 8000 	str.w	r8, [r4]
 80098f0:	e7e9      	b.n	80098c6 <__submore+0x48>

080098f2 <memmove>:
 80098f2:	4288      	cmp	r0, r1
 80098f4:	b510      	push	{r4, lr}
 80098f6:	eb01 0402 	add.w	r4, r1, r2
 80098fa:	d902      	bls.n	8009902 <memmove+0x10>
 80098fc:	4284      	cmp	r4, r0
 80098fe:	4623      	mov	r3, r4
 8009900:	d807      	bhi.n	8009912 <memmove+0x20>
 8009902:	1e43      	subs	r3, r0, #1
 8009904:	42a1      	cmp	r1, r4
 8009906:	d008      	beq.n	800991a <memmove+0x28>
 8009908:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009910:	e7f8      	b.n	8009904 <memmove+0x12>
 8009912:	4402      	add	r2, r0
 8009914:	4601      	mov	r1, r0
 8009916:	428a      	cmp	r2, r1
 8009918:	d100      	bne.n	800991c <memmove+0x2a>
 800991a:	bd10      	pop	{r4, pc}
 800991c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009920:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009924:	e7f7      	b.n	8009916 <memmove+0x24>
	...

08009928 <_sbrk_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d06      	ldr	r5, [pc, #24]	; (8009944 <_sbrk_r+0x1c>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	602b      	str	r3, [r5, #0]
 8009934:	f7f7 fecc 	bl	80016d0 <_sbrk>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_sbrk_r+0x1a>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_sbrk_r+0x1a>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	20000734 	.word	0x20000734

08009948 <memcpy>:
 8009948:	440a      	add	r2, r1
 800994a:	4291      	cmp	r1, r2
 800994c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009950:	d100      	bne.n	8009954 <memcpy+0xc>
 8009952:	4770      	bx	lr
 8009954:	b510      	push	{r4, lr}
 8009956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800995a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800995e:	4291      	cmp	r1, r2
 8009960:	d1f9      	bne.n	8009956 <memcpy+0xe>
 8009962:	bd10      	pop	{r4, pc}

08009964 <__assert_func>:
 8009964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009966:	4614      	mov	r4, r2
 8009968:	461a      	mov	r2, r3
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <__assert_func+0x2c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4605      	mov	r5, r0
 8009970:	68d8      	ldr	r0, [r3, #12]
 8009972:	b14c      	cbz	r4, 8009988 <__assert_func+0x24>
 8009974:	4b07      	ldr	r3, [pc, #28]	; (8009994 <__assert_func+0x30>)
 8009976:	9100      	str	r1, [sp, #0]
 8009978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800997c:	4906      	ldr	r1, [pc, #24]	; (8009998 <__assert_func+0x34>)
 800997e:	462b      	mov	r3, r5
 8009980:	f000 f96c 	bl	8009c5c <fiprintf>
 8009984:	f000 f97c 	bl	8009c80 <abort>
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <__assert_func+0x38>)
 800998a:	461c      	mov	r4, r3
 800998c:	e7f3      	b.n	8009976 <__assert_func+0x12>
 800998e:	bf00      	nop
 8009990:	20000068 	.word	0x20000068
 8009994:	0802ff0a 	.word	0x0802ff0a
 8009998:	0802ff17 	.word	0x0802ff17
 800999c:	0802ff45 	.word	0x0802ff45

080099a0 <_calloc_r>:
 80099a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099a2:	fba1 2402 	umull	r2, r4, r1, r2
 80099a6:	b94c      	cbnz	r4, 80099bc <_calloc_r+0x1c>
 80099a8:	4611      	mov	r1, r2
 80099aa:	9201      	str	r2, [sp, #4]
 80099ac:	f7fe fe00 	bl	80085b0 <_malloc_r>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	4605      	mov	r5, r0
 80099b4:	b930      	cbnz	r0, 80099c4 <_calloc_r+0x24>
 80099b6:	4628      	mov	r0, r5
 80099b8:	b003      	add	sp, #12
 80099ba:	bd30      	pop	{r4, r5, pc}
 80099bc:	220c      	movs	r2, #12
 80099be:	6002      	str	r2, [r0, #0]
 80099c0:	2500      	movs	r5, #0
 80099c2:	e7f8      	b.n	80099b6 <_calloc_r+0x16>
 80099c4:	4621      	mov	r1, r4
 80099c6:	f7fd ff08 	bl	80077da <memset>
 80099ca:	e7f4      	b.n	80099b6 <_calloc_r+0x16>

080099cc <__ascii_mbtowc>:
 80099cc:	b082      	sub	sp, #8
 80099ce:	b901      	cbnz	r1, 80099d2 <__ascii_mbtowc+0x6>
 80099d0:	a901      	add	r1, sp, #4
 80099d2:	b142      	cbz	r2, 80099e6 <__ascii_mbtowc+0x1a>
 80099d4:	b14b      	cbz	r3, 80099ea <__ascii_mbtowc+0x1e>
 80099d6:	7813      	ldrb	r3, [r2, #0]
 80099d8:	600b      	str	r3, [r1, #0]
 80099da:	7812      	ldrb	r2, [r2, #0]
 80099dc:	1e10      	subs	r0, r2, #0
 80099de:	bf18      	it	ne
 80099e0:	2001      	movne	r0, #1
 80099e2:	b002      	add	sp, #8
 80099e4:	4770      	bx	lr
 80099e6:	4610      	mov	r0, r2
 80099e8:	e7fb      	b.n	80099e2 <__ascii_mbtowc+0x16>
 80099ea:	f06f 0001 	mvn.w	r0, #1
 80099ee:	e7f8      	b.n	80099e2 <__ascii_mbtowc+0x16>

080099f0 <_realloc_r>:
 80099f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f4:	4680      	mov	r8, r0
 80099f6:	4614      	mov	r4, r2
 80099f8:	460e      	mov	r6, r1
 80099fa:	b921      	cbnz	r1, 8009a06 <_realloc_r+0x16>
 80099fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a00:	4611      	mov	r1, r2
 8009a02:	f7fe bdd5 	b.w	80085b0 <_malloc_r>
 8009a06:	b92a      	cbnz	r2, 8009a14 <_realloc_r+0x24>
 8009a08:	f7fe fd5e 	bl	80084c8 <_free_r>
 8009a0c:	4625      	mov	r5, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a14:	f000 f93b 	bl	8009c8e <_malloc_usable_size_r>
 8009a18:	4284      	cmp	r4, r0
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	d802      	bhi.n	8009a24 <_realloc_r+0x34>
 8009a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a22:	d812      	bhi.n	8009a4a <_realloc_r+0x5a>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4640      	mov	r0, r8
 8009a28:	f7fe fdc2 	bl	80085b0 <_malloc_r>
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d0ed      	beq.n	8009a0e <_realloc_r+0x1e>
 8009a32:	42bc      	cmp	r4, r7
 8009a34:	4622      	mov	r2, r4
 8009a36:	4631      	mov	r1, r6
 8009a38:	bf28      	it	cs
 8009a3a:	463a      	movcs	r2, r7
 8009a3c:	f7ff ff84 	bl	8009948 <memcpy>
 8009a40:	4631      	mov	r1, r6
 8009a42:	4640      	mov	r0, r8
 8009a44:	f7fe fd40 	bl	80084c8 <_free_r>
 8009a48:	e7e1      	b.n	8009a0e <_realloc_r+0x1e>
 8009a4a:	4635      	mov	r5, r6
 8009a4c:	e7df      	b.n	8009a0e <_realloc_r+0x1e>
	...

08009a50 <_strtol_l.constprop.0>:
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a56:	d001      	beq.n	8009a5c <_strtol_l.constprop.0+0xc>
 8009a58:	2b24      	cmp	r3, #36	; 0x24
 8009a5a:	d906      	bls.n	8009a6a <_strtol_l.constprop.0+0x1a>
 8009a5c:	f7fd ff10 	bl	8007880 <__errno>
 8009a60:	2316      	movs	r3, #22
 8009a62:	6003      	str	r3, [r0, #0]
 8009a64:	2000      	movs	r0, #0
 8009a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b50 <_strtol_l.constprop.0+0x100>
 8009a6e:	460d      	mov	r5, r1
 8009a70:	462e      	mov	r6, r5
 8009a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a76:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009a7a:	f017 0708 	ands.w	r7, r7, #8
 8009a7e:	d1f7      	bne.n	8009a70 <_strtol_l.constprop.0+0x20>
 8009a80:	2c2d      	cmp	r4, #45	; 0x2d
 8009a82:	d132      	bne.n	8009aea <_strtol_l.constprop.0+0x9a>
 8009a84:	782c      	ldrb	r4, [r5, #0]
 8009a86:	2701      	movs	r7, #1
 8009a88:	1cb5      	adds	r5, r6, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d05b      	beq.n	8009b46 <_strtol_l.constprop.0+0xf6>
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d109      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009a92:	2c30      	cmp	r4, #48	; 0x30
 8009a94:	d107      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009a96:	782c      	ldrb	r4, [r5, #0]
 8009a98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a9c:	2c58      	cmp	r4, #88	; 0x58
 8009a9e:	d14d      	bne.n	8009b3c <_strtol_l.constprop.0+0xec>
 8009aa0:	786c      	ldrb	r4, [r5, #1]
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	3502      	adds	r5, #2
 8009aa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009aaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009aae:	f04f 0e00 	mov.w	lr, #0
 8009ab2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ab6:	4676      	mov	r6, lr
 8009ab8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009abc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009ac0:	f1bc 0f09 	cmp.w	ip, #9
 8009ac4:	d816      	bhi.n	8009af4 <_strtol_l.constprop.0+0xa4>
 8009ac6:	4664      	mov	r4, ip
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	dd24      	ble.n	8009b16 <_strtol_l.constprop.0+0xc6>
 8009acc:	f1be 3fff 	cmp.w	lr, #4294967295
 8009ad0:	d008      	beq.n	8009ae4 <_strtol_l.constprop.0+0x94>
 8009ad2:	45b1      	cmp	r9, r6
 8009ad4:	d31c      	bcc.n	8009b10 <_strtol_l.constprop.0+0xc0>
 8009ad6:	d101      	bne.n	8009adc <_strtol_l.constprop.0+0x8c>
 8009ad8:	45a2      	cmp	sl, r4
 8009ada:	db19      	blt.n	8009b10 <_strtol_l.constprop.0+0xc0>
 8009adc:	fb06 4603 	mla	r6, r6, r3, r4
 8009ae0:	f04f 0e01 	mov.w	lr, #1
 8009ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae8:	e7e8      	b.n	8009abc <_strtol_l.constprop.0+0x6c>
 8009aea:	2c2b      	cmp	r4, #43	; 0x2b
 8009aec:	bf04      	itt	eq
 8009aee:	782c      	ldrbeq	r4, [r5, #0]
 8009af0:	1cb5      	addeq	r5, r6, #2
 8009af2:	e7ca      	b.n	8009a8a <_strtol_l.constprop.0+0x3a>
 8009af4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009af8:	f1bc 0f19 	cmp.w	ip, #25
 8009afc:	d801      	bhi.n	8009b02 <_strtol_l.constprop.0+0xb2>
 8009afe:	3c37      	subs	r4, #55	; 0x37
 8009b00:	e7e2      	b.n	8009ac8 <_strtol_l.constprop.0+0x78>
 8009b02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b06:	f1bc 0f19 	cmp.w	ip, #25
 8009b0a:	d804      	bhi.n	8009b16 <_strtol_l.constprop.0+0xc6>
 8009b0c:	3c57      	subs	r4, #87	; 0x57
 8009b0e:	e7db      	b.n	8009ac8 <_strtol_l.constprop.0+0x78>
 8009b10:	f04f 3eff 	mov.w	lr, #4294967295
 8009b14:	e7e6      	b.n	8009ae4 <_strtol_l.constprop.0+0x94>
 8009b16:	f1be 3fff 	cmp.w	lr, #4294967295
 8009b1a:	d105      	bne.n	8009b28 <_strtol_l.constprop.0+0xd8>
 8009b1c:	2322      	movs	r3, #34	; 0x22
 8009b1e:	6003      	str	r3, [r0, #0]
 8009b20:	4646      	mov	r6, r8
 8009b22:	b942      	cbnz	r2, 8009b36 <_strtol_l.constprop.0+0xe6>
 8009b24:	4630      	mov	r0, r6
 8009b26:	e79e      	b.n	8009a66 <_strtol_l.constprop.0+0x16>
 8009b28:	b107      	cbz	r7, 8009b2c <_strtol_l.constprop.0+0xdc>
 8009b2a:	4276      	negs	r6, r6
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d0f9      	beq.n	8009b24 <_strtol_l.constprop.0+0xd4>
 8009b30:	f1be 0f00 	cmp.w	lr, #0
 8009b34:	d000      	beq.n	8009b38 <_strtol_l.constprop.0+0xe8>
 8009b36:	1e69      	subs	r1, r5, #1
 8009b38:	6011      	str	r1, [r2, #0]
 8009b3a:	e7f3      	b.n	8009b24 <_strtol_l.constprop.0+0xd4>
 8009b3c:	2430      	movs	r4, #48	; 0x30
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1b1      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b42:	2308      	movs	r3, #8
 8009b44:	e7af      	b.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b46:	2c30      	cmp	r4, #48	; 0x30
 8009b48:	d0a5      	beq.n	8009a96 <_strtol_l.constprop.0+0x46>
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	e7ab      	b.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b4e:	bf00      	nop
 8009b50:	0802ff47 	.word	0x0802ff47

08009b54 <_strtol_r>:
 8009b54:	f7ff bf7c 	b.w	8009a50 <_strtol_l.constprop.0>

08009b58 <_strtoul_l.constprop.0>:
 8009b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	4f36      	ldr	r7, [pc, #216]	; (8009c38 <_strtoul_l.constprop.0+0xe0>)
 8009b5e:	4686      	mov	lr, r0
 8009b60:	460d      	mov	r5, r1
 8009b62:	4628      	mov	r0, r5
 8009b64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b68:	5d3e      	ldrb	r6, [r7, r4]
 8009b6a:	f016 0608 	ands.w	r6, r6, #8
 8009b6e:	d1f8      	bne.n	8009b62 <_strtoul_l.constprop.0+0xa>
 8009b70:	2c2d      	cmp	r4, #45	; 0x2d
 8009b72:	d130      	bne.n	8009bd6 <_strtoul_l.constprop.0+0x7e>
 8009b74:	782c      	ldrb	r4, [r5, #0]
 8009b76:	2601      	movs	r6, #1
 8009b78:	1c85      	adds	r5, r0, #2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d057      	beq.n	8009c2e <_strtoul_l.constprop.0+0xd6>
 8009b7e:	2b10      	cmp	r3, #16
 8009b80:	d109      	bne.n	8009b96 <_strtoul_l.constprop.0+0x3e>
 8009b82:	2c30      	cmp	r4, #48	; 0x30
 8009b84:	d107      	bne.n	8009b96 <_strtoul_l.constprop.0+0x3e>
 8009b86:	7828      	ldrb	r0, [r5, #0]
 8009b88:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009b8c:	2858      	cmp	r0, #88	; 0x58
 8009b8e:	d149      	bne.n	8009c24 <_strtoul_l.constprop.0+0xcc>
 8009b90:	786c      	ldrb	r4, [r5, #1]
 8009b92:	2310      	movs	r3, #16
 8009b94:	3502      	adds	r5, #2
 8009b96:	f04f 38ff 	mov.w	r8, #4294967295
 8009b9a:	2700      	movs	r7, #0
 8009b9c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009ba0:	fb03 f908 	mul.w	r9, r3, r8
 8009ba4:	ea6f 0909 	mvn.w	r9, r9
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009bae:	f1bc 0f09 	cmp.w	ip, #9
 8009bb2:	d815      	bhi.n	8009be0 <_strtoul_l.constprop.0+0x88>
 8009bb4:	4664      	mov	r4, ip
 8009bb6:	42a3      	cmp	r3, r4
 8009bb8:	dd23      	ble.n	8009c02 <_strtoul_l.constprop.0+0xaa>
 8009bba:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009bbe:	d007      	beq.n	8009bd0 <_strtoul_l.constprop.0+0x78>
 8009bc0:	4580      	cmp	r8, r0
 8009bc2:	d31b      	bcc.n	8009bfc <_strtoul_l.constprop.0+0xa4>
 8009bc4:	d101      	bne.n	8009bca <_strtoul_l.constprop.0+0x72>
 8009bc6:	45a1      	cmp	r9, r4
 8009bc8:	db18      	blt.n	8009bfc <_strtoul_l.constprop.0+0xa4>
 8009bca:	fb00 4003 	mla	r0, r0, r3, r4
 8009bce:	2701      	movs	r7, #1
 8009bd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd4:	e7e9      	b.n	8009baa <_strtoul_l.constprop.0+0x52>
 8009bd6:	2c2b      	cmp	r4, #43	; 0x2b
 8009bd8:	bf04      	itt	eq
 8009bda:	782c      	ldrbeq	r4, [r5, #0]
 8009bdc:	1c85      	addeq	r5, r0, #2
 8009bde:	e7cc      	b.n	8009b7a <_strtoul_l.constprop.0+0x22>
 8009be0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009be4:	f1bc 0f19 	cmp.w	ip, #25
 8009be8:	d801      	bhi.n	8009bee <_strtoul_l.constprop.0+0x96>
 8009bea:	3c37      	subs	r4, #55	; 0x37
 8009bec:	e7e3      	b.n	8009bb6 <_strtoul_l.constprop.0+0x5e>
 8009bee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009bf2:	f1bc 0f19 	cmp.w	ip, #25
 8009bf6:	d804      	bhi.n	8009c02 <_strtoul_l.constprop.0+0xaa>
 8009bf8:	3c57      	subs	r4, #87	; 0x57
 8009bfa:	e7dc      	b.n	8009bb6 <_strtoul_l.constprop.0+0x5e>
 8009bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8009c00:	e7e6      	b.n	8009bd0 <_strtoul_l.constprop.0+0x78>
 8009c02:	1c7b      	adds	r3, r7, #1
 8009c04:	d106      	bne.n	8009c14 <_strtoul_l.constprop.0+0xbc>
 8009c06:	2322      	movs	r3, #34	; 0x22
 8009c08:	f8ce 3000 	str.w	r3, [lr]
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	b932      	cbnz	r2, 8009c1e <_strtoul_l.constprop.0+0xc6>
 8009c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c14:	b106      	cbz	r6, 8009c18 <_strtoul_l.constprop.0+0xc0>
 8009c16:	4240      	negs	r0, r0
 8009c18:	2a00      	cmp	r2, #0
 8009c1a:	d0f9      	beq.n	8009c10 <_strtoul_l.constprop.0+0xb8>
 8009c1c:	b107      	cbz	r7, 8009c20 <_strtoul_l.constprop.0+0xc8>
 8009c1e:	1e69      	subs	r1, r5, #1
 8009c20:	6011      	str	r1, [r2, #0]
 8009c22:	e7f5      	b.n	8009c10 <_strtoul_l.constprop.0+0xb8>
 8009c24:	2430      	movs	r4, #48	; 0x30
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1b5      	bne.n	8009b96 <_strtoul_l.constprop.0+0x3e>
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	e7b3      	b.n	8009b96 <_strtoul_l.constprop.0+0x3e>
 8009c2e:	2c30      	cmp	r4, #48	; 0x30
 8009c30:	d0a9      	beq.n	8009b86 <_strtoul_l.constprop.0+0x2e>
 8009c32:	230a      	movs	r3, #10
 8009c34:	e7af      	b.n	8009b96 <_strtoul_l.constprop.0+0x3e>
 8009c36:	bf00      	nop
 8009c38:	0802ff47 	.word	0x0802ff47

08009c3c <_strtoul_r>:
 8009c3c:	f7ff bf8c 	b.w	8009b58 <_strtoul_l.constprop.0>

08009c40 <__ascii_wctomb>:
 8009c40:	b149      	cbz	r1, 8009c56 <__ascii_wctomb+0x16>
 8009c42:	2aff      	cmp	r2, #255	; 0xff
 8009c44:	bf85      	ittet	hi
 8009c46:	238a      	movhi	r3, #138	; 0x8a
 8009c48:	6003      	strhi	r3, [r0, #0]
 8009c4a:	700a      	strbls	r2, [r1, #0]
 8009c4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c50:	bf98      	it	ls
 8009c52:	2001      	movls	r0, #1
 8009c54:	4770      	bx	lr
 8009c56:	4608      	mov	r0, r1
 8009c58:	4770      	bx	lr
	...

08009c5c <fiprintf>:
 8009c5c:	b40e      	push	{r1, r2, r3}
 8009c5e:	b503      	push	{r0, r1, lr}
 8009c60:	4601      	mov	r1, r0
 8009c62:	ab03      	add	r3, sp, #12
 8009c64:	4805      	ldr	r0, [pc, #20]	; (8009c7c <fiprintf+0x20>)
 8009c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c6a:	6800      	ldr	r0, [r0, #0]
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	f000 f83f 	bl	8009cf0 <_vfiprintf_r>
 8009c72:	b002      	add	sp, #8
 8009c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c78:	b003      	add	sp, #12
 8009c7a:	4770      	bx	lr
 8009c7c:	20000068 	.word	0x20000068

08009c80 <abort>:
 8009c80:	b508      	push	{r3, lr}
 8009c82:	2006      	movs	r0, #6
 8009c84:	f000 fa0c 	bl	800a0a0 <raise>
 8009c88:	2001      	movs	r0, #1
 8009c8a:	f7f7 fca9 	bl	80015e0 <_exit>

08009c8e <_malloc_usable_size_r>:
 8009c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c92:	1f18      	subs	r0, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bfbc      	itt	lt
 8009c98:	580b      	ldrlt	r3, [r1, r0]
 8009c9a:	18c0      	addlt	r0, r0, r3
 8009c9c:	4770      	bx	lr

08009c9e <__sfputc_r>:
 8009c9e:	6893      	ldr	r3, [r2, #8]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	b410      	push	{r4}
 8009ca6:	6093      	str	r3, [r2, #8]
 8009ca8:	da08      	bge.n	8009cbc <__sfputc_r+0x1e>
 8009caa:	6994      	ldr	r4, [r2, #24]
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	db01      	blt.n	8009cb4 <__sfputc_r+0x16>
 8009cb0:	290a      	cmp	r1, #10
 8009cb2:	d103      	bne.n	8009cbc <__sfputc_r+0x1e>
 8009cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb8:	f000 b934 	b.w	8009f24 <__swbuf_r>
 8009cbc:	6813      	ldr	r3, [r2, #0]
 8009cbe:	1c58      	adds	r0, r3, #1
 8009cc0:	6010      	str	r0, [r2, #0]
 8009cc2:	7019      	strb	r1, [r3, #0]
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <__sfputs_r>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	4606      	mov	r6, r0
 8009cd0:	460f      	mov	r7, r1
 8009cd2:	4614      	mov	r4, r2
 8009cd4:	18d5      	adds	r5, r2, r3
 8009cd6:	42ac      	cmp	r4, r5
 8009cd8:	d101      	bne.n	8009cde <__sfputs_r+0x12>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e007      	b.n	8009cee <__sfputs_r+0x22>
 8009cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce2:	463a      	mov	r2, r7
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f7ff ffda 	bl	8009c9e <__sfputc_r>
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	d1f3      	bne.n	8009cd6 <__sfputs_r+0xa>
 8009cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cf0 <_vfiprintf_r>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	460d      	mov	r5, r1
 8009cf6:	b09d      	sub	sp, #116	; 0x74
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	4698      	mov	r8, r3
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	b118      	cbz	r0, 8009d08 <_vfiprintf_r+0x18>
 8009d00:	6a03      	ldr	r3, [r0, #32]
 8009d02:	b90b      	cbnz	r3, 8009d08 <_vfiprintf_r+0x18>
 8009d04:	f7fd fca2 	bl	800764c <__sinit>
 8009d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d0a:	07d9      	lsls	r1, r3, #31
 8009d0c:	d405      	bmi.n	8009d1a <_vfiprintf_r+0x2a>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	059a      	lsls	r2, r3, #22
 8009d12:	d402      	bmi.n	8009d1a <_vfiprintf_r+0x2a>
 8009d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d16:	f7fd fdde 	bl	80078d6 <__retarget_lock_acquire_recursive>
 8009d1a:	89ab      	ldrh	r3, [r5, #12]
 8009d1c:	071b      	lsls	r3, r3, #28
 8009d1e:	d501      	bpl.n	8009d24 <_vfiprintf_r+0x34>
 8009d20:	692b      	ldr	r3, [r5, #16]
 8009d22:	b99b      	cbnz	r3, 8009d4c <_vfiprintf_r+0x5c>
 8009d24:	4629      	mov	r1, r5
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 f93a 	bl	8009fa0 <__swsetup_r>
 8009d2c:	b170      	cbz	r0, 8009d4c <_vfiprintf_r+0x5c>
 8009d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d30:	07dc      	lsls	r4, r3, #31
 8009d32:	d504      	bpl.n	8009d3e <_vfiprintf_r+0x4e>
 8009d34:	f04f 30ff 	mov.w	r0, #4294967295
 8009d38:	b01d      	add	sp, #116	; 0x74
 8009d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3e:	89ab      	ldrh	r3, [r5, #12]
 8009d40:	0598      	lsls	r0, r3, #22
 8009d42:	d4f7      	bmi.n	8009d34 <_vfiprintf_r+0x44>
 8009d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d46:	f7fd fdc7 	bl	80078d8 <__retarget_lock_release_recursive>
 8009d4a:	e7f3      	b.n	8009d34 <_vfiprintf_r+0x44>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d50:	2320      	movs	r3, #32
 8009d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d5a:	2330      	movs	r3, #48	; 0x30
 8009d5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f10 <_vfiprintf_r+0x220>
 8009d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d64:	f04f 0901 	mov.w	r9, #1
 8009d68:	4623      	mov	r3, r4
 8009d6a:	469a      	mov	sl, r3
 8009d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d70:	b10a      	cbz	r2, 8009d76 <_vfiprintf_r+0x86>
 8009d72:	2a25      	cmp	r2, #37	; 0x25
 8009d74:	d1f9      	bne.n	8009d6a <_vfiprintf_r+0x7a>
 8009d76:	ebba 0b04 	subs.w	fp, sl, r4
 8009d7a:	d00b      	beq.n	8009d94 <_vfiprintf_r+0xa4>
 8009d7c:	465b      	mov	r3, fp
 8009d7e:	4622      	mov	r2, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ffa2 	bl	8009ccc <__sfputs_r>
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f000 80a9 	beq.w	8009ee0 <_vfiprintf_r+0x1f0>
 8009d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d90:	445a      	add	r2, fp
 8009d92:	9209      	str	r2, [sp, #36]	; 0x24
 8009d94:	f89a 3000 	ldrb.w	r3, [sl]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 80a1 	beq.w	8009ee0 <_vfiprintf_r+0x1f0>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295
 8009da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da8:	f10a 0a01 	add.w	sl, sl, #1
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009db4:	931a      	str	r3, [sp, #104]	; 0x68
 8009db6:	4654      	mov	r4, sl
 8009db8:	2205      	movs	r2, #5
 8009dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbe:	4854      	ldr	r0, [pc, #336]	; (8009f10 <_vfiprintf_r+0x220>)
 8009dc0:	f7f6 fa3e 	bl	8000240 <memchr>
 8009dc4:	9a04      	ldr	r2, [sp, #16]
 8009dc6:	b9d8      	cbnz	r0, 8009e00 <_vfiprintf_r+0x110>
 8009dc8:	06d1      	lsls	r1, r2, #27
 8009dca:	bf44      	itt	mi
 8009dcc:	2320      	movmi	r3, #32
 8009dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd2:	0713      	lsls	r3, r2, #28
 8009dd4:	bf44      	itt	mi
 8009dd6:	232b      	movmi	r3, #43	; 0x2b
 8009dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8009de0:	2b2a      	cmp	r3, #42	; 0x2a
 8009de2:	d015      	beq.n	8009e10 <_vfiprintf_r+0x120>
 8009de4:	9a07      	ldr	r2, [sp, #28]
 8009de6:	4654      	mov	r4, sl
 8009de8:	2000      	movs	r0, #0
 8009dea:	f04f 0c0a 	mov.w	ip, #10
 8009dee:	4621      	mov	r1, r4
 8009df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009df4:	3b30      	subs	r3, #48	; 0x30
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	d94d      	bls.n	8009e96 <_vfiprintf_r+0x1a6>
 8009dfa:	b1b0      	cbz	r0, 8009e2a <_vfiprintf_r+0x13a>
 8009dfc:	9207      	str	r2, [sp, #28]
 8009dfe:	e014      	b.n	8009e2a <_vfiprintf_r+0x13a>
 8009e00:	eba0 0308 	sub.w	r3, r0, r8
 8009e04:	fa09 f303 	lsl.w	r3, r9, r3
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	46a2      	mov	sl, r4
 8009e0e:	e7d2      	b.n	8009db6 <_vfiprintf_r+0xc6>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	1d19      	adds	r1, r3, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	9103      	str	r1, [sp, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bfbb      	ittet	lt
 8009e1c:	425b      	neglt	r3, r3
 8009e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e22:	9307      	strge	r3, [sp, #28]
 8009e24:	9307      	strlt	r3, [sp, #28]
 8009e26:	bfb8      	it	lt
 8009e28:	9204      	strlt	r2, [sp, #16]
 8009e2a:	7823      	ldrb	r3, [r4, #0]
 8009e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e2e:	d10c      	bne.n	8009e4a <_vfiprintf_r+0x15a>
 8009e30:	7863      	ldrb	r3, [r4, #1]
 8009e32:	2b2a      	cmp	r3, #42	; 0x2a
 8009e34:	d134      	bne.n	8009ea0 <_vfiprintf_r+0x1b0>
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	1d1a      	adds	r2, r3, #4
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	9203      	str	r2, [sp, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfb8      	it	lt
 8009e42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e46:	3402      	adds	r4, #2
 8009e48:	9305      	str	r3, [sp, #20]
 8009e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f20 <_vfiprintf_r+0x230>
 8009e4e:	7821      	ldrb	r1, [r4, #0]
 8009e50:	2203      	movs	r2, #3
 8009e52:	4650      	mov	r0, sl
 8009e54:	f7f6 f9f4 	bl	8000240 <memchr>
 8009e58:	b138      	cbz	r0, 8009e6a <_vfiprintf_r+0x17a>
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	eba0 000a 	sub.w	r0, r0, sl
 8009e60:	2240      	movs	r2, #64	; 0x40
 8009e62:	4082      	lsls	r2, r0
 8009e64:	4313      	orrs	r3, r2
 8009e66:	3401      	adds	r4, #1
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6e:	4829      	ldr	r0, [pc, #164]	; (8009f14 <_vfiprintf_r+0x224>)
 8009e70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e74:	2206      	movs	r2, #6
 8009e76:	f7f6 f9e3 	bl	8000240 <memchr>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d03f      	beq.n	8009efe <_vfiprintf_r+0x20e>
 8009e7e:	4b26      	ldr	r3, [pc, #152]	; (8009f18 <_vfiprintf_r+0x228>)
 8009e80:	bb1b      	cbnz	r3, 8009eca <_vfiprintf_r+0x1da>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	3307      	adds	r3, #7
 8009e86:	f023 0307 	bic.w	r3, r3, #7
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	9303      	str	r3, [sp, #12]
 8009e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e90:	443b      	add	r3, r7
 8009e92:	9309      	str	r3, [sp, #36]	; 0x24
 8009e94:	e768      	b.n	8009d68 <_vfiprintf_r+0x78>
 8009e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	e7a6      	b.n	8009dee <_vfiprintf_r+0xfe>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	3401      	adds	r4, #1
 8009ea4:	9305      	str	r3, [sp, #20]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	f04f 0c0a 	mov.w	ip, #10
 8009eac:	4620      	mov	r0, r4
 8009eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eb2:	3a30      	subs	r2, #48	; 0x30
 8009eb4:	2a09      	cmp	r2, #9
 8009eb6:	d903      	bls.n	8009ec0 <_vfiprintf_r+0x1d0>
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0c6      	beq.n	8009e4a <_vfiprintf_r+0x15a>
 8009ebc:	9105      	str	r1, [sp, #20]
 8009ebe:	e7c4      	b.n	8009e4a <_vfiprintf_r+0x15a>
 8009ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e7f0      	b.n	8009eac <_vfiprintf_r+0x1bc>
 8009eca:	ab03      	add	r3, sp, #12
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <_vfiprintf_r+0x22c>)
 8009ed2:	a904      	add	r1, sp, #16
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7fc ff83 	bl	8006de0 <_printf_float>
 8009eda:	4607      	mov	r7, r0
 8009edc:	1c78      	adds	r0, r7, #1
 8009ede:	d1d6      	bne.n	8009e8e <_vfiprintf_r+0x19e>
 8009ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee2:	07d9      	lsls	r1, r3, #31
 8009ee4:	d405      	bmi.n	8009ef2 <_vfiprintf_r+0x202>
 8009ee6:	89ab      	ldrh	r3, [r5, #12]
 8009ee8:	059a      	lsls	r2, r3, #22
 8009eea:	d402      	bmi.n	8009ef2 <_vfiprintf_r+0x202>
 8009eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eee:	f7fd fcf3 	bl	80078d8 <__retarget_lock_release_recursive>
 8009ef2:	89ab      	ldrh	r3, [r5, #12]
 8009ef4:	065b      	lsls	r3, r3, #25
 8009ef6:	f53f af1d 	bmi.w	8009d34 <_vfiprintf_r+0x44>
 8009efa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009efc:	e71c      	b.n	8009d38 <_vfiprintf_r+0x48>
 8009efe:	ab03      	add	r3, sp, #12
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	462a      	mov	r2, r5
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <_vfiprintf_r+0x22c>)
 8009f06:	a904      	add	r1, sp, #16
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7fd f9f1 	bl	80072f0 <_printf_i>
 8009f0e:	e7e4      	b.n	8009eda <_vfiprintf_r+0x1ea>
 8009f10:	0802fed4 	.word	0x0802fed4
 8009f14:	0802fede 	.word	0x0802fede
 8009f18:	08006de1 	.word	0x08006de1
 8009f1c:	08009ccd 	.word	0x08009ccd
 8009f20:	0802feda 	.word	0x0802feda

08009f24 <__swbuf_r>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	460e      	mov	r6, r1
 8009f28:	4614      	mov	r4, r2
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	b118      	cbz	r0, 8009f36 <__swbuf_r+0x12>
 8009f2e:	6a03      	ldr	r3, [r0, #32]
 8009f30:	b90b      	cbnz	r3, 8009f36 <__swbuf_r+0x12>
 8009f32:	f7fd fb8b 	bl	800764c <__sinit>
 8009f36:	69a3      	ldr	r3, [r4, #24]
 8009f38:	60a3      	str	r3, [r4, #8]
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	071a      	lsls	r2, r3, #28
 8009f3e:	d525      	bpl.n	8009f8c <__swbuf_r+0x68>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	b31b      	cbz	r3, 8009f8c <__swbuf_r+0x68>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	1a98      	subs	r0, r3, r2
 8009f4a:	6963      	ldr	r3, [r4, #20]
 8009f4c:	b2f6      	uxtb	r6, r6
 8009f4e:	4283      	cmp	r3, r0
 8009f50:	4637      	mov	r7, r6
 8009f52:	dc04      	bgt.n	8009f5e <__swbuf_r+0x3a>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f7ff fc30 	bl	80097bc <_fflush_r>
 8009f5c:	b9e0      	cbnz	r0, 8009f98 <__swbuf_r+0x74>
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	6022      	str	r2, [r4, #0]
 8009f6a:	701e      	strb	r6, [r3, #0]
 8009f6c:	6962      	ldr	r2, [r4, #20]
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d004      	beq.n	8009f7e <__swbuf_r+0x5a>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	07db      	lsls	r3, r3, #31
 8009f78:	d506      	bpl.n	8009f88 <__swbuf_r+0x64>
 8009f7a:	2e0a      	cmp	r6, #10
 8009f7c:	d104      	bne.n	8009f88 <__swbuf_r+0x64>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f7ff fc1b 	bl	80097bc <_fflush_r>
 8009f86:	b938      	cbnz	r0, 8009f98 <__swbuf_r+0x74>
 8009f88:	4638      	mov	r0, r7
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 f806 	bl	8009fa0 <__swsetup_r>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d0d5      	beq.n	8009f44 <__swbuf_r+0x20>
 8009f98:	f04f 37ff 	mov.w	r7, #4294967295
 8009f9c:	e7f4      	b.n	8009f88 <__swbuf_r+0x64>
	...

08009fa0 <__swsetup_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <__swsetup_r+0xac>)
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	460c      	mov	r4, r1
 8009faa:	b118      	cbz	r0, 8009fb4 <__swsetup_r+0x14>
 8009fac:	6a03      	ldr	r3, [r0, #32]
 8009fae:	b90b      	cbnz	r3, 8009fb4 <__swsetup_r+0x14>
 8009fb0:	f7fd fb4c 	bl	800764c <__sinit>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fba:	0718      	lsls	r0, r3, #28
 8009fbc:	d422      	bmi.n	800a004 <__swsetup_r+0x64>
 8009fbe:	06d9      	lsls	r1, r3, #27
 8009fc0:	d407      	bmi.n	8009fd2 <__swsetup_r+0x32>
 8009fc2:	2309      	movs	r3, #9
 8009fc4:	602b      	str	r3, [r5, #0]
 8009fc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	e034      	b.n	800a03c <__swsetup_r+0x9c>
 8009fd2:	0758      	lsls	r0, r3, #29
 8009fd4:	d512      	bpl.n	8009ffc <__swsetup_r+0x5c>
 8009fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fd8:	b141      	cbz	r1, 8009fec <__swsetup_r+0x4c>
 8009fda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fde:	4299      	cmp	r1, r3
 8009fe0:	d002      	beq.n	8009fe8 <__swsetup_r+0x48>
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f7fe fa70 	bl	80084c8 <_free_r>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	6363      	str	r3, [r4, #52]	; 0x34
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6063      	str	r3, [r4, #4]
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f043 0308 	orr.w	r3, r3, #8
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	b94b      	cbnz	r3, 800a01c <__swsetup_r+0x7c>
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a00e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a012:	d003      	beq.n	800a01c <__swsetup_r+0x7c>
 800a014:	4621      	mov	r1, r4
 800a016:	4628      	mov	r0, r5
 800a018:	f000 f884 	bl	800a124 <__smakebuf_r>
 800a01c:	89a0      	ldrh	r0, [r4, #12]
 800a01e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a022:	f010 0301 	ands.w	r3, r0, #1
 800a026:	d00a      	beq.n	800a03e <__swsetup_r+0x9e>
 800a028:	2300      	movs	r3, #0
 800a02a:	60a3      	str	r3, [r4, #8]
 800a02c:	6963      	ldr	r3, [r4, #20]
 800a02e:	425b      	negs	r3, r3
 800a030:	61a3      	str	r3, [r4, #24]
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	b943      	cbnz	r3, 800a048 <__swsetup_r+0xa8>
 800a036:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a03a:	d1c4      	bne.n	8009fc6 <__swsetup_r+0x26>
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	0781      	lsls	r1, r0, #30
 800a040:	bf58      	it	pl
 800a042:	6963      	ldrpl	r3, [r4, #20]
 800a044:	60a3      	str	r3, [r4, #8]
 800a046:	e7f4      	b.n	800a032 <__swsetup_r+0x92>
 800a048:	2000      	movs	r0, #0
 800a04a:	e7f7      	b.n	800a03c <__swsetup_r+0x9c>
 800a04c:	20000068 	.word	0x20000068

0800a050 <_raise_r>:
 800a050:	291f      	cmp	r1, #31
 800a052:	b538      	push	{r3, r4, r5, lr}
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	d904      	bls.n	800a064 <_raise_r+0x14>
 800a05a:	2316      	movs	r3, #22
 800a05c:	6003      	str	r3, [r0, #0]
 800a05e:	f04f 30ff 	mov.w	r0, #4294967295
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a066:	b112      	cbz	r2, 800a06e <_raise_r+0x1e>
 800a068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a06c:	b94b      	cbnz	r3, 800a082 <_raise_r+0x32>
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 f830 	bl	800a0d4 <_getpid_r>
 800a074:	462a      	mov	r2, r5
 800a076:	4601      	mov	r1, r0
 800a078:	4620      	mov	r0, r4
 800a07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a07e:	f000 b817 	b.w	800a0b0 <_kill_r>
 800a082:	2b01      	cmp	r3, #1
 800a084:	d00a      	beq.n	800a09c <_raise_r+0x4c>
 800a086:	1c59      	adds	r1, r3, #1
 800a088:	d103      	bne.n	800a092 <_raise_r+0x42>
 800a08a:	2316      	movs	r3, #22
 800a08c:	6003      	str	r3, [r0, #0]
 800a08e:	2001      	movs	r0, #1
 800a090:	e7e7      	b.n	800a062 <_raise_r+0x12>
 800a092:	2400      	movs	r4, #0
 800a094:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a098:	4628      	mov	r0, r5
 800a09a:	4798      	blx	r3
 800a09c:	2000      	movs	r0, #0
 800a09e:	e7e0      	b.n	800a062 <_raise_r+0x12>

0800a0a0 <raise>:
 800a0a0:	4b02      	ldr	r3, [pc, #8]	; (800a0ac <raise+0xc>)
 800a0a2:	4601      	mov	r1, r0
 800a0a4:	6818      	ldr	r0, [r3, #0]
 800a0a6:	f7ff bfd3 	b.w	800a050 <_raise_r>
 800a0aa:	bf00      	nop
 800a0ac:	20000068 	.word	0x20000068

0800a0b0 <_kill_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	; (800a0d0 <_kill_r+0x20>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	f7f7 fa7f 	bl	80015c0 <_kill>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	d102      	bne.n	800a0cc <_kill_r+0x1c>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	b103      	cbz	r3, 800a0cc <_kill_r+0x1c>
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000734 	.word	0x20000734

0800a0d4 <_getpid_r>:
 800a0d4:	f7f7 ba6c 	b.w	80015b0 <_getpid>

0800a0d8 <__swhatbuf_r>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	b096      	sub	sp, #88	; 0x58
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	461e      	mov	r6, r3
 800a0e8:	da0d      	bge.n	800a106 <__swhatbuf_r+0x2e>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0f0:	f04f 0100 	mov.w	r1, #0
 800a0f4:	bf0c      	ite	eq
 800a0f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a0fa:	2340      	movne	r3, #64	; 0x40
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	6031      	str	r1, [r6, #0]
 800a100:	602b      	str	r3, [r5, #0]
 800a102:	b016      	add	sp, #88	; 0x58
 800a104:	bd70      	pop	{r4, r5, r6, pc}
 800a106:	466a      	mov	r2, sp
 800a108:	f000 f848 	bl	800a19c <_fstat_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	dbec      	blt.n	800a0ea <__swhatbuf_r+0x12>
 800a110:	9901      	ldr	r1, [sp, #4]
 800a112:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a116:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a11a:	4259      	negs	r1, r3
 800a11c:	4159      	adcs	r1, r3
 800a11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a122:	e7eb      	b.n	800a0fc <__swhatbuf_r+0x24>

0800a124 <__smakebuf_r>:
 800a124:	898b      	ldrh	r3, [r1, #12]
 800a126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a128:	079d      	lsls	r5, r3, #30
 800a12a:	4606      	mov	r6, r0
 800a12c:	460c      	mov	r4, r1
 800a12e:	d507      	bpl.n	800a140 <__smakebuf_r+0x1c>
 800a130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	2301      	movs	r3, #1
 800a13a:	6163      	str	r3, [r4, #20]
 800a13c:	b002      	add	sp, #8
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	ab01      	add	r3, sp, #4
 800a142:	466a      	mov	r2, sp
 800a144:	f7ff ffc8 	bl	800a0d8 <__swhatbuf_r>
 800a148:	9900      	ldr	r1, [sp, #0]
 800a14a:	4605      	mov	r5, r0
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7fe fa2f 	bl	80085b0 <_malloc_r>
 800a152:	b948      	cbnz	r0, 800a168 <__smakebuf_r+0x44>
 800a154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a158:	059a      	lsls	r2, r3, #22
 800a15a:	d4ef      	bmi.n	800a13c <__smakebuf_r+0x18>
 800a15c:	f023 0303 	bic.w	r3, r3, #3
 800a160:	f043 0302 	orr.w	r3, r3, #2
 800a164:	81a3      	strh	r3, [r4, #12]
 800a166:	e7e3      	b.n	800a130 <__smakebuf_r+0xc>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	6020      	str	r0, [r4, #0]
 800a16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	6163      	str	r3, [r4, #20]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	6120      	str	r0, [r4, #16]
 800a17a:	b15b      	cbz	r3, 800a194 <__smakebuf_r+0x70>
 800a17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a180:	4630      	mov	r0, r6
 800a182:	f000 f81d 	bl	800a1c0 <_isatty_r>
 800a186:	b128      	cbz	r0, 800a194 <__smakebuf_r+0x70>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	431d      	orrs	r5, r3
 800a198:	81a5      	strh	r5, [r4, #12]
 800a19a:	e7cf      	b.n	800a13c <__smakebuf_r+0x18>

0800a19c <_fstat_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4d07      	ldr	r5, [pc, #28]	; (800a1bc <_fstat_r+0x20>)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	f7f7 fa68 	bl	800167e <_fstat>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d102      	bne.n	800a1b8 <_fstat_r+0x1c>
 800a1b2:	682b      	ldr	r3, [r5, #0]
 800a1b4:	b103      	cbz	r3, 800a1b8 <_fstat_r+0x1c>
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000734 	.word	0x20000734

0800a1c0 <_isatty_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d06      	ldr	r5, [pc, #24]	; (800a1dc <_isatty_r+0x1c>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7f7 fa67 	bl	800169e <_isatty>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_isatty_r+0x1a>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_isatty_r+0x1a>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	20000734 	.word	0x20000734

0800a1e0 <_init>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	bf00      	nop
 800a1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e6:	bc08      	pop	{r3}
 800a1e8:	469e      	mov	lr, r3
 800a1ea:	4770      	bx	lr

0800a1ec <_fini>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr
