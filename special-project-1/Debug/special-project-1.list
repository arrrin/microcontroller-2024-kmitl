
special-project-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f64  08004f64  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000064  08004fd0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08004fd0  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7f7  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b50  00000000  00000000  0002a8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060d  00000000  00000000  0002cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027004  00000000  00000000  0002d225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b9f7  00000000  00000000  00054229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f118d  00000000  00000000  0005fc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002440  00000000  00000000  00150db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001531f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	08004e94 	.word	0x08004e94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	08004e94 	.word	0x08004e94

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_GPIO_Init+0x44>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <MX_GPIO_Init+0x44>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_GPIO_Init+0x44>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_GPIO_Init+0x44>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <MX_GPIO_Init+0x44>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_GPIO_Init+0x44>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 fcd9 	bl	8000ff4 <HAL_Delay>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <printOut>:

void printOut(const char *text) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000654:	bf00      	nop
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <printOut+0x34>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000660:	2b40      	cmp	r3, #64	; 0x40
 8000662:	d1f8      	bne.n	8000656 <printOut+0xa>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fdeb 	bl	8000240 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <printOut+0x34>)
 8000674:	f002 fab7 	bl	8002be6 <HAL_UART_Transmit>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000228 	.word	0x20000228

08000684 <receiveUserInput>:
void printOutLine(const char *text) {
	printOut(text);
	printOut("\r\n");
}

void receiveUserInput() {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	receiveTextLength = 0;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <receiveUserInput+0x80>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
	char ch = 'a';
 8000690:	2361      	movs	r3, #97	; 0x61
 8000692:	71fb      	strb	r3, [r7, #7]
	while (ch != '\r') {
 8000694:	e023      	b.n	80006de <receiveUserInput+0x5a>
		while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 8000696:	bf00      	nop
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <receiveUserInput+0x84>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	2b20      	cmp	r3, #32
 80006a4:	d1f8      	bne.n	8000698 <receiveUserInput+0x14>
		}
		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	4816      	ldr	r0, [pc, #88]	; (8000708 <receiveUserInput+0x84>)
 80006ae:	f002 fb1d 	bl	8002cec <HAL_UART_Receive>
		//SAVE INPUT TO GLobal STRING
		receiveText[receiveTextLength++] = ch;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <receiveUserInput+0x80>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	4912      	ldr	r1, [pc, #72]	; (8000704 <receiveUserInput+0x80>)
 80006ba:	600a      	str	r2, [r1, #0]
 80006bc:	79f9      	ldrb	r1, [r7, #7]
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <receiveUserInput+0x88>)
 80006c0:	54d1      	strb	r1, [r2, r3]
		while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {
 80006c2:	bf00      	nop
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <receiveUserInput+0x84>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ce:	2b40      	cmp	r3, #64	; 0x40
 80006d0:	d1f8      	bne.n	80006c4 <receiveUserInput+0x40>
		}
		HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 100);
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2201      	movs	r2, #1
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <receiveUserInput+0x84>)
 80006da:	f002 fa84 	bl	8002be6 <HAL_UART_Transmit>
	while (ch != '\r') {
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b0d      	cmp	r3, #13
 80006e2:	d1d8      	bne.n	8000696 <receiveUserInput+0x12>
	}
	//ADD "/r/n"
	receiveText[receiveTextLength++] = '\n';
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <receiveUserInput+0x80>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	4906      	ldr	r1, [pc, #24]	; (8000704 <receiveUserInput+0x80>)
 80006ec:	600a      	str	r2, [r1, #0]
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <receiveUserInput+0x88>)
 80006f0:	210a      	movs	r1, #10
 80006f2:	54d1      	strb	r1, [r2, r3]
	printOut("\n");
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <receiveUserInput+0x8c>)
 80006f6:	f7ff ffa9 	bl	800064c <printOut>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000b4 	.word	0x200000b4
 8000708:	20000228 	.word	0x20000228
 800070c:	20000080 	.word	0x20000080
 8000710:	08004eb0 	.word	0x08004eb0

08000714 <sentMessage>:

void sentMessage(char *text) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) == RESET) {
 800071c:	bf00      	nop
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <sentMessage+0x34>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000728:	2b40      	cmp	r3, #64	; 0x40
 800072a:	d1f8      	bne.n	800071e <sentMessage+0xa>
	}
	HAL_UART_Transmit_IT(&huart2, (uint8_t*) text, strlen(text));
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fd87 	bl	8000240 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29b      	uxth	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <sentMessage+0x34>)
 800073c:	f002 fb9a 	bl	8002e74 <HAL_UART_Transmit_IT>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200001a0 	.word	0x200001a0

0800074c <inputName>:

void inputName() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	printOut("\tName: ");
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <inputName+0x34>)
 8000752:	f7ff ff7b 	bl	800064c <printOut>
	receiveUserInput();
 8000756:	f7ff ff95 	bl	8000684 <receiveUserInput>

	// Text require "\r\n"
	sentMessage(receiveText);
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <inputName+0x38>)
 800075c:	f7ff ffda 	bl	8000714 <sentMessage>

	strncpy(myUserName, receiveText, receiveTextLength - 2);
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <inputName+0x3c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3b02      	subs	r3, #2
 8000766:	461a      	mov	r2, r3
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <inputName+0x38>)
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <inputName+0x40>)
 800076c:	f003 fefa 	bl	8004564 <strncpy>
	myUserName[receiveTextLength - 2] = '\0';
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <inputName+0x3c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3b02      	subs	r3, #2
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <inputName+0x40>)
 8000778:	2100      	movs	r1, #0
 800077a:	54d1      	strb	r1, [r2, r3]
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	08004eb4 	.word	0x08004eb4
 8000784:	20000080 	.word	0x20000080
 8000788:	200000b4 	.word	0x200000b4
 800078c:	200000b8 	.word	0x200000b8

08000790 <checkCoUserIsReady>:

void checkCoUserIsReady() {
 8000790:	b580      	push	{r7, lr}
 8000792:	b09a      	sub	sp, #104	; 0x68
 8000794:	af00      	add	r7, sp, #0
	while (isFirstRx) {
 8000796:	bf00      	nop
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <checkCoUserIsReady+0x2c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1fb      	bne.n	8000798 <checkCoUserIsReady+0x8>
	}
	char text[100];
	sprintf(text, "\t%s is ready\r\n", coUserName);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <checkCoUserIsReady+0x30>)
 80007a4:	4907      	ldr	r1, [pc, #28]	; (80007c4 <checkCoUserIsReady+0x34>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 feb4 	bl	8004514 <siprintf>
	printOut(text);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff4c 	bl	800064c <printOut>
}
 80007b4:	bf00      	nop
 80007b6:	3768      	adds	r7, #104	; 0x68
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	200000ec 	.word	0x200000ec
 80007c4:	08004ebc 	.word	0x08004ebc

080007c8 <checkQuitStatus>:

void checkQuitStatus(char *text) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if (text[0] == 'q' && text[2] == '\n') {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b71      	cmp	r3, #113	; 0x71
 80007d6:	d10d      	bne.n	80007f4 <checkQuitStatus+0x2c>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3302      	adds	r3, #2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d108      	bne.n	80007f4 <checkQuitStatus+0x2c>
		isQuit = 1;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <checkQuitStatus+0x34>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
		isSendable = 0;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <checkQuitStatus+0x38>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
		HAL_UART_DeInit(&huart2);
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <checkQuitStatus+0x3c>)
 80007f0:	f002 f9bc 	bl	8002b6c <HAL_UART_DeInit>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000198 	.word	0x20000198
 8000800:	20000004 	.word	0x20000004
 8000804:	200001a0 	.word	0x200001a0

08000808 <userInputText>:

void userInputText() {
 8000808:	b580      	push	{r7, lr}
 800080a:	b09a      	sub	sp, #104	; 0x68
 800080c:	af00      	add	r7, sp, #0
	char text[100];
	sprintf(text, "\t %s => ", myUserName);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <userInputText+0x28>)
 8000812:	4908      	ldr	r1, [pc, #32]	; (8000834 <userInputText+0x2c>)
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fe7d 	bl	8004514 <siprintf>
	printOut(text);
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff15 	bl	800064c <printOut>
	receiveUserInput();
 8000822:	f7ff ff2f 	bl	8000684 <receiveUserInput>
}
 8000826:	bf00      	nop
 8000828:	3768      	adds	r7, #104	; 0x68
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000b8 	.word	0x200000b8
 8000834:	08004ecc 	.word	0x08004ecc

08000838 <showReceivedMessage>:

void showReceivedMessage() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b0b2      	sub	sp, #200	; 0xc8
 800083c:	af00      	add	r7, sp, #0
	if (strlen(receivedMessage) == 0) {
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <showReceivedMessage+0x2c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00a      	beq.n	800085c <showReceivedMessage+0x24>
		return;
	}
	char text[200];
	sprintf(text, "\t %s : %s\r\n", coUserName, receivedMessage);
 8000846:	4638      	mov	r0, r7
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <showReceivedMessage+0x2c>)
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <showReceivedMessage+0x30>)
 800084c:	4907      	ldr	r1, [pc, #28]	; (800086c <showReceivedMessage+0x34>)
 800084e:	f003 fe61 	bl	8004514 <siprintf>
	printOut(text);
 8000852:	463b      	mov	r3, r7
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fef9 	bl	800064c <printOut>
 800085a:	e000      	b.n	800085e <showReceivedMessage+0x26>
		return;
 800085c:	bf00      	nop
}
 800085e:	37c8      	adds	r7, #200	; 0xc8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000130 	.word	0x20000130
 8000868:	200000ec 	.word	0x200000ec
 800086c:	08004ed8 	.word	0x08004ed8

08000870 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (rxData[0] == '\n') {
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <HAL_UART_RxCpltCallback+0xa8>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b0a      	cmp	r3, #10
 800087e:	d139      	bne.n	80008f4 <HAL_UART_RxCpltCallback+0x84>
		HAL_UART_Init(&huart3);
 8000880:	4826      	ldr	r0, [pc, #152]	; (800091c <HAL_UART_RxCpltCallback+0xac>)
 8000882:	f002 f925 	bl	8002ad0 <HAL_UART_Init>
		// End of message received, process it
		receivedMessage[--receivedIndex] = '\0';
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3b01      	subs	r3, #1
 800088c:	4a24      	ldr	r2, [pc, #144]	; (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a23      	ldr	r2, [pc, #140]	; (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 8000896:	2100      	movs	r1, #0
 8000898:	54d1      	strb	r1, [r2, r3]
		if (isFirstRx) {
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <HAL_UART_RxCpltCallback+0xb8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00a      	beq.n	80008b8 <HAL_UART_RxCpltCallback+0x48>
			strcpy(coUserName, receivedMessage);
 80008a2:	4920      	ldr	r1, [pc, #128]	; (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 80008a4:	4821      	ldr	r0, [pc, #132]	; (800092c <HAL_UART_RxCpltCallback+0xbc>)
 80008a6:	f003 fe9d 	bl	80045e4 <strcpy>
			isFirstRx = 0;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <HAL_UART_RxCpltCallback+0xb8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
			isSendable = 1;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <HAL_UART_RxCpltCallback+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	e019      	b.n	80008ec <HAL_UART_RxCpltCallback+0x7c>
		} else if (receivedMessage[0] == 'q' && receivedMessage[1] == '\0') {
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b71      	cmp	r3, #113	; 0x71
 80008be:	d10d      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x6c>
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d109      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x6c>
			isQuit = 1;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_UART_RxCpltCallback+0xc4>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
			isSendable = 0;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_RxCpltCallback+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
			HAL_UART_DeInit(&huart2);
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <HAL_UART_RxCpltCallback+0xc8>)
 80008d6:	f002 f949 	bl	8002b6c <HAL_UART_DeInit>
 80008da:	e007      	b.n	80008ec <HAL_UART_RxCpltCallback+0x7c>
		} else {
			showReceivedMessage();
 80008dc:	f7ff ffac 	bl	8000838 <showReceivedMessage>
			receivedMessage[0] = '\0';
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
			isSendable = 1;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_UART_RxCpltCallback+0xc0>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
		}
		// Reset the index for the next message
		receivedIndex = 0;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	e008      	b.n	8000906 <HAL_UART_RxCpltCallback+0x96>
	} else {
		receivedMessage[receivedIndex++] = rxData[0];
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	4909      	ldr	r1, [pc, #36]	; (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 80008fc:	600a      	str	r2, [r1, #0]
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_UART_RxCpltCallback+0xa8>)
 8000900:	7811      	ldrb	r1, [r2, #0]
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 8000904:	54d1      	strb	r1, [r2, r3]
	}

	// Enable UART receive interrupt again
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rxData, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	4903      	ldr	r1, [pc, #12]	; (8000918 <HAL_UART_RxCpltCallback+0xa8>)
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <HAL_UART_RxCpltCallback+0xc8>)
 800090c:	f002 fb10 	bl	8002f30 <HAL_UART_Receive_IT>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000120 	.word	0x20000120
 800091c:	20000228 	.word	0x20000228
 8000920:	20000194 	.word	0x20000194
 8000924:	20000130 	.word	0x20000130
 8000928:	20000000 	.word	0x20000000
 800092c:	200000ec 	.word	0x200000ec
 8000930:	20000004 	.word	0x20000004
 8000934:	20000198 	.word	0x20000198
 8000938:	200001a0 	.word	0x200001a0

0800093c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
		isSendable = 0;
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_UART_TxCpltCallback+0x1c>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]

}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000004 	.word	0x20000004

0800095c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000962:	f000 faea 	bl	8000f3a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000966:	f000 f855 	bl	8000a14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800096a:	f7ff fe3f 	bl	80005ec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800096e:	f000 f953 	bl	8000c18 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000972:	f000 f981 	bl	8000c78 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	const char WELCOME_TEXT[] = "Man from U.A.R.T.1!\r\nQuit PRESS q\r\n";
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <main+0x94>)
 8000978:	1d3c      	adds	r4, r7, #4
 800097a:	461d      	mov	r5, r3
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	6023      	str	r3, [r4, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*) rxData, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	491a      	ldr	r1, [pc, #104]	; (80009f4 <main+0x98>)
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <main+0x9c>)
 800098e:	f002 facf 	bl	8002f30 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*) txData, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	4919      	ldr	r1, [pc, #100]	; (80009fc <main+0xa0>)
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <main+0x9c>)
 8000998:	f002 fa6c 	bl	8002e74 <HAL_UART_Transmit_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		printOut(WELCOME_TEXT);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe54 	bl	800064c <printOut>
		inputName();
 80009a4:	f7ff fed2 	bl	800074c <inputName>
		checkCoUserIsReady();
 80009a8:	f7ff fef2 	bl	8000790 <checkCoUserIsReady>

		while (!isQuit) {
 80009ac:	e014      	b.n	80009d8 <main+0x7c>
			//		  		  char ch;
			//		  		  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET&& !isSendable && !isQuit) {}
			//		  	  		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 100);
			//		  }
			while (isSendable) {
				userInputText();
 80009ae:	f7ff ff2b 	bl	8000808 <userInputText>
				sentMessage(receiveText);
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xa4>)
 80009b4:	f7ff feae 	bl	8000714 <sentMessage>
				checkQuitStatus(receiveText);
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <main+0xa4>)
 80009ba:	f7ff ff05 	bl	80007c8 <checkQuitStatus>
				HAL_UART_DeInit(&huart3);
 80009be:	4811      	ldr	r0, [pc, #68]	; (8000a04 <main+0xa8>)
 80009c0:	f002 f8d4 	bl	8002b6c <HAL_UART_DeInit>
				delay(100);
 80009c4:	2064      	movs	r0, #100	; 0x64
 80009c6:	f7ff fe35 	bl	8000634 <delay>
			while (isSendable) {
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <main+0xac>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1ed      	bne.n	80009ae <main+0x52>
			}
			delay(10);
 80009d2:	200a      	movs	r0, #10
 80009d4:	f7ff fe2e 	bl	8000634 <delay>
		while (!isQuit) {
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <main+0xb0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f4      	beq.n	80009ca <main+0x6e>
		}
		HAL_UART_Init(&huart3);
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <main+0xa8>)
 80009e2:	f002 f875 	bl	8002ad0 <HAL_UART_Init>
		printOut("QUIT\r\n");
 80009e6:	480a      	ldr	r0, [pc, #40]	; (8000a10 <main+0xb4>)
 80009e8:	f7ff fe30 	bl	800064c <printOut>
		while (1) {
 80009ec:	e7fe      	b.n	80009ec <main+0x90>
 80009ee:	bf00      	nop
 80009f0:	08004eec 	.word	0x08004eec
 80009f4:	20000120 	.word	0x20000120
 80009f8:	200001a0 	.word	0x200001a0
 80009fc:	20000128 	.word	0x20000128
 8000a00:	20000080 	.word	0x20000080
 8000a04:	20000228 	.word	0x20000228
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	20000198 	.word	0x20000198
 8000a10:	08004ee4 	.word	0x08004ee4

08000a14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2234      	movs	r2, #52	; 0x34
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fd96 	bl	8004554 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <SystemClock_Config+0xb0>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <SystemClock_Config+0xb0>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <SystemClock_Config+0xb0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <SystemClock_Config+0xb4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <SystemClock_Config+0xb4>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <SystemClock_Config+0xb4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 ff69 	bl	8001958 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x7c>
		Error_Handler();
 8000a8c:	f000 f81e 	bl	8000acc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a90:	230f      	movs	r3, #15
 8000a92:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fa02 	bl	8001eb4 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xa6>
		Error_Handler();
 8000ab6:	f000 f809 	bl	8000acc <Error_Handler>
	}
}
 8000aba:	bf00      	nop
 8000abc:	3750      	adds	r7, #80	; 0x50
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 fa22 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <USART2_IRQHandler+0x10>)
 8000b7a:	f002 fa1d 	bl	8002fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200001a0 	.word	0x200001a0

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f003 fce8 	bl	800458c <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20080000 	.word	0x20080000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	2000019c 	.word	0x2000019c
 8000bf0:	20000400 	.word	0x20000400

08000bf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <MX_USART2_UART_Init+0x5c>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c5c:	f001 ff38 	bl	8002ad0 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c66:	f7ff ff31 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200001a0 	.word	0x200001a0
 8000c74:	40004400 	.word	0x40004400

08000c78 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_USART3_UART_Init+0x5c>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000cbc:	f001 ff08 	bl	8002ad0 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f7ff ff01 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000228 	.word	0x20000228
 8000cd4:	40004800 	.word	0x40004800

08000cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0b0      	sub	sp, #192	; 0xc0
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	2290      	movs	r2, #144	; 0x90
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fc2b 	bl	8004554 <memset>
  if(uartHandle->Instance==USART2)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a57      	ldr	r2, [pc, #348]	; (8000e60 <HAL_UART_MspInit+0x188>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d164      	bne.n	8000dd2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fab3 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d20:	f7ff fed4 	bl	8000acc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d24:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a4e      	ldr	r2, [pc, #312]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d30:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a48      	ldr	r2, [pc, #288]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a42      	ldr	r2, [pc, #264]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4835      	ldr	r0, [pc, #212]	; (8000e68 <HAL_UART_MspInit+0x190>)
 8000d92:	f000 fb29 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d96:	2320      	movs	r3, #32
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000db8:	4619      	mov	r1, r3
 8000dba:	482c      	ldr	r0, [pc, #176]	; (8000e6c <HAL_UART_MspInit+0x194>)
 8000dbc:	f000 fb14 	bl	80013e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2026      	movs	r0, #38	; 0x26
 8000dc6:	f000 fa38 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dca:	2026      	movs	r0, #38	; 0x26
 8000dcc:	f000 fa51 	bl	8001272 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dd0:	e041      	b.n	8000e56 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART3)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a26      	ldr	r2, [pc, #152]	; (8000e70 <HAL_UART_MspInit+0x198>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d13c      	bne.n	8000e56 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fa48 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_UART_MspInit+0x122>
      Error_Handler();
 8000df6:	f7ff fe69 	bl	8000acc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0x18c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <HAL_UART_MspInit+0x194>)
 8000e52:	f000 fac9 	bl	80013e8 <HAL_GPIO_Init>
}
 8000e56:	bf00      	nop
 8000e58:	37c0      	adds	r7, #192	; 0xc0
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004400 	.word	0x40004400
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40004800 	.word	0x40004800

08000e74 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_UART_MspDeInit+0x60>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d111      	bne.n	8000eaa <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_UART_MspDeInit+0x64>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_UART_MspDeInit+0x64>)
 8000e8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8000e92:	2108      	movs	r1, #8
 8000e94:	4811      	ldr	r0, [pc, #68]	; (8000edc <HAL_UART_MspDeInit+0x68>)
 8000e96:	f000 fc53 	bl	8001740 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5);
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <HAL_UART_MspDeInit+0x6c>)
 8000e9e:	f000 fc4f 	bl	8001740 <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000ea2:	2026      	movs	r0, #38	; 0x26
 8000ea4:	f000 f9f3 	bl	800128e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8000ea8:	e00f      	b.n	8000eca <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_UART_MspDeInit+0x70>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d10a      	bne.n	8000eca <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_UART_MspDeInit+0x64>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_UART_MspDeInit+0x64>)
 8000eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 8000ec0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_UART_MspDeInit+0x6c>)
 8000ec6:	f000 fc3b 	bl	8001740 <HAL_GPIO_DeInit>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40004800 	.word	0x40004800

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff fe6f 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f003 fb3f 	bl	8004598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fd1f 	bl	800095c <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f2c:	08004f6c 	.word	0x08004f6c
  ldr r2, =_sbss
 8000f30:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f34:	200003fc 	.word	0x200003fc

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>

08000f3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f970 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f44:	200f      	movs	r0, #15
 8000f46:	f000 f805 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fdc5 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f999 	bl	80012aa <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f953 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	2000000c 	.word	0x2000000c

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	200002b0 	.word	0x200002b0

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200002b0 	.word	0x200002b0

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000010 	.word	0x20000010

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	4313      	orrs	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	05fa0000 	.word	0x05fa0000

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db12      	blt.n	8001114 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	490a      	ldr	r1, [pc, #40]	; (8001120 <__NVIC_DisableIRQ+0x44>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	3320      	adds	r3, #32
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001108:	f3bf 8f4f 	dsb	sy
}
 800110c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800110e:	f3bf 8f6f 	isb	sy
}
 8001112:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff05 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff1a 	bl	8001084 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff0d 	bl	80010a0 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff1d 	bl	80010dc <__NVIC_DisableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff94 	bl	80011e0 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fe84 	bl	8000fdc <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d008      	beq.n	80012f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e052      	b.n	800139a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0216 	bic.w	r2, r2, #22
 8001302:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001312:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	2b00      	cmp	r3, #0
 800131a:	d103      	bne.n	8001324 <HAL_DMA_Abort+0x62>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001320:	2b00      	cmp	r3, #0
 8001322:	d007      	beq.n	8001334 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0208 	bic.w	r2, r2, #8
 8001332:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001344:	e013      	b.n	800136e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001346:	f7ff fe49 	bl	8000fdc <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b05      	cmp	r3, #5
 8001352:	d90c      	bls.n	800136e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2220      	movs	r2, #32
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2203      	movs	r2, #3
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e015      	b.n	800139a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e4      	bne.n	8001346 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	223f      	movs	r2, #63	; 0x3f
 8001382:	409a      	lsls	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d004      	beq.n	80013c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e00c      	b.n	80013da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2205      	movs	r2, #5
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	e175      	b.n	80016f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8164 	bne.w	80016ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d005      	beq.n	800143e <HAL_GPIO_Init+0x56>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d130      	bne.n	80014a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 0201 	and.w	r2, r3, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d017      	beq.n	80014dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80be 	beq.w	80016ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b66      	ldr	r3, [pc, #408]	; (800170c <HAL_GPIO_Init+0x324>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a65      	ldr	r2, [pc, #404]	; (800170c <HAL_GPIO_Init+0x324>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_GPIO_Init+0x324>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800158a:	4a61      	ldr	r2, [pc, #388]	; (8001710 <HAL_GPIO_Init+0x328>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_GPIO_Init+0x32c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d037      	beq.n	8001626 <HAL_GPIO_Init+0x23e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a57      	ldr	r2, [pc, #348]	; (8001718 <HAL_GPIO_Init+0x330>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d031      	beq.n	8001622 <HAL_GPIO_Init+0x23a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x334>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d02b      	beq.n	800161e <HAL_GPIO_Init+0x236>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a55      	ldr	r2, [pc, #340]	; (8001720 <HAL_GPIO_Init+0x338>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d025      	beq.n	800161a <HAL_GPIO_Init+0x232>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a54      	ldr	r2, [pc, #336]	; (8001724 <HAL_GPIO_Init+0x33c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01f      	beq.n	8001616 <HAL_GPIO_Init+0x22e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a53      	ldr	r2, [pc, #332]	; (8001728 <HAL_GPIO_Init+0x340>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x22a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_GPIO_Init+0x344>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x226>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_GPIO_Init+0x348>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x222>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a50      	ldr	r2, [pc, #320]	; (8001734 <HAL_GPIO_Init+0x34c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x21e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_GPIO_Init+0x350>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x21a>
 80015fe:	2309      	movs	r3, #9
 8001600:	e012      	b.n	8001628 <HAL_GPIO_Init+0x240>
 8001602:	230a      	movs	r3, #10
 8001604:	e010      	b.n	8001628 <HAL_GPIO_Init+0x240>
 8001606:	2308      	movs	r3, #8
 8001608:	e00e      	b.n	8001628 <HAL_GPIO_Init+0x240>
 800160a:	2307      	movs	r3, #7
 800160c:	e00c      	b.n	8001628 <HAL_GPIO_Init+0x240>
 800160e:	2306      	movs	r3, #6
 8001610:	e00a      	b.n	8001628 <HAL_GPIO_Init+0x240>
 8001612:	2305      	movs	r3, #5
 8001614:	e008      	b.n	8001628 <HAL_GPIO_Init+0x240>
 8001616:	2304      	movs	r3, #4
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x240>
 800161a:	2303      	movs	r3, #3
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x240>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x240>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x240>
 8001626:	2300      	movs	r3, #0
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <HAL_GPIO_Init+0x328>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_GPIO_Init+0x354>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166a:	4a34      	ldr	r2, [pc, #208]	; (800173c <HAL_GPIO_Init+0x354>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_GPIO_Init+0x354>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001694:	4a29      	ldr	r2, [pc, #164]	; (800173c <HAL_GPIO_Init+0x354>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <HAL_GPIO_Init+0x354>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_GPIO_Init+0x354>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_GPIO_Init+0x354>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_GPIO_Init+0x354>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	f67f ae86 	bls.w	8001408 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800
 8001730:	40021c00 	.word	0x40021c00
 8001734:	40022000 	.word	0x40022000
 8001738:	40022400 	.word	0x40022400
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e0d9      	b.n	8001910 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800175c:	2201      	movs	r2, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	429a      	cmp	r2, r3
 8001774:	f040 80c9 	bne.w	800190a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8001778:	4a6b      	ldr	r2, [pc, #428]	; (8001928 <HAL_GPIO_DeInit+0x1e8>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4013      	ands	r3, r2
 8001798:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <HAL_GPIO_DeInit+0x1ec>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d037      	beq.n	8001812 <HAL_GPIO_DeInit+0xd2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a62      	ldr	r2, [pc, #392]	; (8001930 <HAL_GPIO_DeInit+0x1f0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d031      	beq.n	800180e <HAL_GPIO_DeInit+0xce>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a61      	ldr	r2, [pc, #388]	; (8001934 <HAL_GPIO_DeInit+0x1f4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d02b      	beq.n	800180a <HAL_GPIO_DeInit+0xca>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a60      	ldr	r2, [pc, #384]	; (8001938 <HAL_GPIO_DeInit+0x1f8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d025      	beq.n	8001806 <HAL_GPIO_DeInit+0xc6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a5f      	ldr	r2, [pc, #380]	; (800193c <HAL_GPIO_DeInit+0x1fc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01f      	beq.n	8001802 <HAL_GPIO_DeInit+0xc2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a5e      	ldr	r2, [pc, #376]	; (8001940 <HAL_GPIO_DeInit+0x200>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_DeInit+0xbe>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a5d      	ldr	r2, [pc, #372]	; (8001944 <HAL_GPIO_DeInit+0x204>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_DeInit+0xba>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a5c      	ldr	r2, [pc, #368]	; (8001948 <HAL_GPIO_DeInit+0x208>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_DeInit+0xb6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a5b      	ldr	r2, [pc, #364]	; (800194c <HAL_GPIO_DeInit+0x20c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_DeInit+0xb2>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a5a      	ldr	r2, [pc, #360]	; (8001950 <HAL_GPIO_DeInit+0x210>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_DeInit+0xae>
 80017ea:	2309      	movs	r3, #9
 80017ec:	e012      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 80017ee:	230a      	movs	r3, #10
 80017f0:	e010      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 80017f2:	2308      	movs	r3, #8
 80017f4:	e00e      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 80017f6:	2307      	movs	r3, #7
 80017f8:	e00c      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 80017fa:	2306      	movs	r3, #6
 80017fc:	e00a      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 80017fe:	2305      	movs	r3, #5
 8001800:	e008      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 8001802:	2304      	movs	r3, #4
 8001804:	e006      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_DeInit+0xd4>
 8001812:	2300      	movs	r3, #0
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	429a      	cmp	r2, r3
 8001822:	d132      	bne.n	800188a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	4949      	ldr	r1, [pc, #292]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 800182e:	4013      	ands	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001832:	4b48      	ldr	r3, [pc, #288]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	4946      	ldr	r1, [pc, #280]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 800183c:	4013      	ands	r3, r2
 800183e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	4942      	ldr	r1, [pc, #264]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 800184a:	4013      	ands	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	493f      	ldr	r1, [pc, #252]	; (8001954 <HAL_GPIO_DeInit+0x214>)
 8001858:	4013      	ands	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800186c:	4a2e      	ldr	r2, [pc, #184]	; (8001928 <HAL_GPIO_DeInit+0x1e8>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	43da      	mvns	r2, r3
 800187c:	482a      	ldr	r0, [pc, #168]	; (8001928 <HAL_GPIO_DeInit+0x1e8>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	400a      	ands	r2, r1
 8001884:	3302      	adds	r3, #2
 8001886:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2103      	movs	r1, #3
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	08d2      	lsrs	r2, r2, #3
 80018c0:	4019      	ands	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2103      	movs	r1, #3
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	2101      	movs	r1, #1
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2103      	movs	r1, #3
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	f67f af22 	bls.w	800175c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40021400 	.word	0x40021400
 8001944:	40021800 	.word	0x40021800
 8001948:	40021c00 	.word	0x40021c00
 800194c:	40022000 	.word	0x40022000
 8001950:	40022400 	.word	0x40022400
 8001954:	40013c00 	.word	0x40013c00

08001958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e29b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8087 	beq.w	8001a8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800197c:	4b96      	ldr	r3, [pc, #600]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b04      	cmp	r3, #4
 8001986:	d00c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d112      	bne.n	80019ba <HAL_RCC_OscConfig+0x62>
 8001994:	4b90      	ldr	r3, [pc, #576]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a0:	d10b      	bne.n	80019ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4b8d      	ldr	r3, [pc, #564]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d06c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x130>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d168      	bne.n	8001a88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e275      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x7a>
 80019c4:	4b84      	ldr	r3, [pc, #528]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a83      	ldr	r2, [pc, #524]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e02e      	b.n	8001a30 <HAL_RCC_OscConfig+0xd8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x9c>
 80019da:	4b7f      	ldr	r3, [pc, #508]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7e      	ldr	r2, [pc, #504]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7b      	ldr	r2, [pc, #492]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xd8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0xc0>
 80019fe:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a75      	ldr	r2, [pc, #468]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a72      	ldr	r2, [pc, #456]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xd8>
 8001a18:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6e      	ldr	r2, [pc, #440]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6b      	ldr	r2, [pc, #428]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fad0 	bl	8000fdc <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff facc 	bl	8000fdc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e229      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe8>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fabc 	bl	8000fdc <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fab8 	bl	8000fdc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e215      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x110>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d069      	beq.n	8001b6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a96:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x190>
 8001aae:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x17a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1e9      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	493d      	ldr	r1, [pc, #244]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e040      	b.n	8001b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d023      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fa6e 	bl	8000fdc <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff fa6a 	bl	8000fdc <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1c7      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4929      	ldr	r1, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
 8001b36:	e018      	b.n	8001b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fa4a 	bl	8000fdc <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fa46 	bl	8000fdc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1a3      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d038      	beq.n	8001be8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d019      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa27 	bl	8000fdc <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff fa23 	bl	8000fdc <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e180      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x23a>
 8001bb0:	e01a      	b.n	8001be8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fa0d 	bl	8000fdc <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fa09 	bl	8000fdc <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d903      	bls.n	8001bdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e166      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
 8001bd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a4 	beq.w	8001d3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a88      	ldr	r2, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_OscConfig+0x4d4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c2a:	4b80      	ldr	r3, [pc, #512]	; (8001e2c <HAL_RCC_OscConfig+0x4d4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7f      	ldr	r2, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x4d4>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f9d1 	bl	8000fdc <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff f9cd 	bl	8000fdc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b64      	cmp	r3, #100	; 0x64
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e12a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	4b76      	ldr	r3, [pc, #472]	; (8001e2c <HAL_RCC_OscConfig+0x4d4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x31a>
 8001c64:	4b70      	ldr	r3, [pc, #448]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a6f      	ldr	r2, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	e02d      	b.n	8001cce <HAL_RCC_OscConfig+0x376>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x33c>
 8001c7a:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	e01c      	b.n	8001cce <HAL_RCC_OscConfig+0x376>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x35e>
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a61      	ldr	r2, [pc, #388]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a5e      	ldr	r2, [pc, #376]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb4:	e00b      	b.n	8001cce <HAL_RCC_OscConfig+0x376>
 8001cb6:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a5b      	ldr	r2, [pc, #364]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7ff f981 	bl	8000fdc <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff f97d 	bl	8000fdc <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0d8      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ee      	beq.n	8001cde <HAL_RCC_OscConfig+0x386>
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f96b 	bl	8000fdc <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff f967 	bl	8000fdc <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0c2      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a3c      	ldr	r2, [pc, #240]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80ae 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d06d      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d14b      	bne.n	8001df4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f938 	bl	8000fdc <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f934 	bl	8000fdc <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e091      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	019b      	lsls	r3, r3, #6
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	071b      	lsls	r3, r3, #28
 8001dba:	491b      	ldr	r1, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f906 	bl	8000fdc <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f902 	bl	8000fdc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e05f      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
 8001df2:	e057      	b.n	8001ea4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8ec 	bl	8000fdc <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f8e8 	bl	8000fdc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e045      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_OscConfig+0x4d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4b0>
 8001e26:	e03d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x54c>
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_RCC_OscConfig+0x558>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d129      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d122      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e60:	4013      	ands	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d119      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	085b      	lsrs	r3, r3, #1
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d0      	b.n	800206e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d910      	bls.n	8001efc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 020f 	bic.w	r2, r3, #15
 8001ee2:	4965      	ldr	r1, [pc, #404]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b8      	b.n	800206e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f14:	4b59      	ldr	r3, [pc, #356]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f2c:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a52      	ldr	r2, [pc, #328]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	494d      	ldr	r1, [pc, #308]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d040      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e07f      	b.n	800206e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e073      	b.n	800206e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06b      	b.n	800206e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4936      	ldr	r1, [pc, #216]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f818 	bl	8000fdc <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff f814 	bl	8000fdc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e053      	b.n	800206e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d210      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 020f 	bic.w	r2, r3, #15
 8001fee:	4922      	ldr	r1, [pc, #136]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e032      	b.n	800206e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4916      	ldr	r1, [pc, #88]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002046:	f000 f821 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800204a:	4602      	mov	r2, r0
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	490a      	ldr	r1, [pc, #40]	; (8002080 <HAL_RCC_ClockConfig+0x1cc>)
 8002058:	5ccb      	ldrb	r3, [r1, r3]
 800205a:	fa22 f303 	lsr.w	r3, r2, r3
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <HAL_RCC_ClockConfig+0x1d0>)
 8002060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1d4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe ff74 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023c00 	.word	0x40023c00
 800207c:	40023800 	.word	0x40023800
 8002080:	08004f10 	.word	0x08004f10
 8002084:	20000008 	.word	0x20000008
 8002088:	2000000c 	.word	0x2000000c

0800208c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002090:	b090      	sub	sp, #64	; 0x40
 8002092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
 8002098:	2300      	movs	r3, #0
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209c:	2300      	movs	r3, #0
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a4:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_GetSysClockFreq+0x180>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d00d      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x40>
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	f200 80a1 	bhi.w	80021f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x34>
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020be:	e09b      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c0:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_GetSysClockFreq+0x184>)
 80020c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020c4:	e09b      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020ca:	e098      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020cc:	4b4f      	ldr	r3, [pc, #316]	; (800220c <HAL_RCC_GetSysClockFreq+0x180>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020d6:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_RCC_GetSysClockFreq+0x180>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d028      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e2:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_RCC_GetSysClockFreq+0x180>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	099b      	lsrs	r3, r3, #6
 80020e8:	2200      	movs	r2, #0
 80020ea:	623b      	str	r3, [r7, #32]
 80020ec:	627a      	str	r2, [r7, #36]	; 0x24
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020f4:	2100      	movs	r1, #0
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f8:	fb03 f201 	mul.w	r2, r3, r1
 80020fc:	2300      	movs	r3, #0
 80020fe:	fb00 f303 	mul.w	r3, r0, r3
 8002102:	4413      	add	r3, r2
 8002104:	4a43      	ldr	r2, [pc, #268]	; (8002214 <HAL_RCC_GetSysClockFreq+0x188>)
 8002106:	fba0 1202 	umull	r1, r2, r0, r2
 800210a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800210c:	460a      	mov	r2, r1
 800210e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002112:	4413      	add	r3, r2
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002118:	2200      	movs	r2, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	61fa      	str	r2, [r7, #28]
 800211e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002122:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002126:	f7fe f8e3 	bl	80002f0 <__aeabi_uldivmod>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4613      	mov	r3, r2
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002132:	e053      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCC_GetSysClockFreq+0x180>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	2200      	movs	r2, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	617a      	str	r2, [r7, #20]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002146:	f04f 0b00 	mov.w	fp, #0
 800214a:	4652      	mov	r2, sl
 800214c:	465b      	mov	r3, fp
 800214e:	f04f 0000 	mov.w	r0, #0
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	0159      	lsls	r1, r3, #5
 8002158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800215c:	0150      	lsls	r0, r2, #5
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	ebb2 080a 	subs.w	r8, r2, sl
 8002166:	eb63 090b 	sbc.w	r9, r3, fp
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002176:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800217a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800217e:	ebb2 0408 	subs.w	r4, r2, r8
 8002182:	eb63 0509 	sbc.w	r5, r3, r9
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	00eb      	lsls	r3, r5, #3
 8002190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002194:	00e2      	lsls	r2, r4, #3
 8002196:	4614      	mov	r4, r2
 8002198:	461d      	mov	r5, r3
 800219a:	eb14 030a 	adds.w	r3, r4, sl
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	eb45 030b 	adc.w	r3, r5, fp
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021b2:	4629      	mov	r1, r5
 80021b4:	028b      	lsls	r3, r1, #10
 80021b6:	4621      	mov	r1, r4
 80021b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021bc:	4621      	mov	r1, r4
 80021be:	028a      	lsls	r2, r1, #10
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	2200      	movs	r2, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	60fa      	str	r2, [r7, #12]
 80021cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021d0:	f7fe f88e 	bl	80002f0 <__aeabi_uldivmod>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4613      	mov	r3, r2
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_GetSysClockFreq+0x180>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80021ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021f6:	e002      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_GetSysClockFreq+0x184>)
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002200:	4618      	mov	r0, r3
 8002202:	3740      	adds	r7, #64	; 0x40
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	00f42400 	.word	0x00f42400
 8002214:	017d7840 	.word	0x017d7840

08002218 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	08004f20 	.word	0x08004f20

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800225c:	f7ff ffdc 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0b5b      	lsrs	r3, r3, #13
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	; (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08004f20 	.word	0x08004f20

08002280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d012      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022a8:	4b69      	ldr	r3, [pc, #420]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a68      	ldr	r2, [pc, #416]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	4964      	ldr	r1, [pc, #400]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d017      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	4959      	ldr	r1, [pc, #356]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022f8:	d101      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d017      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002316:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800231c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	494a      	ldr	r1, [pc, #296]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002334:	d101      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 808b 	beq.w	800247a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a39      	ldr	r2, [pc, #228]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a34      	ldr	r2, [pc, #208]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7fe fe28 	bl	8000fdc <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe fe24 	bl	8000fdc <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e38f      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d035      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d02e      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a1a      	ldr	r2, [pc, #104]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d114      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fdec 	bl	8000fdc <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe fde8 	bl	8000fdc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e351      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ee      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002436:	d111      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002446:	400b      	ands	r3, r1
 8002448:	4901      	ldr	r1, [pc, #4]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
 800244e:	e00b      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002450:	40023800 	.word	0x40023800
 8002454:	40007000 	.word	0x40007000
 8002458:	0ffffcff 	.word	0x0ffffcff
 800245c:	4bac      	ldr	r3, [pc, #688]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4aab      	ldr	r2, [pc, #684]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002462:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002466:	6093      	str	r3, [r2, #8]
 8002468:	4ba9      	ldr	r3, [pc, #676]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002474:	49a6      	ldr	r1, [pc, #664]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002476:	4313      	orrs	r3, r2
 8002478:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002486:	4ba2      	ldr	r3, [pc, #648]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800248c:	4aa0      	ldr	r2, [pc, #640]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002496:	4b9e      	ldr	r3, [pc, #632]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002498:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	499b      	ldr	r1, [pc, #620]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b4:	4b96      	ldr	r3, [pc, #600]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c2:	4993      	ldr	r1, [pc, #588]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d6:	4b8e      	ldr	r3, [pc, #568]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e4:	498a      	ldr	r1, [pc, #552]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f8:	4b85      	ldr	r3, [pc, #532]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002506:	4982      	ldr	r1, [pc, #520]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800251a:	4b7d      	ldr	r3, [pc, #500]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4979      	ldr	r1, [pc, #484]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253c:	4b74      	ldr	r3, [pc, #464]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4971      	ldr	r1, [pc, #452]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800255e:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f023 020c 	bic.w	r2, r3, #12
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	4968      	ldr	r1, [pc, #416]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002580:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	4960      	ldr	r1, [pc, #384]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a2:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	4957      	ldr	r1, [pc, #348]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c4:	4b52      	ldr	r3, [pc, #328]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	494f      	ldr	r1, [pc, #316]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4946      	ldr	r1, [pc, #280]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002608:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	493e      	ldr	r1, [pc, #248]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002638:	4935      	ldr	r1, [pc, #212]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265a:	492d      	ldr	r1, [pc, #180]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d011      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800267c:	4924      	ldr	r1, [pc, #144]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	4914      	ldr	r1, [pc, #80]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e0:	490b      	ldr	r1, [pc, #44]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00f      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002704:	4902      	ldr	r1, [pc, #8]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800270c:	e002      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002720:	4b8a      	ldr	r3, [pc, #552]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	4986      	ldr	r1, [pc, #536]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002744:	4b81      	ldr	r3, [pc, #516]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800274a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002754:	497d      	ldr	r1, [pc, #500]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d006      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80d6 	beq.w	800291c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002770:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a75      	ldr	r2, [pc, #468]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800277a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe fc2e 	bl	8000fdc <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002784:	f7fe fc2a 	bl	8000fdc <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e195      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002796:	4b6d      	ldr	r3, [pc, #436]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d021      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11d      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027c4:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ca:	0e1b      	lsrs	r3, r3, #24
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	019a      	lsls	r2, r3, #6
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	071b      	lsls	r3, r3, #28
 80027ea:	4958      	ldr	r1, [pc, #352]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002810:	2b00      	cmp	r3, #0
 8002812:	d02e      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281c:	d129      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800281e:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800282c:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002832:	0f1b      	lsrs	r3, r3, #28
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	019a      	lsls	r2, r3, #6
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	071b      	lsls	r3, r3, #28
 8002852:	493e      	ldr	r1, [pc, #248]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800285a:	4b3c      	ldr	r3, [pc, #240]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002860:	f023 021f 	bic.w	r2, r3, #31
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	3b01      	subs	r3, #1
 800286a:	4938      	ldr	r1, [pc, #224]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01d      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800287e:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002884:	0e1b      	lsrs	r3, r3, #24
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002892:	0f1b      	lsrs	r3, r3, #28
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	019a      	lsls	r2, r3, #6
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	071b      	lsls	r3, r3, #28
 80028b2:	4926      	ldr	r1, [pc, #152]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d011      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	019a      	lsls	r2, r3, #6
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	071b      	lsls	r3, r3, #28
 80028e2:	491a      	ldr	r1, [pc, #104]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f6:	f7fe fb71 	bl	8000fdc <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028fe:	f7fe fb6d 	bl	8000fdc <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e0d8      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	f040 80ce 	bne.w	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fe fb54 	bl	8000fdc <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002936:	e00b      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002938:	f7fe fb50 	bl	8000fdc <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d904      	bls.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0bb      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002950:	4b5e      	ldr	r3, [pc, #376]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295c:	d0ec      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800297a:	2b00      	cmp	r3, #0
 800297c:	d02e      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d12a      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002986:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002994:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	0f1b      	lsrs	r3, r3, #28
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	019a      	lsls	r2, r3, #6
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	071b      	lsls	r3, r3, #28
 80029ba:	4944      	ldr	r1, [pc, #272]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029c2:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	493d      	ldr	r1, [pc, #244]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d022      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f0:	d11d      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029f2:	4b36      	ldr	r3, [pc, #216]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	0e1b      	lsrs	r3, r3, #24
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a00:	4b32      	ldr	r3, [pc, #200]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	0f1b      	lsrs	r3, r3, #28
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	019a      	lsls	r2, r3, #6
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	071b      	lsls	r3, r3, #28
 8002a26:	4929      	ldr	r1, [pc, #164]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d028      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	0e1b      	lsrs	r3, r3, #24
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	019a      	lsls	r2, r3, #6
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	061b      	lsls	r3, r3, #24
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	071b      	lsls	r3, r3, #28
 8002a6e:	4917      	ldr	r1, [pc, #92]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	4911      	ldr	r1, [pc, #68]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe faa0 	bl	8000fdc <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aa0:	f7fe fa9c 	bl	8000fdc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e007      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abe:	d1ef      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e040      	b.n	8002b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f8f0 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fd5a 	bl	80035c8 <UART_SetConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 ffb2 	bl	8003a90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f001 f839 	bl	8003bd4 <UART_CheckIdleState>
 8002b62:	4603      	mov	r3, r0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e02f      	b.n	8002bde <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2224      	movs	r2, #36	; 0x24
 8002b82:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fe f961 	bl	8000e74 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b08a      	sub	sp, #40	; 0x28
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d171      	bne.n	8002ce2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_UART_Transmit+0x24>
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06a      	b.n	8002ce4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2221      	movs	r2, #33	; 0x21
 8002c1a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe f9de 	bl	8000fdc <HAL_GetTick>
 8002c20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3a:	d108      	bne.n	8002c4e <HAL_UART_Transmit+0x68>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e003      	b.n	8002c56 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c56:	e02c      	b.n	8002cb2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f001 f803 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e038      	b.n	8002ce4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e007      	b.n	8002ca0 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1cc      	bne.n	8002c58 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2140      	movs	r1, #64	; 0x40
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 ffd0 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e005      	b.n	8002ce4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	f040 80b1 	bne.w	8002e6a <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_Receive+0x28>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0a9      	b.n	8002e6c <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2222      	movs	r2, #34	; 0x22
 8002d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe f955 	bl	8000fdc <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d10e      	bne.n	8002d6c <HAL_UART_Receive+0x80>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_UART_Receive+0x76>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d60:	e02d      	b.n	8002dbe <HAL_UART_Receive+0xd2>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d6a:	e028      	b.n	8002dbe <HAL_UART_Receive+0xd2>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10d      	bne.n	8002d90 <HAL_UART_Receive+0xa4>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <HAL_UART_Receive+0x9a>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d84:	e01b      	b.n	8002dbe <HAL_UART_Receive+0xd2>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	227f      	movs	r2, #127	; 0x7f
 8002d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d8e:	e016      	b.n	8002dbe <HAL_UART_Receive+0xd2>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d98:	d10d      	bne.n	8002db6 <HAL_UART_Receive+0xca>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_UART_Receive+0xc0>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	227f      	movs	r2, #127	; 0x7f
 8002da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002daa:	e008      	b.n	8002dbe <HAL_UART_Receive+0xd2>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	223f      	movs	r2, #63	; 0x3f
 8002db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002db4:	e003      	b.n	8002dbe <HAL_UART_Receive+0xd2>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002dc4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dce:	d108      	bne.n	8002de2 <HAL_UART_Receive+0xf6>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	e003      	b.n	8002dea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dea:	e032      	b.n	8002e52 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2120      	movs	r1, #32
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 ff39 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e032      	b.n	8002e6c <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10c      	bne.n	8002e26 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	8a7b      	ldrh	r3, [r7, #18]
 8002e16:	4013      	ands	r3, r2
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3302      	adds	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e00c      	b.n	8002e40 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	8a7b      	ldrh	r3, [r7, #18]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4013      	ands	r3, r2
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1c6      	bne.n	8002dec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b08b      	sub	sp, #44	; 0x2c
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d147      	bne.n	8002f1a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_UART_Transmit_IT+0x22>
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e040      	b.n	8002f1c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2221      	movs	r2, #33	; 0x21
 8002ec2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	d107      	bne.n	8002ede <HAL_UART_Transmit_IT+0x6a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_UART_Transmit_IT+0xb4>)
 8002eda:	66da      	str	r2, [r3, #108]	; 0x6c
 8002edc:	e002      	b.n	8002ee4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_UART_Transmit_IT+0xb8>)
 8002ee2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	69f9      	ldr	r1, [r7, #28]
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e6      	bne.n	8002ee4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	372c      	adds	r7, #44	; 0x2c
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	08004133 	.word	0x08004133
 8002f2c:	0800407d 	.word	0x0800407d

08002f30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d132      	bne.n	8002fae <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_UART_Receive_IT+0x24>
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e02b      	b.n	8002fb0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d018      	beq.n	8002f9e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	69f9      	ldr	r1, [r7, #28]
 8002f90:	6a3a      	ldr	r2, [r7, #32]
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e6      	bne.n	8002f6c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 ff29 	bl	8003dfc <UART_Start_Receive_IT>
 8002faa:	4603      	mov	r3, r0
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b0ba      	sub	sp, #232	; 0xe8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fe2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d115      	bne.n	8003020 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00f      	beq.n	8003020 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 82ac 	beq.w	800356e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
      }
      return;
 800301e:	e2a6      	b.n	800356e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8117 	beq.w	8003258 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800302a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003036:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800303a:	4b85      	ldr	r3, [pc, #532]	; (8003250 <HAL_UART_IRQHandler+0x298>)
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 810a 	beq.w	8003258 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d011      	beq.n	8003074 <HAL_UART_IRQHandler+0xbc>
 8003050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d011      	beq.n	80030a4 <HAL_UART_IRQHandler+0xec>
 8003080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2202      	movs	r2, #2
 8003092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d011      	beq.n	80030d4 <HAL_UART_IRQHandler+0x11c>
 80030b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2204      	movs	r2, #4
 80030c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2208      	movs	r2, #8
 80030fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003106:	f043 0208 	orr.w	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003118:	2b00      	cmp	r3, #0
 800311a:	d012      	beq.n	8003142 <HAL_UART_IRQHandler+0x18a>
 800311c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00c      	beq.n	8003142 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8212 	beq.w	8003572 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800315a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800318e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003192:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d04f      	beq.n	800323a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fef4 	bl	8003f88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d141      	bne.n	8003232 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3308      	adds	r3, #8
 80031b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1d9      	bne.n	80031ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d013      	beq.n	800322a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	4a13      	ldr	r2, [pc, #76]	; (8003254 <HAL_UART_IRQHandler+0x29c>)
 8003208:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe f8c7 	bl	80013a2 <HAL_DMA_Abort_IT>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d017      	beq.n	800324a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003224:	4610      	mov	r0, r2
 8003226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e00f      	b.n	800324a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f9ac 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e00b      	b.n	800324a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9a8 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e007      	b.n	800324a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9a4 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003248:	e193      	b.n	8003572 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324a:	bf00      	nop
    return;
 800324c:	e191      	b.n	8003572 <HAL_UART_IRQHandler+0x5ba>
 800324e:	bf00      	nop
 8003250:	04000120 	.word	0x04000120
 8003254:	08004051 	.word	0x08004051

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 814c 	bne.w	80034fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8145 	beq.w	80034fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 813e 	beq.w	80034fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2210      	movs	r2, #16
 8003284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	f040 80b6 	bne.w	8003402 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8165 	beq.w	8003576 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b6:	429a      	cmp	r2, r3
 80032b8:	f080 815d 	bcs.w	8003576 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d0:	f000 8086 	beq.w	80033e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003302:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800330a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1da      	bne.n	80032d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3308      	adds	r3, #8
 8003324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800332e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3308      	adds	r3, #8
 800333e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800334a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e1      	bne.n	800331e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3308      	adds	r3, #8
 800337a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800337e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800338c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e3      	bne.n	800335a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b0:	f023 0310 	bic.w	r3, r3, #16
 80033b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80033c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e4      	bne.n	80033a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd ff71 	bl	80012c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8ce 	bl	800359c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003400:	e0b9      	b.n	8003576 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800340e:	b29b      	uxth	r3, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80ab 	beq.w	800357a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a6 	beq.w	800357a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	e853 3f00 	ldrex	r3, [r3]
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003450:	647b      	str	r3, [r7, #68]	; 0x44
 8003452:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800345e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e4      	bne.n	800342e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3308      	adds	r3, #8
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	623b      	str	r3, [r7, #32]
   return(result);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003488:	633a      	str	r2, [r7, #48]	; 0x30
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800348e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f023 0310 	bic.w	r3, r3, #16
 80034c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	617b      	str	r3, [r7, #20]
   return(result);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e4      	bne.n	80034b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f852 	bl	800359c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034f8:	e03f      	b.n	800357a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <HAL_UART_IRQHandler+0x56c>
 8003506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800351a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f849 	bl	80035b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003522:	e02d      	b.n	8003580 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
    }
    return;
 800354c:	e017      	b.n	800357e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <HAL_UART_IRQHandler+0x5c8>
 800355a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fe43 	bl	80041f2 <UART_EndTransmit_IT>
    return;
 800356c:	e008      	b.n	8003580 <HAL_UART_IRQHandler+0x5c8>
      return;
 800356e:	bf00      	nop
 8003570:	e006      	b.n	8003580 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <HAL_UART_IRQHandler+0x5c8>
      return;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_UART_IRQHandler+0x5c8>
    return;
 800357e:	bf00      	nop
  }

}
 8003580:	37e8      	adds	r7, #232	; 0xe8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop

08003588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4ba6      	ldr	r3, [pc, #664]	; (800388c <UART_SetConfig+0x2c4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a94      	ldr	r2, [pc, #592]	; (8003890 <UART_SetConfig+0x2c8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d120      	bne.n	8003686 <UART_SetConfig+0xbe>
 8003644:	4b93      	ldr	r3, [pc, #588]	; (8003894 <UART_SetConfig+0x2cc>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b03      	cmp	r3, #3
 8003650:	d816      	bhi.n	8003680 <UART_SetConfig+0xb8>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0x90>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	08003669 	.word	0x08003669
 800365c:	08003675 	.word	0x08003675
 8003660:	0800366f 	.word	0x0800366f
 8003664:	0800367b 	.word	0x0800367b
 8003668:	2301      	movs	r3, #1
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e150      	b.n	8003910 <UART_SetConfig+0x348>
 800366e:	2302      	movs	r3, #2
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e14d      	b.n	8003910 <UART_SetConfig+0x348>
 8003674:	2304      	movs	r3, #4
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e14a      	b.n	8003910 <UART_SetConfig+0x348>
 800367a:	2308      	movs	r3, #8
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e147      	b.n	8003910 <UART_SetConfig+0x348>
 8003680:	2310      	movs	r3, #16
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e144      	b.n	8003910 <UART_SetConfig+0x348>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a83      	ldr	r2, [pc, #524]	; (8003898 <UART_SetConfig+0x2d0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d132      	bne.n	80036f6 <UART_SetConfig+0x12e>
 8003690:	4b80      	ldr	r3, [pc, #512]	; (8003894 <UART_SetConfig+0x2cc>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d828      	bhi.n	80036f0 <UART_SetConfig+0x128>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0xdc>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036d9 	.word	0x080036d9
 80036a8:	080036f1 	.word	0x080036f1
 80036ac:	080036f1 	.word	0x080036f1
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080036e5 	.word	0x080036e5
 80036b8:	080036f1 	.word	0x080036f1
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	080036f1 	.word	0x080036f1
 80036c4:	080036df 	.word	0x080036df
 80036c8:	080036f1 	.word	0x080036f1
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	080036f1 	.word	0x080036f1
 80036d4:	080036eb 	.word	0x080036eb
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e118      	b.n	8003910 <UART_SetConfig+0x348>
 80036de:	2302      	movs	r3, #2
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	e115      	b.n	8003910 <UART_SetConfig+0x348>
 80036e4:	2304      	movs	r3, #4
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	e112      	b.n	8003910 <UART_SetConfig+0x348>
 80036ea:	2308      	movs	r3, #8
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	e10f      	b.n	8003910 <UART_SetConfig+0x348>
 80036f0:	2310      	movs	r3, #16
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e10c      	b.n	8003910 <UART_SetConfig+0x348>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a68      	ldr	r2, [pc, #416]	; (800389c <UART_SetConfig+0x2d4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d120      	bne.n	8003742 <UART_SetConfig+0x17a>
 8003700:	4b64      	ldr	r3, [pc, #400]	; (8003894 <UART_SetConfig+0x2cc>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800370a:	2b30      	cmp	r3, #48	; 0x30
 800370c:	d013      	beq.n	8003736 <UART_SetConfig+0x16e>
 800370e:	2b30      	cmp	r3, #48	; 0x30
 8003710:	d814      	bhi.n	800373c <UART_SetConfig+0x174>
 8003712:	2b20      	cmp	r3, #32
 8003714:	d009      	beq.n	800372a <UART_SetConfig+0x162>
 8003716:	2b20      	cmp	r3, #32
 8003718:	d810      	bhi.n	800373c <UART_SetConfig+0x174>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <UART_SetConfig+0x15c>
 800371e:	2b10      	cmp	r3, #16
 8003720:	d006      	beq.n	8003730 <UART_SetConfig+0x168>
 8003722:	e00b      	b.n	800373c <UART_SetConfig+0x174>
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e0f2      	b.n	8003910 <UART_SetConfig+0x348>
 800372a:	2302      	movs	r3, #2
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e0ef      	b.n	8003910 <UART_SetConfig+0x348>
 8003730:	2304      	movs	r3, #4
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e0ec      	b.n	8003910 <UART_SetConfig+0x348>
 8003736:	2308      	movs	r3, #8
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e0e9      	b.n	8003910 <UART_SetConfig+0x348>
 800373c:	2310      	movs	r3, #16
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e0e6      	b.n	8003910 <UART_SetConfig+0x348>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a56      	ldr	r2, [pc, #344]	; (80038a0 <UART_SetConfig+0x2d8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d120      	bne.n	800378e <UART_SetConfig+0x1c6>
 800374c:	4b51      	ldr	r3, [pc, #324]	; (8003894 <UART_SetConfig+0x2cc>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003756:	2bc0      	cmp	r3, #192	; 0xc0
 8003758:	d013      	beq.n	8003782 <UART_SetConfig+0x1ba>
 800375a:	2bc0      	cmp	r3, #192	; 0xc0
 800375c:	d814      	bhi.n	8003788 <UART_SetConfig+0x1c0>
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d009      	beq.n	8003776 <UART_SetConfig+0x1ae>
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d810      	bhi.n	8003788 <UART_SetConfig+0x1c0>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <UART_SetConfig+0x1a8>
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d006      	beq.n	800377c <UART_SetConfig+0x1b4>
 800376e:	e00b      	b.n	8003788 <UART_SetConfig+0x1c0>
 8003770:	2300      	movs	r3, #0
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e0cc      	b.n	8003910 <UART_SetConfig+0x348>
 8003776:	2302      	movs	r3, #2
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e0c9      	b.n	8003910 <UART_SetConfig+0x348>
 800377c:	2304      	movs	r3, #4
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e0c6      	b.n	8003910 <UART_SetConfig+0x348>
 8003782:	2308      	movs	r3, #8
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e0c3      	b.n	8003910 <UART_SetConfig+0x348>
 8003788:	2310      	movs	r3, #16
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e0c0      	b.n	8003910 <UART_SetConfig+0x348>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a44      	ldr	r2, [pc, #272]	; (80038a4 <UART_SetConfig+0x2dc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d125      	bne.n	80037e4 <UART_SetConfig+0x21c>
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <UART_SetConfig+0x2cc>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037a6:	d017      	beq.n	80037d8 <UART_SetConfig+0x210>
 80037a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ac:	d817      	bhi.n	80037de <UART_SetConfig+0x216>
 80037ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b2:	d00b      	beq.n	80037cc <UART_SetConfig+0x204>
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d811      	bhi.n	80037de <UART_SetConfig+0x216>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <UART_SetConfig+0x1fe>
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d006      	beq.n	80037d2 <UART_SetConfig+0x20a>
 80037c4:	e00b      	b.n	80037de <UART_SetConfig+0x216>
 80037c6:	2300      	movs	r3, #0
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e0a1      	b.n	8003910 <UART_SetConfig+0x348>
 80037cc:	2302      	movs	r3, #2
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e09e      	b.n	8003910 <UART_SetConfig+0x348>
 80037d2:	2304      	movs	r3, #4
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e09b      	b.n	8003910 <UART_SetConfig+0x348>
 80037d8:	2308      	movs	r3, #8
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e098      	b.n	8003910 <UART_SetConfig+0x348>
 80037de:	2310      	movs	r3, #16
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e095      	b.n	8003910 <UART_SetConfig+0x348>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2f      	ldr	r2, [pc, #188]	; (80038a8 <UART_SetConfig+0x2e0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d125      	bne.n	800383a <UART_SetConfig+0x272>
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <UART_SetConfig+0x2cc>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037fc:	d017      	beq.n	800382e <UART_SetConfig+0x266>
 80037fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003802:	d817      	bhi.n	8003834 <UART_SetConfig+0x26c>
 8003804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003808:	d00b      	beq.n	8003822 <UART_SetConfig+0x25a>
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d811      	bhi.n	8003834 <UART_SetConfig+0x26c>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <UART_SetConfig+0x254>
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d006      	beq.n	8003828 <UART_SetConfig+0x260>
 800381a:	e00b      	b.n	8003834 <UART_SetConfig+0x26c>
 800381c:	2301      	movs	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e076      	b.n	8003910 <UART_SetConfig+0x348>
 8003822:	2302      	movs	r3, #2
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e073      	b.n	8003910 <UART_SetConfig+0x348>
 8003828:	2304      	movs	r3, #4
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e070      	b.n	8003910 <UART_SetConfig+0x348>
 800382e:	2308      	movs	r3, #8
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e06d      	b.n	8003910 <UART_SetConfig+0x348>
 8003834:	2310      	movs	r3, #16
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e06a      	b.n	8003910 <UART_SetConfig+0x348>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <UART_SetConfig+0x2e4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d138      	bne.n	80038b6 <UART_SetConfig+0x2ee>
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <UART_SetConfig+0x2cc>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800384e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003852:	d017      	beq.n	8003884 <UART_SetConfig+0x2bc>
 8003854:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003858:	d82a      	bhi.n	80038b0 <UART_SetConfig+0x2e8>
 800385a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385e:	d00b      	beq.n	8003878 <UART_SetConfig+0x2b0>
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d824      	bhi.n	80038b0 <UART_SetConfig+0x2e8>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <UART_SetConfig+0x2aa>
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d006      	beq.n	800387e <UART_SetConfig+0x2b6>
 8003870:	e01e      	b.n	80038b0 <UART_SetConfig+0x2e8>
 8003872:	2300      	movs	r3, #0
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e04b      	b.n	8003910 <UART_SetConfig+0x348>
 8003878:	2302      	movs	r3, #2
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e048      	b.n	8003910 <UART_SetConfig+0x348>
 800387e:	2304      	movs	r3, #4
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e045      	b.n	8003910 <UART_SetConfig+0x348>
 8003884:	2308      	movs	r3, #8
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e042      	b.n	8003910 <UART_SetConfig+0x348>
 800388a:	bf00      	nop
 800388c:	efff69f3 	.word	0xefff69f3
 8003890:	40011000 	.word	0x40011000
 8003894:	40023800 	.word	0x40023800
 8003898:	40004400 	.word	0x40004400
 800389c:	40004800 	.word	0x40004800
 80038a0:	40004c00 	.word	0x40004c00
 80038a4:	40005000 	.word	0x40005000
 80038a8:	40011400 	.word	0x40011400
 80038ac:	40007800 	.word	0x40007800
 80038b0:	2310      	movs	r3, #16
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e02c      	b.n	8003910 <UART_SetConfig+0x348>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a72      	ldr	r2, [pc, #456]	; (8003a84 <UART_SetConfig+0x4bc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d125      	bne.n	800390c <UART_SetConfig+0x344>
 80038c0:	4b71      	ldr	r3, [pc, #452]	; (8003a88 <UART_SetConfig+0x4c0>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ce:	d017      	beq.n	8003900 <UART_SetConfig+0x338>
 80038d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038d4:	d817      	bhi.n	8003906 <UART_SetConfig+0x33e>
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038da:	d00b      	beq.n	80038f4 <UART_SetConfig+0x32c>
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e0:	d811      	bhi.n	8003906 <UART_SetConfig+0x33e>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <UART_SetConfig+0x326>
 80038e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ea:	d006      	beq.n	80038fa <UART_SetConfig+0x332>
 80038ec:	e00b      	b.n	8003906 <UART_SetConfig+0x33e>
 80038ee:	2300      	movs	r3, #0
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e00d      	b.n	8003910 <UART_SetConfig+0x348>
 80038f4:	2302      	movs	r3, #2
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e00a      	b.n	8003910 <UART_SetConfig+0x348>
 80038fa:	2304      	movs	r3, #4
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e007      	b.n	8003910 <UART_SetConfig+0x348>
 8003900:	2308      	movs	r3, #8
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e004      	b.n	8003910 <UART_SetConfig+0x348>
 8003906:	2310      	movs	r3, #16
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e001      	b.n	8003910 <UART_SetConfig+0x348>
 800390c:	2310      	movs	r3, #16
 800390e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	d15b      	bne.n	80039d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800391a:	7ffb      	ldrb	r3, [r7, #31]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d828      	bhi.n	8003972 <UART_SetConfig+0x3aa>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x360>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003955 	.word	0x08003955
 8003930:	0800395d 	.word	0x0800395d
 8003934:	08003973 	.word	0x08003973
 8003938:	08003963 	.word	0x08003963
 800393c:	08003973 	.word	0x08003973
 8003940:	08003973 	.word	0x08003973
 8003944:	08003973 	.word	0x08003973
 8003948:	0800396b 	.word	0x0800396b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800394c:	f7fe fc70 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003950:	61b8      	str	r0, [r7, #24]
        break;
 8003952:	e013      	b.n	800397c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003954:	f7fe fc80 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003958:	61b8      	str	r0, [r7, #24]
        break;
 800395a:	e00f      	b.n	800397c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <UART_SetConfig+0x4c4>)
 800395e:	61bb      	str	r3, [r7, #24]
        break;
 8003960:	e00c      	b.n	800397c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003962:	f7fe fb93 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8003966:	61b8      	str	r0, [r7, #24]
        break;
 8003968:	e008      	b.n	800397c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396e:	61bb      	str	r3, [r7, #24]
        break;
 8003970:	e004      	b.n	800397c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	77bb      	strb	r3, [r7, #30]
        break;
 800397a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d074      	beq.n	8003a6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	005a      	lsls	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	441a      	add	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b0f      	cmp	r3, #15
 800399c:	d916      	bls.n	80039cc <UART_SetConfig+0x404>
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d212      	bcs.n	80039cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f023 030f 	bic.w	r3, r3, #15
 80039ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	89fb      	ldrh	r3, [r7, #14]
 80039be:	4313      	orrs	r3, r2
 80039c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	89fa      	ldrh	r2, [r7, #14]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e04f      	b.n	8003a6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77bb      	strb	r3, [r7, #30]
 80039d0:	e04c      	b.n	8003a6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d828      	bhi.n	8003a2a <UART_SetConfig+0x462>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x418>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe fc14 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003a08:	61b8      	str	r0, [r7, #24]
        break;
 8003a0a:	e013      	b.n	8003a34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7fe fc24 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e00f      	b.n	8003a34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <UART_SetConfig+0x4c4>)
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e00c      	b.n	8003a34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7fe fb37 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8003a1e:	61b8      	str	r0, [r7, #24]
        break;
 8003a20:	e008      	b.n	8003a34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	61bb      	str	r3, [r7, #24]
        break;
 8003a28:	e004      	b.n	8003a34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	77bb      	strb	r3, [r7, #30]
        break;
 8003a32:	bf00      	nop
    }

    if (pclk != 0U)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d018      	beq.n	8003a6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	085a      	lsrs	r2, r3, #1
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b0f      	cmp	r3, #15
 8003a52:	d909      	bls.n	8003a68 <UART_SetConfig+0x4a0>
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d205      	bcs.n	8003a68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e001      	b.n	8003a6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a78:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40007c00 	.word	0x40007c00
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	00f42400 	.word	0x00f42400

08003a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8e:	d10a      	bne.n	8003ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003be4:	f7fd f9fa 	bl	8000fdc <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d10e      	bne.n	8003c16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f831 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e027      	b.n	8003c66 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d10e      	bne.n	8003c42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f81b 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e011      	b.n	8003c66 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b09c      	sub	sp, #112	; 0x70
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7e:	e0a7      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	f000 80a3 	beq.w	8003dd0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fd f9a7 	bl	8000fdc <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13f      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e6      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e068      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d050      	beq.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3c:	d148      	bne.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
 8003d68:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e6      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d9a:	623a      	str	r2, [r7, #32]
 8003d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	69f9      	ldr	r1, [r7, #28]
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e010      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	f43f af48 	beq.w	8003c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3770      	adds	r7, #112	; 0x70
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b097      	sub	sp, #92	; 0x5c
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d10e      	bne.n	8003e4e <UART_Start_Receive_IT+0x52>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <UART_Start_Receive_IT+0x48>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e42:	e02d      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e4c:	e028      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <UART_Start_Receive_IT+0x76>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <UART_Start_Receive_IT+0x6c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e66:	e01b      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	227f      	movs	r2, #127	; 0x7f
 8003e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e70:	e016      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e7a:	d10d      	bne.n	8003e98 <UART_Start_Receive_IT+0x9c>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <UART_Start_Receive_IT+0x92>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	227f      	movs	r2, #127	; 0x7f
 8003e88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e8c:	e008      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	223f      	movs	r2, #63	; 0x3f
 8003e92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e96:	e003      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2222      	movs	r2, #34	; 0x22
 8003eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ed0:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ed2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e5      	bne.n	8003eb0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	d107      	bne.n	8003efe <UART_Start_Receive_IT+0x102>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <UART_Start_Receive_IT+0x184>)
 8003efa:	669a      	str	r2, [r3, #104]	; 0x68
 8003efc:	e002      	b.n	8003f04 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <UART_Start_Receive_IT+0x188>)
 8003f02:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e6      	bne.n	8003f0c <UART_Start_Receive_IT+0x110>
 8003f3e:	e018      	b.n	8003f72 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f043 0320 	orr.w	r3, r3, #32
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	69f9      	ldr	r1, [r7, #28]
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e6      	bne.n	8003f40 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	375c      	adds	r7, #92	; 0x5c
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	080043ad 	.word	0x080043ad
 8003f84:	08004247 	.word	0x08004247

08003f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b095      	sub	sp, #84	; 0x54
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fae:	643b      	str	r3, [r7, #64]	; 0x40
 8003fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e6      	bne.n	8003f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d118      	bne.n	8004030 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	60bb      	str	r3, [r7, #8]
   return(result);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f023 0310 	bic.w	r3, r3, #16
 8004012:	647b      	str	r3, [r7, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6979      	ldr	r1, [r7, #20]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	613b      	str	r3, [r7, #16]
   return(result);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e6      	bne.n	8003ffe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004044:	bf00      	nop
 8004046:	3754      	adds	r7, #84	; 0x54
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fa8a 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b08f      	sub	sp, #60	; 0x3c
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	2b21      	cmp	r3, #33	; 0x21
 800408a:	d14c      	bne.n	8004126 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d132      	bne.n	80040fe <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e6      	bne.n	8004098 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6979      	ldr	r1, [r7, #20]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	613b      	str	r3, [r7, #16]
   return(result);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80040fc:	e013      	b.n	8004126 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004126:	bf00      	nop
 8004128:	373c      	adds	r7, #60	; 0x3c
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004132:	b480      	push	{r7}
 8004134:	b091      	sub	sp, #68	; 0x44
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413e:	2b21      	cmp	r3, #33	; 0x21
 8004140:	d151      	bne.n	80041e6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d132      	bne.n	80041b4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	623b      	str	r3, [r7, #32]
   return(result);
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
 800416e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e6      	bne.n	800414e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	60fb      	str	r3, [r7, #12]
   return(result);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	69b9      	ldr	r1, [r7, #24]
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	617b      	str	r3, [r7, #20]
   return(result);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041b2:	e018      	b.n	80041e6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041e6:	bf00      	nop
 80041e8:	3744      	adds	r7, #68	; 0x44
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b088      	sub	sp, #32
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	60bb      	str	r3, [r7, #8]
   return(result);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	613b      	str	r3, [r7, #16]
   return(result);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e6      	bne.n	80041fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fc fb7f 	bl	800093c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423e:	bf00      	nop
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b096      	sub	sp, #88	; 0x58
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004254:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425e:	2b22      	cmp	r3, #34	; 0x22
 8004260:	f040 8098 	bne.w	8004394 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800426e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004272:	b2d9      	uxtb	r1, r3
 8004274:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004278:	b2da      	uxtb	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	400a      	ands	r2, r1
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d17b      	bne.n	80043a4 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042c0:	653b      	str	r3, [r7, #80]	; 0x50
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ca:	647b      	str	r3, [r7, #68]	; 0x44
 80042cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e6      	bne.n	80042ac <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	623b      	str	r3, [r7, #32]
   return(result);
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e5      	bne.n	80042de <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	2b01      	cmp	r3, #1
 800432c:	d12e      	bne.n	800438c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	60fb      	str	r3, [r7, #12]
   return(result);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	617b      	str	r3, [r7, #20]
   return(result);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d103      	bne.n	800437c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2210      	movs	r2, #16
 800437a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff f909 	bl	800359c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800438a:	e00b      	b.n	80043a4 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fc fa6f 	bl	8000870 <HAL_UART_RxCpltCallback>
}
 8004392:	e007      	b.n	80043a4 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0208 	orr.w	r2, r2, #8
 80043a2:	619a      	str	r2, [r3, #24]
}
 80043a4:	bf00      	nop
 80043a6:	3758      	adds	r7, #88	; 0x58
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b096      	sub	sp, #88	; 0x58
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c4:	2b22      	cmp	r3, #34	; 0x22
 80043c6:	f040 8098 	bne.w	80044fa <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80043da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80043de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043e2:	4013      	ands	r3, r2
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d17b      	bne.n	800450a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004430:	643b      	str	r3, [r7, #64]	; 0x40
 8004432:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	61fb      	str	r3, [r7, #28]
   return(result);
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	64bb      	str	r3, [r7, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	2b01      	cmp	r3, #1
 8004492:	d12e      	bne.n	80044f2 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f023 0310 	bic.w	r3, r3, #16
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6979      	ldr	r1, [r7, #20]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	613b      	str	r3, [r7, #16]
   return(result);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d103      	bne.n	80044e2 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2210      	movs	r2, #16
 80044e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff f856 	bl	800359c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044f0:	e00b      	b.n	800450a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc f9bc 	bl	8000870 <HAL_UART_RxCpltCallback>
}
 80044f8:	e007      	b.n	800450a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0208 	orr.w	r2, r2, #8
 8004508:	619a      	str	r2, [r3, #24]
}
 800450a:	bf00      	nop
 800450c:	3758      	adds	r7, #88	; 0x58
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <siprintf>:
 8004514:	b40e      	push	{r1, r2, r3}
 8004516:	b500      	push	{lr}
 8004518:	b09c      	sub	sp, #112	; 0x70
 800451a:	ab1d      	add	r3, sp, #116	; 0x74
 800451c:	9002      	str	r0, [sp, #8]
 800451e:	9006      	str	r0, [sp, #24]
 8004520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004524:	4809      	ldr	r0, [pc, #36]	; (800454c <siprintf+0x38>)
 8004526:	9107      	str	r1, [sp, #28]
 8004528:	9104      	str	r1, [sp, #16]
 800452a:	4909      	ldr	r1, [pc, #36]	; (8004550 <siprintf+0x3c>)
 800452c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004530:	9105      	str	r1, [sp, #20]
 8004532:	6800      	ldr	r0, [r0, #0]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	a902      	add	r1, sp, #8
 8004538:	f000 f9ae 	bl	8004898 <_svfiprintf_r>
 800453c:	9b02      	ldr	r3, [sp, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	b01c      	add	sp, #112	; 0x70
 8004544:	f85d eb04 	ldr.w	lr, [sp], #4
 8004548:	b003      	add	sp, #12
 800454a:	4770      	bx	lr
 800454c:	20000060 	.word	0x20000060
 8004550:	ffff0208 	.word	0xffff0208

08004554 <memset>:
 8004554:	4402      	add	r2, r0
 8004556:	4603      	mov	r3, r0
 8004558:	4293      	cmp	r3, r2
 800455a:	d100      	bne.n	800455e <memset+0xa>
 800455c:	4770      	bx	lr
 800455e:	f803 1b01 	strb.w	r1, [r3], #1
 8004562:	e7f9      	b.n	8004558 <memset+0x4>

08004564 <strncpy>:
 8004564:	b510      	push	{r4, lr}
 8004566:	3901      	subs	r1, #1
 8004568:	4603      	mov	r3, r0
 800456a:	b132      	cbz	r2, 800457a <strncpy+0x16>
 800456c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004570:	f803 4b01 	strb.w	r4, [r3], #1
 8004574:	3a01      	subs	r2, #1
 8004576:	2c00      	cmp	r4, #0
 8004578:	d1f7      	bne.n	800456a <strncpy+0x6>
 800457a:	441a      	add	r2, r3
 800457c:	2100      	movs	r1, #0
 800457e:	4293      	cmp	r3, r2
 8004580:	d100      	bne.n	8004584 <strncpy+0x20>
 8004582:	bd10      	pop	{r4, pc}
 8004584:	f803 1b01 	strb.w	r1, [r3], #1
 8004588:	e7f9      	b.n	800457e <strncpy+0x1a>
	...

0800458c <__errno>:
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <__errno+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000060 	.word	0x20000060

08004598 <__libc_init_array>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4d0d      	ldr	r5, [pc, #52]	; (80045d0 <__libc_init_array+0x38>)
 800459c:	4c0d      	ldr	r4, [pc, #52]	; (80045d4 <__libc_init_array+0x3c>)
 800459e:	1b64      	subs	r4, r4, r5
 80045a0:	10a4      	asrs	r4, r4, #2
 80045a2:	2600      	movs	r6, #0
 80045a4:	42a6      	cmp	r6, r4
 80045a6:	d109      	bne.n	80045bc <__libc_init_array+0x24>
 80045a8:	4d0b      	ldr	r5, [pc, #44]	; (80045d8 <__libc_init_array+0x40>)
 80045aa:	4c0c      	ldr	r4, [pc, #48]	; (80045dc <__libc_init_array+0x44>)
 80045ac:	f000 fc72 	bl	8004e94 <_init>
 80045b0:	1b64      	subs	r4, r4, r5
 80045b2:	10a4      	asrs	r4, r4, #2
 80045b4:	2600      	movs	r6, #0
 80045b6:	42a6      	cmp	r6, r4
 80045b8:	d105      	bne.n	80045c6 <__libc_init_array+0x2e>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c0:	4798      	blx	r3
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7ee      	b.n	80045a4 <__libc_init_array+0xc>
 80045c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ca:	4798      	blx	r3
 80045cc:	3601      	adds	r6, #1
 80045ce:	e7f2      	b.n	80045b6 <__libc_init_array+0x1e>
 80045d0:	08004f64 	.word	0x08004f64
 80045d4:	08004f64 	.word	0x08004f64
 80045d8:	08004f64 	.word	0x08004f64
 80045dc:	08004f68 	.word	0x08004f68

080045e0 <__retarget_lock_acquire_recursive>:
 80045e0:	4770      	bx	lr

080045e2 <__retarget_lock_release_recursive>:
 80045e2:	4770      	bx	lr

080045e4 <strcpy>:
 80045e4:	4603      	mov	r3, r0
 80045e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ea:	f803 2b01 	strb.w	r2, [r3], #1
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d1f9      	bne.n	80045e6 <strcpy+0x2>
 80045f2:	4770      	bx	lr

080045f4 <_free_r>:
 80045f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d044      	beq.n	8004684 <_free_r+0x90>
 80045fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fe:	9001      	str	r0, [sp, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f1a1 0404 	sub.w	r4, r1, #4
 8004606:	bfb8      	it	lt
 8004608:	18e4      	addlt	r4, r4, r3
 800460a:	f000 f8df 	bl	80047cc <__malloc_lock>
 800460e:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <_free_r+0x94>)
 8004610:	9801      	ldr	r0, [sp, #4]
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	b933      	cbnz	r3, 8004624 <_free_r+0x30>
 8004616:	6063      	str	r3, [r4, #4]
 8004618:	6014      	str	r4, [r2, #0]
 800461a:	b003      	add	sp, #12
 800461c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004620:	f000 b8da 	b.w	80047d8 <__malloc_unlock>
 8004624:	42a3      	cmp	r3, r4
 8004626:	d908      	bls.n	800463a <_free_r+0x46>
 8004628:	6825      	ldr	r5, [r4, #0]
 800462a:	1961      	adds	r1, r4, r5
 800462c:	428b      	cmp	r3, r1
 800462e:	bf01      	itttt	eq
 8004630:	6819      	ldreq	r1, [r3, #0]
 8004632:	685b      	ldreq	r3, [r3, #4]
 8004634:	1949      	addeq	r1, r1, r5
 8004636:	6021      	streq	r1, [r4, #0]
 8004638:	e7ed      	b.n	8004616 <_free_r+0x22>
 800463a:	461a      	mov	r2, r3
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	b10b      	cbz	r3, 8004644 <_free_r+0x50>
 8004640:	42a3      	cmp	r3, r4
 8004642:	d9fa      	bls.n	800463a <_free_r+0x46>
 8004644:	6811      	ldr	r1, [r2, #0]
 8004646:	1855      	adds	r5, r2, r1
 8004648:	42a5      	cmp	r5, r4
 800464a:	d10b      	bne.n	8004664 <_free_r+0x70>
 800464c:	6824      	ldr	r4, [r4, #0]
 800464e:	4421      	add	r1, r4
 8004650:	1854      	adds	r4, r2, r1
 8004652:	42a3      	cmp	r3, r4
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	d1e0      	bne.n	800461a <_free_r+0x26>
 8004658:	681c      	ldr	r4, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	6053      	str	r3, [r2, #4]
 800465e:	440c      	add	r4, r1
 8004660:	6014      	str	r4, [r2, #0]
 8004662:	e7da      	b.n	800461a <_free_r+0x26>
 8004664:	d902      	bls.n	800466c <_free_r+0x78>
 8004666:	230c      	movs	r3, #12
 8004668:	6003      	str	r3, [r0, #0]
 800466a:	e7d6      	b.n	800461a <_free_r+0x26>
 800466c:	6825      	ldr	r5, [r4, #0]
 800466e:	1961      	adds	r1, r4, r5
 8004670:	428b      	cmp	r3, r1
 8004672:	bf04      	itt	eq
 8004674:	6819      	ldreq	r1, [r3, #0]
 8004676:	685b      	ldreq	r3, [r3, #4]
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	bf04      	itt	eq
 800467c:	1949      	addeq	r1, r1, r5
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	6054      	str	r4, [r2, #4]
 8004682:	e7ca      	b.n	800461a <_free_r+0x26>
 8004684:	b003      	add	sp, #12
 8004686:	bd30      	pop	{r4, r5, pc}
 8004688:	200003f4 	.word	0x200003f4

0800468c <sbrk_aligned>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4e0e      	ldr	r6, [pc, #56]	; (80046c8 <sbrk_aligned+0x3c>)
 8004690:	460c      	mov	r4, r1
 8004692:	6831      	ldr	r1, [r6, #0]
 8004694:	4605      	mov	r5, r0
 8004696:	b911      	cbnz	r1, 800469e <sbrk_aligned+0x12>
 8004698:	f000 fba6 	bl	8004de8 <_sbrk_r>
 800469c:	6030      	str	r0, [r6, #0]
 800469e:	4621      	mov	r1, r4
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 fba1 	bl	8004de8 <_sbrk_r>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	d00a      	beq.n	80046c0 <sbrk_aligned+0x34>
 80046aa:	1cc4      	adds	r4, r0, #3
 80046ac:	f024 0403 	bic.w	r4, r4, #3
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d007      	beq.n	80046c4 <sbrk_aligned+0x38>
 80046b4:	1a21      	subs	r1, r4, r0
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 fb96 	bl	8004de8 <_sbrk_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d101      	bne.n	80046c4 <sbrk_aligned+0x38>
 80046c0:	f04f 34ff 	mov.w	r4, #4294967295
 80046c4:	4620      	mov	r0, r4
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	200003f8 	.word	0x200003f8

080046cc <_malloc_r>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	1ccd      	adds	r5, r1, #3
 80046d2:	f025 0503 	bic.w	r5, r5, #3
 80046d6:	3508      	adds	r5, #8
 80046d8:	2d0c      	cmp	r5, #12
 80046da:	bf38      	it	cc
 80046dc:	250c      	movcc	r5, #12
 80046de:	2d00      	cmp	r5, #0
 80046e0:	4607      	mov	r7, r0
 80046e2:	db01      	blt.n	80046e8 <_malloc_r+0x1c>
 80046e4:	42a9      	cmp	r1, r5
 80046e6:	d905      	bls.n	80046f4 <_malloc_r+0x28>
 80046e8:	230c      	movs	r3, #12
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	2600      	movs	r6, #0
 80046ee:	4630      	mov	r0, r6
 80046f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047c8 <_malloc_r+0xfc>
 80046f8:	f000 f868 	bl	80047cc <__malloc_lock>
 80046fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004700:	461c      	mov	r4, r3
 8004702:	bb5c      	cbnz	r4, 800475c <_malloc_r+0x90>
 8004704:	4629      	mov	r1, r5
 8004706:	4638      	mov	r0, r7
 8004708:	f7ff ffc0 	bl	800468c <sbrk_aligned>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	4604      	mov	r4, r0
 8004710:	d155      	bne.n	80047be <_malloc_r+0xf2>
 8004712:	f8d8 4000 	ldr.w	r4, [r8]
 8004716:	4626      	mov	r6, r4
 8004718:	2e00      	cmp	r6, #0
 800471a:	d145      	bne.n	80047a8 <_malloc_r+0xdc>
 800471c:	2c00      	cmp	r4, #0
 800471e:	d048      	beq.n	80047b2 <_malloc_r+0xe6>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	4631      	mov	r1, r6
 8004724:	4638      	mov	r0, r7
 8004726:	eb04 0903 	add.w	r9, r4, r3
 800472a:	f000 fb5d 	bl	8004de8 <_sbrk_r>
 800472e:	4581      	cmp	r9, r0
 8004730:	d13f      	bne.n	80047b2 <_malloc_r+0xe6>
 8004732:	6821      	ldr	r1, [r4, #0]
 8004734:	1a6d      	subs	r5, r5, r1
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ffa7 	bl	800468c <sbrk_aligned>
 800473e:	3001      	adds	r0, #1
 8004740:	d037      	beq.n	80047b2 <_malloc_r+0xe6>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	442b      	add	r3, r5
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	f8d8 3000 	ldr.w	r3, [r8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d038      	beq.n	80047c2 <_malloc_r+0xf6>
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	42a2      	cmp	r2, r4
 8004754:	d12b      	bne.n	80047ae <_malloc_r+0xe2>
 8004756:	2200      	movs	r2, #0
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e00f      	b.n	800477c <_malloc_r+0xb0>
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	1b52      	subs	r2, r2, r5
 8004760:	d41f      	bmi.n	80047a2 <_malloc_r+0xd6>
 8004762:	2a0b      	cmp	r2, #11
 8004764:	d917      	bls.n	8004796 <_malloc_r+0xca>
 8004766:	1961      	adds	r1, r4, r5
 8004768:	42a3      	cmp	r3, r4
 800476a:	6025      	str	r5, [r4, #0]
 800476c:	bf18      	it	ne
 800476e:	6059      	strne	r1, [r3, #4]
 8004770:	6863      	ldr	r3, [r4, #4]
 8004772:	bf08      	it	eq
 8004774:	f8c8 1000 	streq.w	r1, [r8]
 8004778:	5162      	str	r2, [r4, r5]
 800477a:	604b      	str	r3, [r1, #4]
 800477c:	4638      	mov	r0, r7
 800477e:	f104 060b 	add.w	r6, r4, #11
 8004782:	f000 f829 	bl	80047d8 <__malloc_unlock>
 8004786:	f026 0607 	bic.w	r6, r6, #7
 800478a:	1d23      	adds	r3, r4, #4
 800478c:	1af2      	subs	r2, r6, r3
 800478e:	d0ae      	beq.n	80046ee <_malloc_r+0x22>
 8004790:	1b9b      	subs	r3, r3, r6
 8004792:	50a3      	str	r3, [r4, r2]
 8004794:	e7ab      	b.n	80046ee <_malloc_r+0x22>
 8004796:	42a3      	cmp	r3, r4
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	d1dd      	bne.n	8004758 <_malloc_r+0x8c>
 800479c:	f8c8 2000 	str.w	r2, [r8]
 80047a0:	e7ec      	b.n	800477c <_malloc_r+0xb0>
 80047a2:	4623      	mov	r3, r4
 80047a4:	6864      	ldr	r4, [r4, #4]
 80047a6:	e7ac      	b.n	8004702 <_malloc_r+0x36>
 80047a8:	4634      	mov	r4, r6
 80047aa:	6876      	ldr	r6, [r6, #4]
 80047ac:	e7b4      	b.n	8004718 <_malloc_r+0x4c>
 80047ae:	4613      	mov	r3, r2
 80047b0:	e7cc      	b.n	800474c <_malloc_r+0x80>
 80047b2:	230c      	movs	r3, #12
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4638      	mov	r0, r7
 80047b8:	f000 f80e 	bl	80047d8 <__malloc_unlock>
 80047bc:	e797      	b.n	80046ee <_malloc_r+0x22>
 80047be:	6025      	str	r5, [r4, #0]
 80047c0:	e7dc      	b.n	800477c <_malloc_r+0xb0>
 80047c2:	605b      	str	r3, [r3, #4]
 80047c4:	deff      	udf	#255	; 0xff
 80047c6:	bf00      	nop
 80047c8:	200003f4 	.word	0x200003f4

080047cc <__malloc_lock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__malloc_lock+0x8>)
 80047ce:	f7ff bf07 	b.w	80045e0 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	200003f0 	.word	0x200003f0

080047d8 <__malloc_unlock>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__malloc_unlock+0x8>)
 80047da:	f7ff bf02 	b.w	80045e2 <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	200003f0 	.word	0x200003f0

080047e4 <__ssputs_r>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	461f      	mov	r7, r3
 80047ec:	42be      	cmp	r6, r7
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	4682      	mov	sl, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	4690      	mov	r8, r2
 80047f6:	d82c      	bhi.n	8004852 <__ssputs_r+0x6e>
 80047f8:	898a      	ldrh	r2, [r1, #12]
 80047fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047fe:	d026      	beq.n	800484e <__ssputs_r+0x6a>
 8004800:	6965      	ldr	r5, [r4, #20]
 8004802:	6909      	ldr	r1, [r1, #16]
 8004804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004808:	eba3 0901 	sub.w	r9, r3, r1
 800480c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004810:	1c7b      	adds	r3, r7, #1
 8004812:	444b      	add	r3, r9
 8004814:	106d      	asrs	r5, r5, #1
 8004816:	429d      	cmp	r5, r3
 8004818:	bf38      	it	cc
 800481a:	461d      	movcc	r5, r3
 800481c:	0553      	lsls	r3, r2, #21
 800481e:	d527      	bpl.n	8004870 <__ssputs_r+0x8c>
 8004820:	4629      	mov	r1, r5
 8004822:	f7ff ff53 	bl	80046cc <_malloc_r>
 8004826:	4606      	mov	r6, r0
 8004828:	b360      	cbz	r0, 8004884 <__ssputs_r+0xa0>
 800482a:	6921      	ldr	r1, [r4, #16]
 800482c:	464a      	mov	r2, r9
 800482e:	f000 faeb 	bl	8004e08 <memcpy>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	6126      	str	r6, [r4, #16]
 8004840:	6165      	str	r5, [r4, #20]
 8004842:	444e      	add	r6, r9
 8004844:	eba5 0509 	sub.w	r5, r5, r9
 8004848:	6026      	str	r6, [r4, #0]
 800484a:	60a5      	str	r5, [r4, #8]
 800484c:	463e      	mov	r6, r7
 800484e:	42be      	cmp	r6, r7
 8004850:	d900      	bls.n	8004854 <__ssputs_r+0x70>
 8004852:	463e      	mov	r6, r7
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	4632      	mov	r2, r6
 8004858:	4641      	mov	r1, r8
 800485a:	f000 faab 	bl	8004db4 <memmove>
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	1b9b      	subs	r3, r3, r6
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	4433      	add	r3, r6
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	2000      	movs	r0, #0
 800486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004870:	462a      	mov	r2, r5
 8004872:	f000 fad7 	bl	8004e24 <_realloc_r>
 8004876:	4606      	mov	r6, r0
 8004878:	2800      	cmp	r0, #0
 800487a:	d1e0      	bne.n	800483e <__ssputs_r+0x5a>
 800487c:	6921      	ldr	r1, [r4, #16]
 800487e:	4650      	mov	r0, sl
 8004880:	f7ff feb8 	bl	80045f4 <_free_r>
 8004884:	230c      	movs	r3, #12
 8004886:	f8ca 3000 	str.w	r3, [sl]
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	e7e9      	b.n	800486c <__ssputs_r+0x88>

08004898 <_svfiprintf_r>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	4698      	mov	r8, r3
 800489e:	898b      	ldrh	r3, [r1, #12]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	b09d      	sub	sp, #116	; 0x74
 80048a4:	4607      	mov	r7, r0
 80048a6:	460d      	mov	r5, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	d50e      	bpl.n	80048ca <_svfiprintf_r+0x32>
 80048ac:	690b      	ldr	r3, [r1, #16]
 80048ae:	b963      	cbnz	r3, 80048ca <_svfiprintf_r+0x32>
 80048b0:	2140      	movs	r1, #64	; 0x40
 80048b2:	f7ff ff0b 	bl	80046cc <_malloc_r>
 80048b6:	6028      	str	r0, [r5, #0]
 80048b8:	6128      	str	r0, [r5, #16]
 80048ba:	b920      	cbnz	r0, 80048c6 <_svfiprintf_r+0x2e>
 80048bc:	230c      	movs	r3, #12
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	e0d0      	b.n	8004a68 <_svfiprintf_r+0x1d0>
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	616b      	str	r3, [r5, #20]
 80048ca:	2300      	movs	r3, #0
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	2320      	movs	r3, #32
 80048d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d8:	2330      	movs	r3, #48	; 0x30
 80048da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a80 <_svfiprintf_r+0x1e8>
 80048de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048e2:	f04f 0901 	mov.w	r9, #1
 80048e6:	4623      	mov	r3, r4
 80048e8:	469a      	mov	sl, r3
 80048ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ee:	b10a      	cbz	r2, 80048f4 <_svfiprintf_r+0x5c>
 80048f0:	2a25      	cmp	r2, #37	; 0x25
 80048f2:	d1f9      	bne.n	80048e8 <_svfiprintf_r+0x50>
 80048f4:	ebba 0b04 	subs.w	fp, sl, r4
 80048f8:	d00b      	beq.n	8004912 <_svfiprintf_r+0x7a>
 80048fa:	465b      	mov	r3, fp
 80048fc:	4622      	mov	r2, r4
 80048fe:	4629      	mov	r1, r5
 8004900:	4638      	mov	r0, r7
 8004902:	f7ff ff6f 	bl	80047e4 <__ssputs_r>
 8004906:	3001      	adds	r0, #1
 8004908:	f000 80a9 	beq.w	8004a5e <_svfiprintf_r+0x1c6>
 800490c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800490e:	445a      	add	r2, fp
 8004910:	9209      	str	r2, [sp, #36]	; 0x24
 8004912:	f89a 3000 	ldrb.w	r3, [sl]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a1 	beq.w	8004a5e <_svfiprintf_r+0x1c6>
 800491c:	2300      	movs	r3, #0
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004926:	f10a 0a01 	add.w	sl, sl, #1
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	9307      	str	r3, [sp, #28]
 800492e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004932:	931a      	str	r3, [sp, #104]	; 0x68
 8004934:	4654      	mov	r4, sl
 8004936:	2205      	movs	r2, #5
 8004938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493c:	4850      	ldr	r0, [pc, #320]	; (8004a80 <_svfiprintf_r+0x1e8>)
 800493e:	f7fb fc87 	bl	8000250 <memchr>
 8004942:	9a04      	ldr	r2, [sp, #16]
 8004944:	b9d8      	cbnz	r0, 800497e <_svfiprintf_r+0xe6>
 8004946:	06d0      	lsls	r0, r2, #27
 8004948:	bf44      	itt	mi
 800494a:	2320      	movmi	r3, #32
 800494c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004950:	0711      	lsls	r1, r2, #28
 8004952:	bf44      	itt	mi
 8004954:	232b      	movmi	r3, #43	; 0x2b
 8004956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800495a:	f89a 3000 	ldrb.w	r3, [sl]
 800495e:	2b2a      	cmp	r3, #42	; 0x2a
 8004960:	d015      	beq.n	800498e <_svfiprintf_r+0xf6>
 8004962:	9a07      	ldr	r2, [sp, #28]
 8004964:	4654      	mov	r4, sl
 8004966:	2000      	movs	r0, #0
 8004968:	f04f 0c0a 	mov.w	ip, #10
 800496c:	4621      	mov	r1, r4
 800496e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004972:	3b30      	subs	r3, #48	; 0x30
 8004974:	2b09      	cmp	r3, #9
 8004976:	d94d      	bls.n	8004a14 <_svfiprintf_r+0x17c>
 8004978:	b1b0      	cbz	r0, 80049a8 <_svfiprintf_r+0x110>
 800497a:	9207      	str	r2, [sp, #28]
 800497c:	e014      	b.n	80049a8 <_svfiprintf_r+0x110>
 800497e:	eba0 0308 	sub.w	r3, r0, r8
 8004982:	fa09 f303 	lsl.w	r3, r9, r3
 8004986:	4313      	orrs	r3, r2
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	46a2      	mov	sl, r4
 800498c:	e7d2      	b.n	8004934 <_svfiprintf_r+0x9c>
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	9103      	str	r1, [sp, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfbb      	ittet	lt
 800499a:	425b      	neglt	r3, r3
 800499c:	f042 0202 	orrlt.w	r2, r2, #2
 80049a0:	9307      	strge	r3, [sp, #28]
 80049a2:	9307      	strlt	r3, [sp, #28]
 80049a4:	bfb8      	it	lt
 80049a6:	9204      	strlt	r2, [sp, #16]
 80049a8:	7823      	ldrb	r3, [r4, #0]
 80049aa:	2b2e      	cmp	r3, #46	; 0x2e
 80049ac:	d10c      	bne.n	80049c8 <_svfiprintf_r+0x130>
 80049ae:	7863      	ldrb	r3, [r4, #1]
 80049b0:	2b2a      	cmp	r3, #42	; 0x2a
 80049b2:	d134      	bne.n	8004a1e <_svfiprintf_r+0x186>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	1d1a      	adds	r2, r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	9203      	str	r2, [sp, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bfb8      	it	lt
 80049c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80049c4:	3402      	adds	r4, #2
 80049c6:	9305      	str	r3, [sp, #20]
 80049c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a90 <_svfiprintf_r+0x1f8>
 80049cc:	7821      	ldrb	r1, [r4, #0]
 80049ce:	2203      	movs	r2, #3
 80049d0:	4650      	mov	r0, sl
 80049d2:	f7fb fc3d 	bl	8000250 <memchr>
 80049d6:	b138      	cbz	r0, 80049e8 <_svfiprintf_r+0x150>
 80049d8:	9b04      	ldr	r3, [sp, #16]
 80049da:	eba0 000a 	sub.w	r0, r0, sl
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	4082      	lsls	r2, r0
 80049e2:	4313      	orrs	r3, r2
 80049e4:	3401      	adds	r4, #1
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ec:	4825      	ldr	r0, [pc, #148]	; (8004a84 <_svfiprintf_r+0x1ec>)
 80049ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049f2:	2206      	movs	r2, #6
 80049f4:	f7fb fc2c 	bl	8000250 <memchr>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d038      	beq.n	8004a6e <_svfiprintf_r+0x1d6>
 80049fc:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <_svfiprintf_r+0x1f0>)
 80049fe:	bb1b      	cbnz	r3, 8004a48 <_svfiprintf_r+0x1b0>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	3307      	adds	r3, #7
 8004a04:	f023 0307 	bic.w	r3, r3, #7
 8004a08:	3308      	adds	r3, #8
 8004a0a:	9303      	str	r3, [sp, #12]
 8004a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0e:	4433      	add	r3, r6
 8004a10:	9309      	str	r3, [sp, #36]	; 0x24
 8004a12:	e768      	b.n	80048e6 <_svfiprintf_r+0x4e>
 8004a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a18:	460c      	mov	r4, r1
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	e7a6      	b.n	800496c <_svfiprintf_r+0xd4>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	3401      	adds	r4, #1
 8004a22:	9305      	str	r3, [sp, #20]
 8004a24:	4619      	mov	r1, r3
 8004a26:	f04f 0c0a 	mov.w	ip, #10
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a30:	3a30      	subs	r2, #48	; 0x30
 8004a32:	2a09      	cmp	r2, #9
 8004a34:	d903      	bls.n	8004a3e <_svfiprintf_r+0x1a6>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0c6      	beq.n	80049c8 <_svfiprintf_r+0x130>
 8004a3a:	9105      	str	r1, [sp, #20]
 8004a3c:	e7c4      	b.n	80049c8 <_svfiprintf_r+0x130>
 8004a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a42:	4604      	mov	r4, r0
 8004a44:	2301      	movs	r3, #1
 8004a46:	e7f0      	b.n	8004a2a <_svfiprintf_r+0x192>
 8004a48:	ab03      	add	r3, sp, #12
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <_svfiprintf_r+0x1f4>)
 8004a50:	a904      	add	r1, sp, #16
 8004a52:	4638      	mov	r0, r7
 8004a54:	f3af 8000 	nop.w
 8004a58:	1c42      	adds	r2, r0, #1
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	d1d6      	bne.n	8004a0c <_svfiprintf_r+0x174>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	065b      	lsls	r3, r3, #25
 8004a62:	f53f af2d 	bmi.w	80048c0 <_svfiprintf_r+0x28>
 8004a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a68:	b01d      	add	sp, #116	; 0x74
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	462a      	mov	r2, r5
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <_svfiprintf_r+0x1f4>)
 8004a76:	a904      	add	r1, sp, #16
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f000 f879 	bl	8004b70 <_printf_i>
 8004a7e:	e7eb      	b.n	8004a58 <_svfiprintf_r+0x1c0>
 8004a80:	08004f28 	.word	0x08004f28
 8004a84:	08004f32 	.word	0x08004f32
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	080047e5 	.word	0x080047e5
 8004a90:	08004f2e 	.word	0x08004f2e

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4616      	mov	r6, r2
 8004a9a:	4699      	mov	r9, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bfb8      	it	lt
 8004aa8:	4613      	movlt	r3, r2
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b10a      	cbz	r2, 8004aba <_printf_common+0x26>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	6833      	ldrmi	r3, [r6, #0]
 8004ac2:	3302      	addmi	r3, #2
 8004ac4:	6033      	strmi	r3, [r6, #0]
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	f015 0506 	ands.w	r5, r5, #6
 8004acc:	d106      	bne.n	8004adc <_printf_common+0x48>
 8004ace:	f104 0a19 	add.w	sl, r4, #25
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dc26      	bgt.n	8004b2a <_printf_common+0x96>
 8004adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae0:	1e13      	subs	r3, r2, #0
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d42b      	bmi.n	8004b44 <_printf_common+0xb0>
 8004aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af0:	4649      	mov	r1, r9
 8004af2:	4638      	mov	r0, r7
 8004af4:	47c0      	blx	r8
 8004af6:	3001      	adds	r0, #1
 8004af8:	d01e      	beq.n	8004b38 <_printf_common+0xa4>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	f003 0306 	and.w	r3, r3, #6
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	bf02      	ittt	eq
 8004b06:	68e5      	ldreq	r5, [r4, #12]
 8004b08:	6833      	ldreq	r3, [r6, #0]
 8004b0a:	1aed      	subeq	r5, r5, r3
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	bf0c      	ite	eq
 8004b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b14:	2500      	movne	r5, #0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfc4      	itt	gt
 8004b1a:	1a9b      	subgt	r3, r3, r2
 8004b1c:	18ed      	addgt	r5, r5, r3
 8004b1e:	2600      	movs	r6, #0
 8004b20:	341a      	adds	r4, #26
 8004b22:	42b5      	cmp	r5, r6
 8004b24:	d11a      	bne.n	8004b5c <_printf_common+0xc8>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e008      	b.n	8004b3c <_printf_common+0xa8>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4638      	mov	r0, r7
 8004b32:	47c0      	blx	r8
 8004b34:	3001      	adds	r0, #1
 8004b36:	d103      	bne.n	8004b40 <_printf_common+0xac>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7c6      	b.n	8004ad2 <_printf_common+0x3e>
 8004b44:	18e1      	adds	r1, r4, r3
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	2030      	movs	r0, #48	; 0x30
 8004b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4e:	4422      	add	r2, r4
 8004b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b58:	3302      	adds	r3, #2
 8004b5a:	e7c7      	b.n	8004aec <_printf_common+0x58>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0e6      	beq.n	8004b38 <_printf_common+0xa4>
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7d9      	b.n	8004b22 <_printf_common+0x8e>
	...

08004b70 <_printf_i>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	7e0f      	ldrb	r7, [r1, #24]
 8004b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b78:	2f78      	cmp	r7, #120	; 0x78
 8004b7a:	4691      	mov	r9, r2
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	469a      	mov	sl, r3
 8004b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b86:	d807      	bhi.n	8004b98 <_printf_i+0x28>
 8004b88:	2f62      	cmp	r7, #98	; 0x62
 8004b8a:	d80a      	bhi.n	8004ba2 <_printf_i+0x32>
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	f000 80d4 	beq.w	8004d3a <_printf_i+0x1ca>
 8004b92:	2f58      	cmp	r7, #88	; 0x58
 8004b94:	f000 80c0 	beq.w	8004d18 <_printf_i+0x1a8>
 8004b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ba0:	e03a      	b.n	8004c18 <_printf_i+0xa8>
 8004ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba6:	2b15      	cmp	r3, #21
 8004ba8:	d8f6      	bhi.n	8004b98 <_printf_i+0x28>
 8004baa:	a101      	add	r1, pc, #4	; (adr r1, 8004bb0 <_printf_i+0x40>)
 8004bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004b99 	.word	0x08004b99
 8004bbc:	08004b99 	.word	0x08004b99
 8004bc0:	08004b99 	.word	0x08004b99
 8004bc4:	08004b99 	.word	0x08004b99
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b99 	.word	0x08004b99
 8004bd0:	08004b99 	.word	0x08004b99
 8004bd4:	08004b99 	.word	0x08004b99
 8004bd8:	08004b99 	.word	0x08004b99
 8004bdc:	08004d21 	.word	0x08004d21
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004cdb 	.word	0x08004cdb
 8004be8:	08004b99 	.word	0x08004b99
 8004bec:	08004b99 	.word	0x08004b99
 8004bf0:	08004d43 	.word	0x08004d43
 8004bf4:	08004b99 	.word	0x08004b99
 8004bf8:	08004c49 	.word	0x08004c49
 8004bfc:	08004b99 	.word	0x08004b99
 8004c00:	08004b99 	.word	0x08004b99
 8004c04:	08004ce3 	.word	0x08004ce3
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	602a      	str	r2, [r5, #0]
 8004c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e09f      	b.n	8004d5c <_printf_i+0x1ec>
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	682b      	ldr	r3, [r5, #0]
 8004c20:	0607      	lsls	r7, r0, #24
 8004c22:	f103 0104 	add.w	r1, r3, #4
 8004c26:	6029      	str	r1, [r5, #0]
 8004c28:	d501      	bpl.n	8004c2e <_printf_i+0xbe>
 8004c2a:	681e      	ldr	r6, [r3, #0]
 8004c2c:	e003      	b.n	8004c36 <_printf_i+0xc6>
 8004c2e:	0646      	lsls	r6, r0, #25
 8004c30:	d5fb      	bpl.n	8004c2a <_printf_i+0xba>
 8004c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	da03      	bge.n	8004c42 <_printf_i+0xd2>
 8004c3a:	232d      	movs	r3, #45	; 0x2d
 8004c3c:	4276      	negs	r6, r6
 8004c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c42:	485a      	ldr	r0, [pc, #360]	; (8004dac <_printf_i+0x23c>)
 8004c44:	230a      	movs	r3, #10
 8004c46:	e012      	b.n	8004c6e <_printf_i+0xfe>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	6029      	str	r1, [r5, #0]
 8004c50:	0605      	lsls	r5, r0, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xe8>
 8004c54:	681e      	ldr	r6, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0xee>
 8004c58:	0641      	lsls	r1, r0, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xe4>
 8004c5c:	881e      	ldrh	r6, [r3, #0]
 8004c5e:	4853      	ldr	r0, [pc, #332]	; (8004dac <_printf_i+0x23c>)
 8004c60:	2f6f      	cmp	r7, #111	; 0x6f
 8004c62:	bf0c      	ite	eq
 8004c64:	2308      	moveq	r3, #8
 8004c66:	230a      	movne	r3, #10
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c6e:	6865      	ldr	r5, [r4, #4]
 8004c70:	60a5      	str	r5, [r4, #8]
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	bfa2      	ittt	ge
 8004c76:	6821      	ldrge	r1, [r4, #0]
 8004c78:	f021 0104 	bicge.w	r1, r1, #4
 8004c7c:	6021      	strge	r1, [r4, #0]
 8004c7e:	b90e      	cbnz	r6, 8004c84 <_printf_i+0x114>
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	d04b      	beq.n	8004d1c <_printf_i+0x1ac>
 8004c84:	4615      	mov	r5, r2
 8004c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c8e:	5dc7      	ldrb	r7, [r0, r7]
 8004c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c94:	4637      	mov	r7, r6
 8004c96:	42bb      	cmp	r3, r7
 8004c98:	460e      	mov	r6, r1
 8004c9a:	d9f4      	bls.n	8004c86 <_printf_i+0x116>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d10b      	bne.n	8004cb8 <_printf_i+0x148>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07de      	lsls	r6, r3, #31
 8004ca4:	d508      	bpl.n	8004cb8 <_printf_i+0x148>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	4299      	cmp	r1, r3
 8004cac:	bfde      	ittt	le
 8004cae:	2330      	movle	r3, #48	; 0x30
 8004cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cb8:	1b52      	subs	r2, r2, r5
 8004cba:	6122      	str	r2, [r4, #16]
 8004cbc:	f8cd a000 	str.w	sl, [sp]
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	aa03      	add	r2, sp, #12
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fee4 	bl	8004a94 <_printf_common>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d14a      	bne.n	8004d66 <_printf_i+0x1f6>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b004      	add	sp, #16
 8004cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	4833      	ldr	r0, [pc, #204]	; (8004db0 <_printf_i+0x240>)
 8004ce4:	2778      	movs	r7, #120	; 0x78
 8004ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	061f      	lsls	r7, r3, #24
 8004cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cf4:	d402      	bmi.n	8004cfc <_printf_i+0x18c>
 8004cf6:	065f      	lsls	r7, r3, #25
 8004cf8:	bf48      	it	mi
 8004cfa:	b2b6      	uxthmi	r6, r6
 8004cfc:	07df      	lsls	r7, r3, #31
 8004cfe:	bf48      	it	mi
 8004d00:	f043 0320 	orrmi.w	r3, r3, #32
 8004d04:	6029      	str	r1, [r5, #0]
 8004d06:	bf48      	it	mi
 8004d08:	6023      	strmi	r3, [r4, #0]
 8004d0a:	b91e      	cbnz	r6, 8004d14 <_printf_i+0x1a4>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	2310      	movs	r3, #16
 8004d16:	e7a7      	b.n	8004c68 <_printf_i+0xf8>
 8004d18:	4824      	ldr	r0, [pc, #144]	; (8004dac <_printf_i+0x23c>)
 8004d1a:	e7e4      	b.n	8004ce6 <_printf_i+0x176>
 8004d1c:	4615      	mov	r5, r2
 8004d1e:	e7bd      	b.n	8004c9c <_printf_i+0x12c>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	6826      	ldr	r6, [r4, #0]
 8004d24:	6961      	ldr	r1, [r4, #20]
 8004d26:	1d18      	adds	r0, r3, #4
 8004d28:	6028      	str	r0, [r5, #0]
 8004d2a:	0635      	lsls	r5, r6, #24
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	d501      	bpl.n	8004d34 <_printf_i+0x1c4>
 8004d30:	6019      	str	r1, [r3, #0]
 8004d32:	e002      	b.n	8004d3a <_printf_i+0x1ca>
 8004d34:	0670      	lsls	r0, r6, #25
 8004d36:	d5fb      	bpl.n	8004d30 <_printf_i+0x1c0>
 8004d38:	8019      	strh	r1, [r3, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6123      	str	r3, [r4, #16]
 8004d3e:	4615      	mov	r5, r2
 8004d40:	e7bc      	b.n	8004cbc <_printf_i+0x14c>
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	1d1a      	adds	r2, r3, #4
 8004d46:	602a      	str	r2, [r5, #0]
 8004d48:	681d      	ldr	r5, [r3, #0]
 8004d4a:	6862      	ldr	r2, [r4, #4]
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7fb fa7e 	bl	8000250 <memchr>
 8004d54:	b108      	cbz	r0, 8004d5a <_printf_i+0x1ea>
 8004d56:	1b40      	subs	r0, r0, r5
 8004d58:	6060      	str	r0, [r4, #4]
 8004d5a:	6863      	ldr	r3, [r4, #4]
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d64:	e7aa      	b.n	8004cbc <_printf_i+0x14c>
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	462a      	mov	r2, r5
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	47d0      	blx	sl
 8004d70:	3001      	adds	r0, #1
 8004d72:	d0ad      	beq.n	8004cd0 <_printf_i+0x160>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	079b      	lsls	r3, r3, #30
 8004d78:	d413      	bmi.n	8004da2 <_printf_i+0x232>
 8004d7a:	68e0      	ldr	r0, [r4, #12]
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	4298      	cmp	r0, r3
 8004d80:	bfb8      	it	lt
 8004d82:	4618      	movlt	r0, r3
 8004d84:	e7a6      	b.n	8004cd4 <_printf_i+0x164>
 8004d86:	2301      	movs	r3, #1
 8004d88:	4632      	mov	r2, r6
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	47d0      	blx	sl
 8004d90:	3001      	adds	r0, #1
 8004d92:	d09d      	beq.n	8004cd0 <_printf_i+0x160>
 8004d94:	3501      	adds	r5, #1
 8004d96:	68e3      	ldr	r3, [r4, #12]
 8004d98:	9903      	ldr	r1, [sp, #12]
 8004d9a:	1a5b      	subs	r3, r3, r1
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	dcf2      	bgt.n	8004d86 <_printf_i+0x216>
 8004da0:	e7eb      	b.n	8004d7a <_printf_i+0x20a>
 8004da2:	2500      	movs	r5, #0
 8004da4:	f104 0619 	add.w	r6, r4, #25
 8004da8:	e7f5      	b.n	8004d96 <_printf_i+0x226>
 8004daa:	bf00      	nop
 8004dac:	08004f39 	.word	0x08004f39
 8004db0:	08004f4a 	.word	0x08004f4a

08004db4 <memmove>:
 8004db4:	4288      	cmp	r0, r1
 8004db6:	b510      	push	{r4, lr}
 8004db8:	eb01 0402 	add.w	r4, r1, r2
 8004dbc:	d902      	bls.n	8004dc4 <memmove+0x10>
 8004dbe:	4284      	cmp	r4, r0
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	d807      	bhi.n	8004dd4 <memmove+0x20>
 8004dc4:	1e43      	subs	r3, r0, #1
 8004dc6:	42a1      	cmp	r1, r4
 8004dc8:	d008      	beq.n	8004ddc <memmove+0x28>
 8004dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd2:	e7f8      	b.n	8004dc6 <memmove+0x12>
 8004dd4:	4402      	add	r2, r0
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	428a      	cmp	r2, r1
 8004dda:	d100      	bne.n	8004dde <memmove+0x2a>
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004de6:	e7f7      	b.n	8004dd8 <memmove+0x24>

08004de8 <_sbrk_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4d06      	ldr	r5, [pc, #24]	; (8004e04 <_sbrk_r+0x1c>)
 8004dec:	2300      	movs	r3, #0
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	f7fb fec8 	bl	8000b88 <_sbrk>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_sbrk_r+0x1a>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_sbrk_r+0x1a>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	200003ec 	.word	0x200003ec

08004e08 <memcpy>:
 8004e08:	440a      	add	r2, r1
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e10:	d100      	bne.n	8004e14 <memcpy+0xc>
 8004e12:	4770      	bx	lr
 8004e14:	b510      	push	{r4, lr}
 8004e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1e:	4291      	cmp	r1, r2
 8004e20:	d1f9      	bne.n	8004e16 <memcpy+0xe>
 8004e22:	bd10      	pop	{r4, pc}

08004e24 <_realloc_r>:
 8004e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e28:	4680      	mov	r8, r0
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	b921      	cbnz	r1, 8004e3a <_realloc_r+0x16>
 8004e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	4611      	mov	r1, r2
 8004e36:	f7ff bc49 	b.w	80046cc <_malloc_r>
 8004e3a:	b92a      	cbnz	r2, 8004e48 <_realloc_r+0x24>
 8004e3c:	f7ff fbda 	bl	80045f4 <_free_r>
 8004e40:	4625      	mov	r5, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	f000 f81b 	bl	8004e82 <_malloc_usable_size_r>
 8004e4c:	4284      	cmp	r4, r0
 8004e4e:	4607      	mov	r7, r0
 8004e50:	d802      	bhi.n	8004e58 <_realloc_r+0x34>
 8004e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e56:	d812      	bhi.n	8004e7e <_realloc_r+0x5a>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	f7ff fc36 	bl	80046cc <_malloc_r>
 8004e60:	4605      	mov	r5, r0
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d0ed      	beq.n	8004e42 <_realloc_r+0x1e>
 8004e66:	42bc      	cmp	r4, r7
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	bf28      	it	cs
 8004e6e:	463a      	movcs	r2, r7
 8004e70:	f7ff ffca 	bl	8004e08 <memcpy>
 8004e74:	4631      	mov	r1, r6
 8004e76:	4640      	mov	r0, r8
 8004e78:	f7ff fbbc 	bl	80045f4 <_free_r>
 8004e7c:	e7e1      	b.n	8004e42 <_realloc_r+0x1e>
 8004e7e:	4635      	mov	r5, r6
 8004e80:	e7df      	b.n	8004e42 <_realloc_r+0x1e>

08004e82 <_malloc_usable_size_r>:
 8004e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e86:	1f18      	subs	r0, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bfbc      	itt	lt
 8004e8c:	580b      	ldrlt	r3, [r1, r0]
 8004e8e:	18c0      	addlt	r0, r0, r3
 8004e90:	4770      	bx	lr
	...

08004e94 <_init>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr

08004ea0 <_fini>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr
